{"score":42.24,"report":[{"format":"markup","foundDate":1638413755145,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-layout/views/BaseLayout.vue","start":{"line":268,"column":9,"position":1782},"end":{"line":298,"column":26,"position":1928},"range":[8710,9627],"fragment":".layout-header {\n            padding-left: 24px;\n            color: hsla(0,0%,100%,.65);\n            background: #001529;\n            .layout-menu {\n                line-height: 48px;\n            }\n            .layout-logo {\n                display: flex;\n                justify-content: flex-start;\n                align-items: center;\n                min-width: 165px;\n                height: 100%;\n                overflow: hidden;\n                transition: all .3s;\n                .logo-img {\n                    height: 32px;\n                    width: auto;\n                }\n                .logo-name {\n                    overflow: hidden;\n                    margin: 0 0 0 12px;\n                    color: #fff;\n                    font-weight: 600;\n                    font-size: 18px;\n                    line-height: 32px;\n                }\n            }\n        }\n    }\n    .layout-sider-fixed-stuff"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-layout/views/BaseLayout.vue","start":{"line":233,"column":9,"position":1601},"end":{"line":263,"column":31,"position":1747},"range":[7656,8578],"fragment":".layout-header {\n            padding-left: 24px;\n            color: hsla(0,0%,100%,.65);\n            background: #001529;\n            .layout-menu {\n                line-height: 48px;\n            }\n            .layout-logo {\n                display: flex;\n                justify-content: flex-start;\n                align-items: center;\n                min-width: 165px;\n                height: 100%;\n                overflow: hidden;\n                transition: all .3s;\n                .logo-img {\n                    height: 32px;\n                    width: auto;\n                }\n                .logo-name {\n                    overflow: hidden;\n                    margin: 0 0 0 12px;\n                    color: #fff;\n                    font-weight: 600;\n                    font-size: 18px;\n                    line-height: 32px;\n                }\n            }\n        }\n    }\n    &.main-layout-navigation-mixin"}},{"format":"markup","foundDate":1638413755150,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-layout/views/403.vue","start":{"line":2,"column":16,"position":24},"end":{"line":35,"column":2,"position":202},"range":[76,795],"fragment":"\">\n        <template #extra>\n            <a-button type=\"primary\" @click=\"click\">上一页</a-button>\n        </template>\n    </a-result>\n</template>\n<config>\n{\n    \"layout\": false\n}\n</config>\n<script>\nimport { useRouter } from '@@/core/coreExports';\nimport Result from 'ant-design-vue/lib/result';\nimport 'ant-design-vue/lib/result/style/css';\nimport Button from 'ant-design-vue/lib/button';\nimport 'ant-design-vue/lib/button/style/css';\n\nexport default {\n    components: {\n        [Result.name]: Result,\n        [Button.name]: Button\n    },\n    setup() {\n        const router = useRouter();\n        const click = () => {\n            router.back();\n        };\n        return {\n            click\n        };\n    }\n};\n</script>"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-layout/views/404.vue","start":{"line":2,"column":15,"position":24},"end":{"line":35,"column":2,"position":202},"range":[75,794],"fragment":"\">\n        <template #extra>\n            <a-button type=\"primary\" @click=\"click\">上一页</a-button>\n        </template>\n    </a-result>\n</template>\n<config>\n{\n    \"layout\": false\n}\n</config>\n<script>\nimport { useRouter } from '@@/core/coreExports';\nimport Result from 'ant-design-vue/lib/result';\nimport 'ant-design-vue/lib/result/style/css';\nimport Button from 'ant-design-vue/lib/button';\nimport 'ant-design-vue/lib/button/style/css';\n\nexport default {\n    components: {\n        [Result.name]: Result,\n        [Button.name]: Button\n    },\n    setup() {\n        const router = useRouter();\n        const click = () => {\n            router.back();\n        };\n        return {\n            click\n        };\n    }\n};\n</script>"}},{"format":"javascript","foundDate":1638413755173,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/core/routes/routes.js","start":{"line":75,"column":3,"position":515},"end":{"line":93,"column":17,"position":639},"range":[1825,2184],"fragment":"}\n];\n  return routes;\n}\n\nconst ROUTER_BASE = '';\nlet router = null;\nlet history = null;\nexport const createRouter = (routes) => {\n  if (router) {\n    return router;\n  }\n  const createHistory = plugin.applyPlugins({\n    key: 'modifyCreateHistroy',\n    type: ApplyPluginsType.modify,\n    args: {\n      base: ROUTER_BASE\n    },\n    initialValue: createWebHistory"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/core/routes/routes.js","start":{"line":26,"column":3,"position":184},"end":{"line":44,"column":21,"position":308},"range":[637,1000],"fragment":"}\n];\n  return routes;\n}\n\nconst ROUTER_BASE = '';\nlet router = null;\nlet history = null;\nexport const createRouter = (routes) => {\n  if (router) {\n    return router;\n  }\n  const createHistory = plugin.applyPlugins({\n    key: 'modifyCreateHistroy',\n    type: ApplyPluginsType.modify,\n    args: {\n      base: ROUTER_BASE\n    },\n    initialValue: createWebHashHistory"}},{"format":"javascript","foundDate":1638413755174,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/core/routes/routes.js","start":{"line":93,"column":17,"position":640},"end":{"line":133,"column":2,"position":883},"range":[2184,2897],"fragment":",\n  });\n  history = createHistory(ROUTER_BASE);\n  // 修改routes\n  plugin.applyPlugins({\n    key: 'patchRoutes',\n    type: ApplyPluginsType.event,\n    args: { routes },\n  });\n  router = createVueRouter({\n    history,\n    routes\n  });\n\n  plugin.applyPlugins({\n    key: 'onRouterCreated',\n    type: ApplyPluginsType.event,\n    args: { router },\n  });\n\n  return router;\n};\n\nexport const getRouter = ()=>{\n    if(!router){\n        console.warn(`[preset-build-in] router is null`)\n    }\n    return router;\n}\n\nexport const getHistory = ()=>{\n    if(!history){\n        console.warn(`[preset-build-in] history is null`)\n    }\n    return history;\n}\n\nexport const destroyRouter = ()=>{\n    router = null;\n    history = null;\n}"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/core/routes/routes.js","start":{"line":44,"column":21,"position":309},"end":{"line":84,"column":2,"position":552},"range":[1000,1713],"fragment":",\n  });\n  history = createHistory(ROUTER_BASE);\n  // 修改routes\n  plugin.applyPlugins({\n    key: 'patchRoutes',\n    type: ApplyPluginsType.event,\n    args: { routes },\n  });\n  router = createVueRouter({\n    history,\n    routes\n  });\n\n  plugin.applyPlugins({\n    key: 'onRouterCreated',\n    type: ApplyPluginsType.event,\n    args: { router },\n  });\n\n  return router;\n};\n\nexport const getRouter = ()=>{\n    if(!router){\n        console.warn(`[preset-build-in] router is null`)\n    }\n    return router;\n}\n\nexport const getHistory = ()=>{\n    if(!history){\n        console.warn(`[preset-build-in] history is null`)\n    }\n    return history;\n}\n\nexport const destroyRouter = ()=>{\n    router = null;\n    history = null;\n}"}},{"format":"less","foundDate":1638413755332,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/styles/mixins/hairline.less","start":{"line":1,"column":1,"position":0},"end":{"line":173,"column":2,"position":1037},"range":[0,4232],"fragment":"@import \"../theme\";\n\n.scale-hairline-common(@color, @top, @right, @bottom, @left) {\n    content: '';\n    position: absolute;\n    background-color: @color;\n    display: block;\n    z-index: 1;\n    top: @top;\n    right: @right;\n    bottom: @bottom;\n    left: @left;\n}\n\n.hairline(@direction, @color: @border-color-base) when (@direction ='top') {\n    border-top: 1PX solid @color;\n\n    html:not([data-scale]) & {\n        @media (min-resolution: 2dppx) {\n            border-top: none;\n            position: relative;\n\n            &::before {\n                .scale-hairline-common(@color, 0, auto, auto, 0);\n                width: 100%;\n                height: 1PX;\n                transform-origin: 50% 50%;\n                transform: scaleY(0.5);\n\n                @media (min-resolution: 3dppx) {\n                    transform: scaleY(0.33);\n                }\n            }\n        }\n    }\n}\n\n.hairline(@direction, @color: @border-color-base) when (@direction ='right') {\n    border-right: 1PX solid @color;\n\n    html:not([data-scale]) & {\n        @media (min-resolution: 2dppx) {\n            border-right: none;\n            position: relative;\n\n            &::after {\n                .scale-hairline-common(@color, 0, 0, auto, auto);\n                width: 1PX;\n                height: 100%;\n                background: @color;\n                transform-origin: 100% 50%;\n                transform: scaleX(0.5);\n\n                @media (min-resolution: 3dppx) {\n                    transform: scaleX(0.33);\n                }\n            }\n        }\n    }\n}\n\n.hairline(@direction, @color: @border-color-base) when (@direction ='bottom') {\n    border-bottom: 1PX solid @color;\n\n    html:not([data-scale]) & {\n        @media (min-resolution: 2dppx) {\n            border-bottom: none;\n            position: relative;\n\n            &::after {\n                .scale-hairline-common(@color, auto, auto, 0, 0);\n                width: 100%;\n                height: 1PX;\n                transform-origin: 50% 100%;\n                transform: scaleY(0.5);\n\n                @media (min-resolution: 3dppx) {\n                    transform: scaleY(0.33);\n                }\n            }\n        }\n    }\n}\n\n.hairline(@direction, @color: @border-color-base) when (@direction ='left') {\n    border-left: 1PX solid @color;\n\n    html:not([data-scale]) & {\n        @media (min-resolution: 2dppx) {\n            border-left: none;\n            position: relative;\n\n            &::before {\n                .scale-hairline-common(@color, 0, auto, auto, 0);\n                width: 1PX;\n                height: 100%;\n                transform-origin: 100% 50%;\n                transform: scaleX(0.5);\n\n                @media (min-resolution: 3dppx) {\n                    transform: scaleX(0.33);\n                }\n            }\n        }\n    }\n}\n\n.hairline(@direction, @color: @border-color-base, @radius: 0) when (@direction ='all') {\n    border: 1PX solid @color;\n    border-radius: @radius;\n\n    html:not([data-scale]) & {\n        @media (min-resolution: 2dppx) {\n            position: relative;\n            border: none;\n\n            &::before {\n                content: '';\n                position: absolute;\n                left: 0;\n                top: 0;\n                width: 200%;\n                height: 200%;\n                border: 1PX solid @color;\n                border-radius: @radius * 2;\n                transform-origin: 0 0;\n                transform: scale(0.5);\n                box-sizing: border-box;\n                pointer-events: none;\n            }\n        }\n    }\n}\n\n.hairline-remove(@position) when (@position ='left') {\n    border-left: 0;\n\n    &:before {\n        display: none !important;\n    }\n}\n\n.hairline-remove(@position) when (@position ='right') {\n    border-right: 0;\n\n    &:after {\n        display: none !important;\n    }\n}\n\n.hairline-remove(@position) when (@position ='top') {\n    border-top: 0;\n\n    &:before {\n        display: none !important;\n    }\n}\n\n.hairline-remove(@position) when (@position ='bottom') {\n    border-bottom: 0;\n\n    &:after {\n        display: none !important;\n    }\n}\n\n.hairline-remove(@position) when (@position ='all') {\n    border: 0;\n\n    &:before {\n        display: none !important;\n    }\n}"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/create-fes-app/templates/app/h5/src/styles/mixins/hairline.less","start":{"line":1,"column":1,"position":0},"end":{"line":173,"column":2,"position":1037},"range":[0,4232],"fragment":"@import \"../theme\";\n\n.scale-hairline-common(@color, @top, @right, @bottom, @left) {\n    content: '';\n    position: absolute;\n    background-color: @color;\n    display: block;\n    z-index: 1;\n    top: @top;\n    right: @right;\n    bottom: @bottom;\n    left: @left;\n}\n\n.hairline(@direction, @color: @border-color-base) when (@direction ='top') {\n    border-top: 1PX solid @color;\n\n    html:not([data-scale]) & {\n        @media (min-resolution: 2dppx) {\n            border-top: none;\n            position: relative;\n\n            &::before {\n                .scale-hairline-common(@color, 0, auto, auto, 0);\n                width: 100%;\n                height: 1PX;\n                transform-origin: 50% 50%;\n                transform: scaleY(0.5);\n\n                @media (min-resolution: 3dppx) {\n                    transform: scaleY(0.33);\n                }\n            }\n        }\n    }\n}\n\n.hairline(@direction, @color: @border-color-base) when (@direction ='right') {\n    border-right: 1PX solid @color;\n\n    html:not([data-scale]) & {\n        @media (min-resolution: 2dppx) {\n            border-right: none;\n            position: relative;\n\n            &::after {\n                .scale-hairline-common(@color, 0, 0, auto, auto);\n                width: 1PX;\n                height: 100%;\n                background: @color;\n                transform-origin: 100% 50%;\n                transform: scaleX(0.5);\n\n                @media (min-resolution: 3dppx) {\n                    transform: scaleX(0.33);\n                }\n            }\n        }\n    }\n}\n\n.hairline(@direction, @color: @border-color-base) when (@direction ='bottom') {\n    border-bottom: 1PX solid @color;\n\n    html:not([data-scale]) & {\n        @media (min-resolution: 2dppx) {\n            border-bottom: none;\n            position: relative;\n\n            &::after {\n                .scale-hairline-common(@color, auto, auto, 0, 0);\n                width: 100%;\n                height: 1PX;\n                transform-origin: 50% 100%;\n                transform: scaleY(0.5);\n\n                @media (min-resolution: 3dppx) {\n                    transform: scaleY(0.33);\n                }\n            }\n        }\n    }\n}\n\n.hairline(@direction, @color: @border-color-base) when (@direction ='left') {\n    border-left: 1PX solid @color;\n\n    html:not([data-scale]) & {\n        @media (min-resolution: 2dppx) {\n            border-left: none;\n            position: relative;\n\n            &::before {\n                .scale-hairline-common(@color, 0, auto, auto, 0);\n                width: 1PX;\n                height: 100%;\n                transform-origin: 100% 50%;\n                transform: scaleX(0.5);\n\n                @media (min-resolution: 3dppx) {\n                    transform: scaleX(0.33);\n                }\n            }\n        }\n    }\n}\n\n.hairline(@direction, @color: @border-color-base, @radius: 0) when (@direction ='all') {\n    border: 1PX solid @color;\n    border-radius: @radius;\n\n    html:not([data-scale]) & {\n        @media (min-resolution: 2dppx) {\n            position: relative;\n            border: none;\n\n            &::before {\n                content: '';\n                position: absolute;\n                left: 0;\n                top: 0;\n                width: 200%;\n                height: 200%;\n                border: 1PX solid @color;\n                border-radius: @radius * 2;\n                transform-origin: 0 0;\n                transform: scale(0.5);\n                box-sizing: border-box;\n                pointer-events: none;\n            }\n        }\n    }\n}\n\n.hairline-remove(@position) when (@position ='left') {\n    border-left: 0;\n\n    &:before {\n        display: none !important;\n    }\n}\n\n.hairline-remove(@position) when (@position ='right') {\n    border-right: 0;\n\n    &:after {\n        display: none !important;\n    }\n}\n\n.hairline-remove(@position) when (@position ='top') {\n    border-top: 0;\n\n    &:before {\n        display: none !important;\n    }\n}\n\n.hairline-remove(@position) when (@position ='bottom') {\n    border-bottom: 0;\n\n    &:after {\n        display: none !important;\n    }\n}\n\n.hairline-remove(@position) when (@position ='all') {\n    border: 0;\n\n    &:before {\n        display: none !important;\n    }\n}"}},{"format":"javascript","foundDate":1638413755409,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-request/throttle.js","start":{"line":2,"column":1,"position":1},"end":{"line":16,"column":2,"position":140},"range":[1,383],"fragment":"const throttleMap = new Map();\n\nexport default async (ctx, next) => {\n    if (ctx.config.throttle) {\n        if (throttleMap.get(ctx.key) >= Date.now()) {\n            ctx.error = {\n                type: 'FREQUENTLY',\n                msg: '请求过于频繁'\n            };\n            return;\n        }\n    }\n    await next();\n    throttleMap.set(ctx.key, Date.now() + ctx.config.throttle);\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/throttle.js","start":{"line":2,"column":1,"position":1},"end":{"line":16,"column":2,"position":140},"range":[1,383],"fragment":"const throttleMap = new Map();\n\nexport default async (ctx, next) => {\n    if (ctx.config.throttle) {\n        if (throttleMap.get(ctx.key) >= Date.now()) {\n            ctx.error = {\n                type: 'FREQUENTLY',\n                msg: '请求过于频繁'\n            };\n            return;\n        }\n    }\n    await next();\n    throttleMap.set(ctx.key, Date.now() + ctx.config.throttle);\n};"}},{"format":"javascript","foundDate":1638413755410,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-request/setDataField.js","start":{"line":1,"column":1,"position":0},"end":{"line":11,"column":2,"position":134},"range":[0,378],"fragment":"import { isObject } from './helpers';\n\n// FEATURE: 后续支持 a.b.c\nexport default async (ctx, next) => {\n    const dataField = ctx.config.dataField ?? ctx.dataField;\n    if (!ctx.error && ctx.response && isObject(ctx.response.data) && dataField) {\n        ctx.response._rawData = ctx.response.data;\n        ctx.response.data = ctx.response.data[dataField];\n    }\n    await next();\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/setDataField.js","start":{"line":1,"column":1,"position":0},"end":{"line":11,"column":2,"position":134},"range":[0,378],"fragment":"import { isObject } from './helpers';\n\n// FEATURE: 后续支持 a.b.c\nexport default async (ctx, next) => {\n    const dataField = ctx.config.dataField ?? ctx.dataField;\n    if (!ctx.error && ctx.response && isObject(ctx.response.data) && dataField) {\n        ctx.response._rawData = ctx.response.data;\n        ctx.response.data = ctx.response.data[dataField];\n    }\n    await next();\n};"}},{"format":"javascript","foundDate":1638413755411,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-request/scheduler.js","start":{"line":2,"column":1,"position":1},"end":{"line":33,"column":2,"position":307},"range":[1,952],"fragment":"class Scheduler {\n    constructor() {\n        this.middlewares = [];\n    }\n\n    use(fn) {\n        if (typeof fn !== 'function') throw new TypeError('middleware must be a function!');\n        this.middlewares.push(fn);\n        return this;\n    }\n\n    compose() {\n        return (context, next) => {\n            let index = -1;\n            const dispatch = (i) => {\n                if (i <= index) return Promise.reject(new Error('next() called multiple times'));\n                index = i;\n                let fn = this.middlewares[i];\n                if (index === this.middlewares.length) fn = next;\n                if (!fn) return Promise.resolve();\n                try {\n                    return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\n                } catch (e) {\n                    return Promise.reject(e);\n                }\n            };\n            return dispatch(0);\n        };\n    }\n}\n\nexport default new Scheduler();"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/scheduler.js","start":{"line":2,"column":1,"position":1},"end":{"line":33,"column":2,"position":307},"range":[1,952],"fragment":"class Scheduler {\n    constructor() {\n        this.middlewares = [];\n    }\n\n    use(fn) {\n        if (typeof fn !== 'function') throw new TypeError('middleware must be a function!');\n        this.middlewares.push(fn);\n        return this;\n    }\n\n    compose() {\n        return (context, next) => {\n            let index = -1;\n            const dispatch = (i) => {\n                if (i <= index) return Promise.reject(new Error('next() called multiple times'));\n                index = i;\n                let fn = this.middlewares[i];\n                if (index === this.middlewares.length) fn = next;\n                if (!fn) return Promise.resolve();\n                try {\n                    return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\n                } catch (e) {\n                    return Promise.reject(e);\n                }\n            };\n            return dispatch(0);\n        };\n    }\n}\n\nexport default new Scheduler();"}},{"format":"javascript","foundDate":1638413755412,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-request/resErrorProcess.js","start":{"line":1,"column":1,"position":0},"end":{"line":17,"column":2,"position":133},"range":[0,387],"fragment":"import { isObject } from './helpers';\n\n// 错误处理等副作用网上提\nexport default async (ctx, next) => {\n    const {\n        response,\n        config\n    } = ctx;\n    if (!config.closeResDataCheck && response && isObject(response.data)) {\n        const code = response.data.code;\n        if (code !== '0') {\n            ctx.error = response; // code 不为零进入 reject\n        }\n    }\n\n    await next();\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/resErrorProcess.js","start":{"line":1,"column":1,"position":0},"end":{"line":17,"column":2,"position":133},"range":[0,387],"fragment":"import { isObject } from './helpers';\n\n// 错误处理等副作用网上提\nexport default async (ctx, next) => {\n    const {\n        response,\n        config\n    } = ctx;\n    if (!config.closeResDataCheck && response && isObject(response.data)) {\n        const code = response.data.code;\n        if (code !== '0') {\n            ctx.error = response; // code 不为零进入 reject\n        }\n    }\n\n    await next();\n};"}},{"format":"javascript","foundDate":1638413755413,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-request/resDataAdaptor.js","start":{"line":1,"column":1,"position":0},"end":{"line":8,"column":2,"position":107},"range":[0,326],"fragment":"import { isFunction, isObject, isString } from './helpers';\n\nexport default async ({ response, responseDataAdaptor }, next) => {\n    if (isFunction(responseDataAdaptor) && response && (isObject(response.data) || isString(response.data))) {\n        response.data = responseDataAdaptor(response.data);\n    }\n    await next();\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/resDataAdaptor.js","start":{"line":1,"column":1,"position":0},"end":{"line":8,"column":2,"position":107},"range":[0,326],"fragment":"import { isFunction, isObject, isString } from './helpers';\n\nexport default async ({ response, responseDataAdaptor }, next) => {\n    if (isFunction(responseDataAdaptor) && response && (isObject(response.data) || isString(response.data))) {\n        response.data = responseDataAdaptor(response.data);\n    }\n    await next();\n};"}},{"format":"javascript","foundDate":1638413755426,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-request/request.js","start":{"line":40,"column":2,"position":356},"end":{"line":71,"column":5,"position":568},"range":[1252,1924],"fragment":"(fn)) {\n      instance.interceptors[type].use(fn);\n    }\n  });\n}\n\nfunction addRequestInterceptors(instance, interceptors) {\n  addInterceptors(instance, interceptors, 'request');\n}\n\nfunction addResponseInterceptors(instance, interceptors) {\n  addInterceptors(instance, interceptors, 'response');\n}\n\nasync function axiosMiddleware(context, next) {\n  try {\n    context.response = await context.instance.request(context.config);\n  } catch (error) {\n    context.error = error;\n  }\n\n  await next();\n}\n\nfunction getRequestInstance() {\n  const {\n    responseDataAdaptor,\n    requestInterceptors = [],\n    responseInterceptors = [],\n    errorHandler,\n    ...otherConfigs\n  } = _fes"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/request.js","start":{"line":23,"column":11,"position":209},"end":{"line":53,"column":7,"position":420},"range":[834,1563],"fragment":"(fn)) {\n            instance.interceptors[type].use(fn);\n        }\n    });\n}\n\nfunction addRequestInterceptors(instance, interceptors) {\n    addInterceptors(instance, interceptors, 'request');\n}\n\nfunction addResponseInterceptors(instance, interceptors) {\n    addInterceptors(instance, interceptors, 'response');\n}\n\nasync function axiosMiddleware(context, next) {\n    try {\n        context.response = await context.instance.request(context.config);\n    } catch (error) {\n        context.error = error;\n    }\n    await next();\n}\n\nfunction getRequestInstance() {\n    const {\n        responseDataAdaptor,\n        requestInterceptors = [],\n        responseInterceptors = [],\n        errorHandler,\n        ...otherConfigs\n    } = plugin"}},{"format":"javascript","foundDate":1638413755429,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-request/request.js","start":{"line":98,"column":8,"position":798},"end":{"line":110,"column":2,"position":881},"range":[2816,3034],"fragment":".compose()\n  };\n} // DEPRECATED 废弃，使用 axios baseURL\n\n\nfunction handleApiPathBase(url, options = {}) {\n  if (url.startsWith('http')) return url;\n\n  if (options.base) {\n    return `${options.base}${url}`;\n  }\n\n  return `"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/request.js","start":{"line":88,"column":10,"position":641},"end":{"line":99,"column":10,"position":722},"range":[2500,2738],"fragment":".compose()\n    };\n}\n\n// DEPRECATED 废弃，使用 axios baseURL\nfunction handleApiPathBase(url, options = {}) {\n    if (url.startsWith('http')) return url;\n\n    if (options.base) {\n        return `${options.base}${url}`;\n    }\n    return `/ras-mas"}},{"format":"javascript","foundDate":1638413755431,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-request/request.js","start":{"line":117,"column":2,"position":962},"end":{"line":181,"column":6,"position":1453},"range":[3254,4669],"fragment":"(options.method)) {\n    options.data = data;\n  } else {\n    options.params = data;\n  }\n\n  return options;\n}\n\nlet currentRequestInstance = null;\n\nfunction createContext(userConfig) {\n  return { ...currentRequestInstance.context,\n    config: { ...currentRequestInstance.context.defaultConfig,\n      ...userConfig\n    }\n  };\n}\n\nfunction getResponseCode(response) {\n  if (response) {\n    if (response._rawData) return response._rawData.code;\n    if (response.data) return response.data.code;\n  }\n\n  return null;\n}\n\nfunction skipErrorHandlerToObj(skipErrorHandler = []) {\n  if (!Array.isArray(skipErrorHandler)) {\n    skipErrorHandler = [skipErrorHandler];\n  }\n\n  return skipErrorHandler.reduce((acc, cur) => {\n    acc[cur] = true;\n    return acc;\n  }, {});\n}\n\nfunction handleRequestError({\n  errorHandler = {},\n  error,\n  response,\n  config\n}) {\n  // 跳过所有错误类型处理\n  if (config.skipErrorHandler === true) return;\n  const skipObj = skipErrorHandlerToObj(config.skipErrorHandler);\n  const resCode = getResponseCode(response);\n  let errorKey = 'default';\n\n  if (resCode && errorHandler[resCode]) {\n    errorKey = resCode;\n  } else if (error.type && errorHandler[error.type]) {\n    errorKey = error.type;\n  } else if (error.response && errorHandler[error.response.status]) {\n    errorKey = error.response.status;\n  }\n\n  if (!skipObj[errorKey] && errorHandler[errorKey]) {\n    return errorHandler[errorKey](error);\n  }\n}\n\nconst"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/request.js","start":{"line":105,"column":24,"position":795},"end":{"line":171,"column":7,"position":1288},"range":[2949,4497],"fragment":"(options.method)) {\n        options.data = data;\n    } else {\n        options.params = data;\n    }\n    return options;\n}\n\nlet currentRequestInstance = null;\n\nfunction createContext(userConfig) {\n    return {\n        ...currentRequestInstance.context,\n        config: {\n            ...currentRequestInstance.context.defaultConfig,\n            ...userConfig\n        }\n    };\n}\n\n\nfunction getResponseCode(response) {\n    if (response) {\n        if (response._rawData) return response._rawData.code;\n        if (response.data) return response.data.code;\n    }\n    return null;\n}\n\nfunction skipErrorHandlerToObj(skipErrorHandler = []) {\n    if (!Array.isArray(skipErrorHandler)) {\n        skipErrorHandler = [skipErrorHandler];\n    }\n\n    return skipErrorHandler.reduce((acc, cur) => {\n        acc[cur] = true;\n        return acc;\n    }, {});\n}\n\nfunction handleRequestError({\n    errorHandler = {},\n    error,\n    response,\n    config\n}) {\n    // 跳过所有错误类型处理\n    if (config.skipErrorHandler === true) return;\n\n    const skipObj = skipErrorHandlerToObj(config.skipErrorHandler);\n    const resCode = getResponseCode(response);\n\n    let errorKey = 'default';\n    if (resCode && errorHandler[resCode]) {\n        errorKey = resCode;\n    } else if (error.type && errorHandler[error.type]) {\n        errorKey = error.type;\n    } else if (error.response && errorHandler[error.response.status]) {\n        errorKey = error.response.status;\n    }\n\n    if (!skipObj[errorKey] && errorHandler[errorKey]) {\n        return errorHandler[errorKey](error);\n    }\n}\n\nexport"}},{"format":"javascript","foundDate":1638413755432,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-request/request.js","start":{"line":181,"column":1,"position":1453},"end":{"line":204,"column":8,"position":1662},"range":[4664,5274],"fragment":"const request = (url, data, options = {}) => {\n  if (typeof options === 'string') {\n    options = {\n      method: options\n    };\n  }\n\n  if (!currentRequestInstance) {\n    currentRequestInstance = getRequestInstance();\n  }\n\n  const userConfig = userConfigHandler(url, data, options);\n  const context = createContext(userConfig);\n  return currentRequestInstance.request(context).then(async () => {\n    if (!context.error) {\n      return context.config.useResonse ? context.response : context.response.data;\n    }\n\n    await handleRequestError(context);\n    return Promise.reject(context.error);\n  });\n};\n\nexports"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/request.js","start":{"line":171,"column":2,"position":1290},"end":{"line":192,"column":9,"position":1497},"range":[4498,5163],"fragment":"const request = (url, data, options = {}) => {\n    if (typeof options === 'string') {\n        options = {\n            method: options\n        };\n    }\n    if (!currentRequestInstance) {\n        currentRequestInstance = getRequestInstance();\n    }\n    const userConfig = userConfigHandler(url, data, options);\n    const context = createContext(userConfig);\n\n    return currentRequestInstance.request(context).then(async () => {\n        if (!context.error) {\n            return context.config.useResonse ? context.response : context.response.data;\n        }\n        await handleRequestError(context);\n        return Promise.reject(context.error);\n    });\n};\n\nfunction"}},{"format":"javascript","foundDate":1638413755437,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-request/preventRepeatReq.js","start":{"line":1,"column":1,"position":0},"end":{"line":64,"column":2,"position":546},"range":[0,1644],"fragment":"const requestMap = new Map();\n\nconst mergeRequestMap = new Map();\nconst requestQueue = new Map();\n\nfunction handleCachingStart(ctx) {\n    const isRequesting = mergeRequestMap.get(ctx.key);\n    if (isRequesting) {\n        return new Promise((resolve) => {\n            const queue = requestQueue.get(ctx.key) || [];\n            requestQueue.set(ctx.key, queue.concat(resolve));\n        });\n    }\n    mergeRequestMap.set(ctx.key, true);\n}\n\nfunction handleRepeatRequest(ctx) {\n    const queue = requestQueue.get(ctx.key);\n    if (queue && queue.length > 0) {\n        queue.forEach((resolve) => {\n            if (ctx.error) {\n                resolve({\n                    error: ctx.error\n                });\n            } else {\n                resolve({\n                    response: ctx.response\n                });\n            }\n        });\n    }\n    requestQueue.delete(ctx.key);\n    mergeRequestMap.delete(ctx.key);\n}\n\nexport default async (ctx, next) => {\n    if (ctx.config.mergeRequest) {\n        const result = await handleCachingStart(ctx);\n        if (result) {\n            Object.keys(result).forEach((key) => {\n                ctx[key] = result[key];\n            });\n            return;\n        }\n    } else {\n        if (requestMap.get(ctx.key) && !ctx.config.mergeRequest) {\n            ctx.error = {\n                type: 'REPEAT',\n                msg: '重复请求',\n                config: ctx.config\n            };\n            return;\n        }\n        requestMap.set(ctx.key, true);\n    }\n\n    await next();\n\n    if (ctx.config.mergeRequest) {\n        handleRepeatRequest(ctx);\n    } else {\n        requestMap.delete(ctx.key);\n    }\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/preventRepeatReq.js","start":{"line":1,"column":1,"position":0},"end":{"line":64,"column":2,"position":546},"range":[0,1644],"fragment":"const requestMap = new Map();\n\nconst mergeRequestMap = new Map();\nconst requestQueue = new Map();\n\nfunction handleCachingStart(ctx) {\n    const isRequesting = mergeRequestMap.get(ctx.key);\n    if (isRequesting) {\n        return new Promise((resolve) => {\n            const queue = requestQueue.get(ctx.key) || [];\n            requestQueue.set(ctx.key, queue.concat(resolve));\n        });\n    }\n    mergeRequestMap.set(ctx.key, true);\n}\n\nfunction handleRepeatRequest(ctx) {\n    const queue = requestQueue.get(ctx.key);\n    if (queue && queue.length > 0) {\n        queue.forEach((resolve) => {\n            if (ctx.error) {\n                resolve({\n                    error: ctx.error\n                });\n            } else {\n                resolve({\n                    response: ctx.response\n                });\n            }\n        });\n    }\n    requestQueue.delete(ctx.key);\n    mergeRequestMap.delete(ctx.key);\n}\n\nexport default async (ctx, next) => {\n    if (ctx.config.mergeRequest) {\n        const result = await handleCachingStart(ctx);\n        if (result) {\n            Object.keys(result).forEach((key) => {\n                ctx[key] = result[key];\n            });\n            return;\n        }\n    } else {\n        if (requestMap.get(ctx.key) && !ctx.config.mergeRequest) {\n            ctx.error = {\n                type: 'REPEAT',\n                msg: '重复请求',\n                config: ctx.config\n            };\n            return;\n        }\n        requestMap.set(ctx.key, true);\n    }\n\n    await next();\n\n    if (ctx.config.mergeRequest) {\n        handleRepeatRequest(ctx);\n    } else {\n        requestMap.delete(ctx.key);\n    }\n};"}},{"format":"javascript","foundDate":1638413755439,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-request/paramsProcess.js","start":{"line":1,"column":1,"position":0},"end":{"line":11,"column":2,"position":97},"range":[0,283],"fragment":"import { checkHttpRequestHasBody, trimObj } from './helpers';\n\nexport default async (ctx, next) => {\n    const config = ctx.config;\n    if (checkHttpRequestHasBody(config.method)) {\n        trimObj(config.data);\n    } else {\n        trimObj(config.params);\n    }\n    await next();\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/paramsProcess.js","start":{"line":1,"column":1,"position":0},"end":{"line":11,"column":2,"position":97},"range":[0,283],"fragment":"import { checkHttpRequestHasBody, trimObj } from './helpers';\n\nexport default async (ctx, next) => {\n    const config = ctx.config;\n    if (checkHttpRequestHasBody(config.method)) {\n        trimObj(config.data);\n    } else {\n        trimObj(config.params);\n    }\n    await next();\n};"}},{"format":"javascript","foundDate":1638413755442,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-request/helpers.js","start":{"line":5,"column":1,"position":2},"end":{"line":90,"column":2,"position":596},"range":[41,2028],"fragment":"export function typeOf(obj) {\n    const map = {\n        '[object Boolean]': 'boolean',\n        '[object Number]': 'number',\n        '[object String]': 'string',\n        '[object Function]': 'function',\n        '[object Array]': 'array',\n        '[object Date]': 'date',\n        '[object RegExp]': 'regExp',\n        '[object Undefined]': 'undefined',\n        '[object Null]': 'null',\n        '[object Object]': 'object',\n        '[object URLSearchParams]': 'URLSearchParams'\n    };\n    return map[Object.prototype.toString.call(obj)];\n}\n\nexport function isFunction(obj) {\n    return typeOf(obj) === 'function';\n}\n\nexport function isDate(obj) {\n    return typeOf(obj) === 'date';\n}\n\nexport function isString(obj) {\n    return typeOf(obj) === 'string';\n}\n\nexport function isArray(obj) {\n    return typeOf(obj) === 'array';\n}\n\nexport function isObject(obj) {\n    return typeOf(obj) === 'object';\n}\n\nexport function isURLSearchParams(obj) {\n    return typeOf(obj) === 'URLSearchParams';\n}\n\n// eslint-disable-next-line\nexport const isUndefined = val => val === undefined;\n\nexport const isDefined = val => val != null;\n\n\nexport function checkHttpRequestHasBody(method) {\n    method = method.toUpperCase();\n    const HTTP_METHOD = {\n        GET: {\n            request_body: false\n        },\n        POST: {\n            request_body: true\n        },\n        PUT: {\n            request_body: true\n        },\n        DELETE: {\n            request_body: true\n        },\n        HEAD: {\n            request_body: false\n        },\n        OPTIONS: {\n            request_body: false\n        },\n        PATCH: {\n            request_body: true\n        }\n    };\n    return HTTP_METHOD[method].request_body;\n}\n\nexport function trimObj(obj) {\n    if (isObject(obj)) {\n        Object.entries(obj).forEach(([key, value]) => {\n            if (isString(value)) {\n                obj[key] = value.trim();\n            } else if (isObject(value)) {\n                trimObj(value);\n            }\n        });\n    }\n}"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/helpers.js","start":{"line":5,"column":1,"position":2},"end":{"line":90,"column":2,"position":596},"range":[41,2028],"fragment":"export function typeOf(obj) {\n    const map = {\n        '[object Boolean]': 'boolean',\n        '[object Number]': 'number',\n        '[object String]': 'string',\n        '[object Function]': 'function',\n        '[object Array]': 'array',\n        '[object Date]': 'date',\n        '[object RegExp]': 'regExp',\n        '[object Undefined]': 'undefined',\n        '[object Null]': 'null',\n        '[object Object]': 'object',\n        '[object URLSearchParams]': 'URLSearchParams'\n    };\n    return map[Object.prototype.toString.call(obj)];\n}\n\nexport function isFunction(obj) {\n    return typeOf(obj) === 'function';\n}\n\nexport function isDate(obj) {\n    return typeOf(obj) === 'date';\n}\n\nexport function isString(obj) {\n    return typeOf(obj) === 'string';\n}\n\nexport function isArray(obj) {\n    return typeOf(obj) === 'array';\n}\n\nexport function isObject(obj) {\n    return typeOf(obj) === 'object';\n}\n\nexport function isURLSearchParams(obj) {\n    return typeOf(obj) === 'URLSearchParams';\n}\n\n// eslint-disable-next-line\nexport const isUndefined = val => val === undefined;\n\nexport const isDefined = val => val != null;\n\n\nexport function checkHttpRequestHasBody(method) {\n    method = method.toUpperCase();\n    const HTTP_METHOD = {\n        GET: {\n            request_body: false\n        },\n        POST: {\n            request_body: true\n        },\n        PUT: {\n            request_body: true\n        },\n        DELETE: {\n            request_body: true\n        },\n        HEAD: {\n            request_body: false\n        },\n        OPTIONS: {\n            request_body: false\n        },\n        PATCH: {\n            request_body: true\n        }\n    };\n    return HTTP_METHOD[method].request_body;\n}\n\nexport function trimObj(obj) {\n    if (isObject(obj)) {\n        Object.entries(obj).forEach(([key, value]) => {\n            if (isString(value)) {\n                obj[key] = value.trim();\n            } else if (isObject(value)) {\n                trimObj(value);\n            }\n        });\n    }\n}"}},{"format":"javascript","foundDate":1638413755450,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-request/cacheControl.js","start":{"line":1,"column":1,"position":0},"end":{"line":209,"column":2,"position":1521},"range":[0,5546],"fragment":"import {\n    isObject, isString, isURLSearchParams, checkHttpRequestHasBody\n} from './helpers';\n/**\n * 缓存实现的功能\n * 1. 唯一定位一个请求（url, data | params, method）\n *      其中请求参数根据请求方法使用其中一个就够了\n *      一个请求同时包含 data | params 参数的设计本身不合理\n *      不对这种情况进行兼容\n * 2. 控制缓存内容的大小，localStorage 只有5M\n * 3. 控制缓存时间\n *      session(存在内存中)\n *      expireTime 存在localStoreage 中\n * 4. 成功的、且响应内容为json的请求进行缓存\n */\n\n/**\n * 配置数据\n * type: 'ram' | 'sessionStorage' | 'localStorage'\n * cacheTime: ''\n */\n\n\n/**\n * 缓存数据结构\n * cache: {\n *      url: 'url', // 缓存 url\n *      data: data, // 数据\n *      expire: '' // 缓存时间\n * }\n */\n\n/**\n * 请求参数可以为如下类型\n * - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n * - Browser only: FormData, File, Blob\n * 只缓存参数类型为: string、plain object、URLSearchParams 或者无参数的 请求\n */\n\nconst CACHE_KEY_PREFIX = '__FES_REQUEST_CACHE:';\nconst CACHE_TYPE = {\n    ram: 'ram',\n    session: 'sessionStorage',\n    local: 'localStorage'\n};\n\nconst CACHE_DATA_MAP = new Map();\n\nfunction genInnerKey(key, cacheType = 'ram') {\n    if (cacheType !== CACHE_TYPE.ram) {\n        return `${CACHE_KEY_PREFIX}${key}`;\n    }\n    return key;\n}\n\nfunction canCache(data) {\n    return !data || isObject(data) || isString(data) || Array.isArray(data) || isURLSearchParams(data);\n}\n\nfunction setCacheData({\n    key,\n    cacheType = 'ram',\n    data,\n    cacheTime = 1000 * 60 * 3\n}) {\n    const _key = genInnerKey(key, cacheType);\n\n    const currentCacheData = {\n        cacheType,\n        data,\n        cacheTime,\n        expire: Date.now() + cacheTime\n    };\n    if (cacheType !== CACHE_TYPE.ram) {\n        const cacheInstance = window[CACHE_TYPE[cacheType]];\n        try {\n            cacheInstance.setItem(_key, JSON.stringify(currentCacheData));\n        } catch (e) {\n            // setItem 出现异常，清理缓存\n            for (const item in cacheInstance) {\n                if (item.startsWith(CACHE_KEY_PREFIX) && Object.prototype.hasOwnProperty.call(cacheInstance, item)) {\n                    cacheInstance.removeItem(item);\n                }\n            }\n        }\n    } else {\n        CACHE_DATA_MAP.set(_key, currentCacheData);\n    }\n}\n\nfunction isExpire({ expire, cacheTime }) {\n    if (!cacheTime || expire >= Date.now()) {\n        return false;\n    }\n    return true;\n}\n\nfunction getCacheData({ key, cacheType = 'ram' }) {\n    const _key = genInnerKey(key, cacheType);\n    if (cacheType !== CACHE_TYPE.ram) {\n        const cacheInstance = window[CACHE_TYPE[cacheType]];\n        const text = cacheInstance.getItem(_key) || null;\n        try {\n            const currentCacheData = JSON.parse(text);\n            if (currentCacheData && !isExpire(currentCacheData)) {\n                return currentCacheData.data;\n            }\n            cacheInstance.removeItem(_key);\n            return null;\n        } catch (e) {\n            cacheInstance.removeItem(_key);\n            return null;\n        }\n    } else {\n        const currentCacheData = CACHE_DATA_MAP.get(_key);\n        if (currentCacheData && !isExpire(currentCacheData)) {\n            return currentCacheData.data;\n        }\n        CACHE_DATA_MAP.delete(_key);\n        return null;\n    }\n}\n\n// 存储缓存队列\nconst cacheStartFlag = new Map();\nconst cachingQueue = new Map();\n\n/**\n * 等上一次请求结果\n * 1. 如果上一次请求成功，直接使用上一次的请求结果\n * 2. 如果上一次请求失败，重启本次请求\n */\nfunction handleCachingStart(ctx, config) {\n    const _key = genInnerKey(ctx.key, config.cache.cacheType);\n    const caching = cacheStartFlag.get(_key);\n    if (caching) {\n        return new Promise((resolve) => {\n            const queue = cachingQueue.get(_key) || [];\n            cachingQueue.set(_key, queue.concat(resolve));\n        });\n    }\n    cacheStartFlag.set(_key, true);\n}\n\n// 有请求成功的\nfunction handleCachingQueueSuccess(ctx, config) {\n    // 移除首次缓存 flag\n    const _key = genInnerKey(ctx.key, config.cache.cacheType);\n    const queue = cachingQueue.get(_key);\n    if (queue && queue.length > 0) {\n        queue.forEach((resolve) => {\n            resolve({\n                response: ctx.response\n            });\n        });\n    }\n    cachingQueue.delete(_key);\n    cacheStartFlag.delete(_key);\n}\n\n// 处理请求失败\nfunction handleCachingQueueError(ctx, config) {\n    const _key = genInnerKey(ctx.key, config.cache.cacheType);\n    const queue = cachingQueue.get(_key);\n    if (queue && queue.length > 0) {\n        const firstResolve = queue.shift();\n        firstResolve();\n        cachingQueue.set(_key, queue);\n    } else {\n        cachingQueue.delete(_key);\n        cacheStartFlag.delete(_key);\n    }\n}\n\nexport default async (ctx, next) => {\n    const { config } = ctx;\n    if (config.cache) {\n        const cacheData = getCacheData({ key: ctx.key, cacheType: config.cache.cacheType });\n        if (cacheData) {\n            ctx.response = {\n                data: cacheData\n            };\n            return;\n        }\n        const result = await handleCachingStart(ctx, config);\n        if (result) {\n            Object.keys(result).forEach((key) => {\n                ctx[key] = result[key];\n            });\n            return;\n        }\n    }\n    await next();\n\n    if (config.cache) {\n        const requestdata = checkHttpRequestHasBody(config.method) ? config.data : config.params;\n        if (!ctx.error && ctx.response && canCache(requestdata) && canCache(ctx.response.data)) {\n            handleCachingQueueSuccess(ctx, config);\n\n            setCacheData({\n                key: ctx.key,\n                data: ctx.response.data,\n                ...config.cache\n            });\n        } else {\n            handleCachingQueueError(ctx, config);\n        }\n    }\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/cacheControl.js","start":{"line":1,"column":1,"position":0},"end":{"line":209,"column":2,"position":1521},"range":[0,5546],"fragment":"import {\n    isObject, isString, isURLSearchParams, checkHttpRequestHasBody\n} from './helpers';\n/**\n * 缓存实现的功能\n * 1. 唯一定位一个请求（url, data | params, method）\n *      其中请求参数根据请求方法使用其中一个就够了\n *      一个请求同时包含 data | params 参数的设计本身不合理\n *      不对这种情况进行兼容\n * 2. 控制缓存内容的大小，localStorage 只有5M\n * 3. 控制缓存时间\n *      session(存在内存中)\n *      expireTime 存在localStoreage 中\n * 4. 成功的、且响应内容为json的请求进行缓存\n */\n\n/**\n * 配置数据\n * type: 'ram' | 'sessionStorage' | 'localStorage'\n * cacheTime: ''\n */\n\n\n/**\n * 缓存数据结构\n * cache: {\n *      url: 'url', // 缓存 url\n *      data: data, // 数据\n *      expire: '' // 缓存时间\n * }\n */\n\n/**\n * 请求参数可以为如下类型\n * - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n * - Browser only: FormData, File, Blob\n * 只缓存参数类型为: string、plain object、URLSearchParams 或者无参数的 请求\n */\n\nconst CACHE_KEY_PREFIX = '__FES_REQUEST_CACHE:';\nconst CACHE_TYPE = {\n    ram: 'ram',\n    session: 'sessionStorage',\n    local: 'localStorage'\n};\n\nconst CACHE_DATA_MAP = new Map();\n\nfunction genInnerKey(key, cacheType = 'ram') {\n    if (cacheType !== CACHE_TYPE.ram) {\n        return `${CACHE_KEY_PREFIX}${key}`;\n    }\n    return key;\n}\n\nfunction canCache(data) {\n    return !data || isObject(data) || isString(data) || Array.isArray(data) || isURLSearchParams(data);\n}\n\nfunction setCacheData({\n    key,\n    cacheType = 'ram',\n    data,\n    cacheTime = 1000 * 60 * 3\n}) {\n    const _key = genInnerKey(key, cacheType);\n\n    const currentCacheData = {\n        cacheType,\n        data,\n        cacheTime,\n        expire: Date.now() + cacheTime\n    };\n    if (cacheType !== CACHE_TYPE.ram) {\n        const cacheInstance = window[CACHE_TYPE[cacheType]];\n        try {\n            cacheInstance.setItem(_key, JSON.stringify(currentCacheData));\n        } catch (e) {\n            // setItem 出现异常，清理缓存\n            for (const item in cacheInstance) {\n                if (item.startsWith(CACHE_KEY_PREFIX) && Object.prototype.hasOwnProperty.call(cacheInstance, item)) {\n                    cacheInstance.removeItem(item);\n                }\n            }\n        }\n    } else {\n        CACHE_DATA_MAP.set(_key, currentCacheData);\n    }\n}\n\nfunction isExpire({ expire, cacheTime }) {\n    if (!cacheTime || expire >= Date.now()) {\n        return false;\n    }\n    return true;\n}\n\nfunction getCacheData({ key, cacheType = 'ram' }) {\n    const _key = genInnerKey(key, cacheType);\n    if (cacheType !== CACHE_TYPE.ram) {\n        const cacheInstance = window[CACHE_TYPE[cacheType]];\n        const text = cacheInstance.getItem(_key) || null;\n        try {\n            const currentCacheData = JSON.parse(text);\n            if (currentCacheData && !isExpire(currentCacheData)) {\n                return currentCacheData.data;\n            }\n            cacheInstance.removeItem(_key);\n            return null;\n        } catch (e) {\n            cacheInstance.removeItem(_key);\n            return null;\n        }\n    } else {\n        const currentCacheData = CACHE_DATA_MAP.get(_key);\n        if (currentCacheData && !isExpire(currentCacheData)) {\n            return currentCacheData.data;\n        }\n        CACHE_DATA_MAP.delete(_key);\n        return null;\n    }\n}\n\n// 存储缓存队列\nconst cacheStartFlag = new Map();\nconst cachingQueue = new Map();\n\n/**\n * 等上一次请求结果\n * 1. 如果上一次请求成功，直接使用上一次的请求结果\n * 2. 如果上一次请求失败，重启本次请求\n */\nfunction handleCachingStart(ctx, config) {\n    const _key = genInnerKey(ctx.key, config.cache.cacheType);\n    const caching = cacheStartFlag.get(_key);\n    if (caching) {\n        return new Promise((resolve) => {\n            const queue = cachingQueue.get(_key) || [];\n            cachingQueue.set(_key, queue.concat(resolve));\n        });\n    }\n    cacheStartFlag.set(_key, true);\n}\n\n// 有请求成功的\nfunction handleCachingQueueSuccess(ctx, config) {\n    // 移除首次缓存 flag\n    const _key = genInnerKey(ctx.key, config.cache.cacheType);\n    const queue = cachingQueue.get(_key);\n    if (queue && queue.length > 0) {\n        queue.forEach((resolve) => {\n            resolve({\n                response: ctx.response\n            });\n        });\n    }\n    cachingQueue.delete(_key);\n    cacheStartFlag.delete(_key);\n}\n\n// 处理请求失败\nfunction handleCachingQueueError(ctx, config) {\n    const _key = genInnerKey(ctx.key, config.cache.cacheType);\n    const queue = cachingQueue.get(_key);\n    if (queue && queue.length > 0) {\n        const firstResolve = queue.shift();\n        firstResolve();\n        cachingQueue.set(_key, queue);\n    } else {\n        cachingQueue.delete(_key);\n        cacheStartFlag.delete(_key);\n    }\n}\n\nexport default async (ctx, next) => {\n    const { config } = ctx;\n    if (config.cache) {\n        const cacheData = getCacheData({ key: ctx.key, cacheType: config.cache.cacheType });\n        if (cacheData) {\n            ctx.response = {\n                data: cacheData\n            };\n            return;\n        }\n        const result = await handleCachingStart(ctx, config);\n        if (result) {\n            Object.keys(result).forEach((key) => {\n                ctx[key] = result[key];\n            });\n            return;\n        }\n    }\n    await next();\n\n    if (config.cache) {\n        const requestdata = checkHttpRequestHasBody(config.method) ? config.data : config.params;\n        if (!ctx.error && ctx.response && canCache(requestdata) && canCache(ctx.response.data)) {\n            handleCachingQueueSuccess(ctx, config);\n\n            setCacheData({\n                key: ctx.key,\n                data: ctx.response.data,\n                ...config.cache\n            });\n        } else {\n            handleCachingQueueError(ctx, config);\n        }\n    }\n};"}},{"format":"javascript","foundDate":1638413755665,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-monaco-editor/src/runtime/theme/default.js","start":{"line":2,"column":1,"position":2},"end":{"line":111,"column":2,"position":578},"range":[29,3519],"fragment":"export default {\n    register(monaco) {\n        monaco.editor.defineTheme('defaultTheme', {\n            base: 'vs',\n            inherit: true,\n            rules: [\n                {\n                    foreground: 'c41a16',\n                    token: 'string'\n                },\n                {\n                    foreground: '1c00cf',\n                    token: 'constant.numeric'\n                },\n                {\n                    foreground: 'aa0d91',\n                    token: 'keyword'\n                },\n                {\n                    foreground: '000000',\n                    token: 'keyword.operator'\n                },\n                {\n                    foreground: 'aa0d91',\n                    token: 'constant.language'\n                },\n                {\n                    foreground: '990000',\n                    token: 'support.class.exception'\n                },\n                {\n                    foreground: '000000',\n                    token: 'entity.name.function'\n                },\n                {\n                    fontStyle: 'bold underline',\n                    token: 'entity.name.type'\n                },\n                {\n                    fontStyle: 'italic',\n                    token: 'variable.parameter'\n                },\n                {\n                    foreground: '007400',\n                    token: 'comment'\n                },\n                {\n                    foreground: 'ff0000',\n                    token: 'invalid'\n                },\n                {\n                    background: 'e71a1100',\n                    token: 'invalid.deprecated.trailing-whitespace'\n                },\n                {\n                    foreground: '000000',\n                    background: 'fafafafc',\n                    token: 'text source'\n                },\n                {\n                    foreground: 'aa0d91',\n                    token: 'meta.tag'\n                },\n                {\n                    foreground: 'aa0d91',\n                    token: 'declaration.tag'\n                },\n                {\n                    foreground: '000000',\n                    fontStyle: 'bold',\n                    token: 'support'\n                },\n                {\n                    foreground: 'aa0d91',\n                    token: 'storage'\n                },\n                {\n                    fontStyle: 'bold underline',\n                    token: 'entity.name.section'\n                },\n                {\n                    foreground: '000000',\n                    fontStyle: 'bold',\n                    token: 'entity.name.function.frame'\n                },\n                {\n                    foreground: '333333',\n                    token: 'meta.tag.preprocessor.xml'\n                },\n                {\n                    foreground: '994500',\n                    fontStyle: 'italic',\n                    token: 'entity.other.attribute-name'\n                },\n                {\n                    foreground: '881280',\n                    token: 'entity.name.tag'\n                }\n            ],\n            colors: {\n                'editor.foreground': '#000000',\n                'editor.background': '#FFFFFF',\n                'editor.selectionBackground': '#BAD6FD',\n                'editor.lineHighlightBackground': '#0000001A',\n                'editorCursor.foreground': '#000000',\n                'editorWhitespace.foreground': '#B3B3B3F4'\n            }\n        });\n    }\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-monaco-editor/theme/default.js","start":{"line":2,"column":1,"position":2},"end":{"line":111,"column":2,"position":578},"range":[29,3519],"fragment":"export default {\n    register(monaco) {\n        monaco.editor.defineTheme('defaultTheme', {\n            base: 'vs',\n            inherit: true,\n            rules: [\n                {\n                    foreground: 'c41a16',\n                    token: 'string'\n                },\n                {\n                    foreground: '1c00cf',\n                    token: 'constant.numeric'\n                },\n                {\n                    foreground: 'aa0d91',\n                    token: 'keyword'\n                },\n                {\n                    foreground: '000000',\n                    token: 'keyword.operator'\n                },\n                {\n                    foreground: 'aa0d91',\n                    token: 'constant.language'\n                },\n                {\n                    foreground: '990000',\n                    token: 'support.class.exception'\n                },\n                {\n                    foreground: '000000',\n                    token: 'entity.name.function'\n                },\n                {\n                    fontStyle: 'bold underline',\n                    token: 'entity.name.type'\n                },\n                {\n                    fontStyle: 'italic',\n                    token: 'variable.parameter'\n                },\n                {\n                    foreground: '007400',\n                    token: 'comment'\n                },\n                {\n                    foreground: 'ff0000',\n                    token: 'invalid'\n                },\n                {\n                    background: 'e71a1100',\n                    token: 'invalid.deprecated.trailing-whitespace'\n                },\n                {\n                    foreground: '000000',\n                    background: 'fafafafc',\n                    token: 'text source'\n                },\n                {\n                    foreground: 'aa0d91',\n                    token: 'meta.tag'\n                },\n                {\n                    foreground: 'aa0d91',\n                    token: 'declaration.tag'\n                },\n                {\n                    foreground: '000000',\n                    fontStyle: 'bold',\n                    token: 'support'\n                },\n                {\n                    foreground: 'aa0d91',\n                    token: 'storage'\n                },\n                {\n                    fontStyle: 'bold underline',\n                    token: 'entity.name.section'\n                },\n                {\n                    foreground: '000000',\n                    fontStyle: 'bold',\n                    token: 'entity.name.function.frame'\n                },\n                {\n                    foreground: '333333',\n                    token: 'meta.tag.preprocessor.xml'\n                },\n                {\n                    foreground: '994500',\n                    fontStyle: 'italic',\n                    token: 'entity.other.attribute-name'\n                },\n                {\n                    foreground: '881280',\n                    token: 'entity.name.tag'\n                }\n            ],\n            colors: {\n                'editor.foreground': '#000000',\n                'editor.background': '#FFFFFF',\n                'editor.selectionBackground': '#BAD6FD',\n                'editor.lineHighlightBackground': '#0000001A',\n                'editorCursor.foreground': '#000000',\n                'editorWhitespace.foreground': '#B3B3B3F4'\n            }\n        });\n    }\n};"}},{"format":"markup","foundDate":1638413755668,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-locale/src/runtime/views/SelectLang.vue","start":{"line":1,"column":1,"position":0},"end":{"line":74,"column":2,"position":446},"range":[0,2018],"fragment":"<template>\n    <a-dropdown>\n        <div class=\"lang-icon\"><GlobalOutlined /></div>\n        <template #overlay>\n            <a-menu :selectedKeys=\"selectedKeys\" @click=\"handleClick\">\n                <a-menu-item\n                    v-for=\"item in configs\"\n                    :key=\"item.lang\"\n                    class=\"lang-item\"\n                >\n                    <span class=\"lang-item-icon\">{{item.icon}}</span>\n                    <span class=\"lang-item-label\">{{item.label}}</span>\n                </a-menu-item>\n            </a-menu>\n        </template>\n    </a-dropdown>\n</template>\n\n<script>\nimport Dropdown from 'ant-design-vue/lib/dropdown';\nimport Menu from 'ant-design-vue/lib/menu';\nimport 'ant-design-vue/lib/dropdown/style/css';\nimport 'ant-design-vue/lib/menu/style/css';\nimport { GlobalOutlined } from '@ant-design/icons-vue';\nimport { useI18n } from 'vue-i18n';\nimport { computed } from 'vue';\nimport langUConfigMap from '../langUConfigMap';\n\nexport default {\n    components: {\n        [Dropdown.name]: Dropdown,\n        [Menu.name]: Menu,\n        [Menu.Item.name]: Menu.Item,\n        GlobalOutlined\n    },\n    setup() {\n        const { messages, locale } = useI18n();\n        const selectedKeys = computed(() => [locale.value]);\n        const configs = computed(() => {\n            const arr = [];\n            Object.keys(messages.value)\n                .sort()\n                .forEach((item) => {\n                    arr.push(langUConfigMap[item] || {});\n                });\n            return arr;\n        });\n        const handleClick = ({ key }) => {\n            locale.value = key;\n            window.localStorage.setItem('fes_locale', key);\n        };\n        return {\n            handleClick,\n            selectedKeys,\n            configs\n        };\n    }\n};\n</script>\n\n<style lang=\"less\">\n.lang-icon {\n    margin: 0 8px;\n    padding: 0 4px;\n    cursor: pointer;\n}\n.lang-item {\n    display: flex;\n    align-items: center;\n    .lang-item-label {\n        margin-left: 8px;\n    }\n}\n</style>"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-locale/views/SelectLang.vue","start":{"line":1,"column":1,"position":0},"end":{"line":74,"column":2,"position":446},"range":[0,2018],"fragment":"<template>\n    <a-dropdown>\n        <div class=\"lang-icon\"><GlobalOutlined /></div>\n        <template #overlay>\n            <a-menu :selectedKeys=\"selectedKeys\" @click=\"handleClick\">\n                <a-menu-item\n                    v-for=\"item in configs\"\n                    :key=\"item.lang\"\n                    class=\"lang-item\"\n                >\n                    <span class=\"lang-item-icon\">{{item.icon}}</span>\n                    <span class=\"lang-item-label\">{{item.label}}</span>\n                </a-menu-item>\n            </a-menu>\n        </template>\n    </a-dropdown>\n</template>\n\n<script>\nimport Dropdown from 'ant-design-vue/lib/dropdown';\nimport Menu from 'ant-design-vue/lib/menu';\nimport 'ant-design-vue/lib/dropdown/style/css';\nimport 'ant-design-vue/lib/menu/style/css';\nimport { GlobalOutlined } from '@ant-design/icons-vue';\nimport { useI18n } from 'vue-i18n';\nimport { computed } from 'vue';\nimport langUConfigMap from '../langUConfigMap';\n\nexport default {\n    components: {\n        [Dropdown.name]: Dropdown,\n        [Menu.name]: Menu,\n        [Menu.Item.name]: Menu.Item,\n        GlobalOutlined\n    },\n    setup() {\n        const { messages, locale } = useI18n();\n        const selectedKeys = computed(() => [locale.value]);\n        const configs = computed(() => {\n            const arr = [];\n            Object.keys(messages.value)\n                .sort()\n                .forEach((item) => {\n                    arr.push(langUConfigMap[item] || {});\n                });\n            return arr;\n        });\n        const handleClick = ({ key }) => {\n            locale.value = key;\n            window.localStorage.setItem('fes_locale', key);\n        };\n        return {\n            handleClick,\n            selectedKeys,\n            configs\n        };\n    }\n};\n</script>\n\n<style lang=\"less\">\n.lang-icon {\n    margin: 0 8px;\n    padding: 0 4px;\n    cursor: pointer;\n}\n.lang-item {\n    display: flex;\n    align-items: center;\n    .lang-item-label {\n        margin-left: 8px;\n    }\n}\n</style>"}},{"format":"markup","foundDate":1638413755674,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-layout/src/runtime/views/MultiTabProvider.vue","start":{"line":17,"column":17,"position":77},"end":{"line":50,"column":10,"position":306},"range":[417,1567],"fragment":"<ReloadOutlined\n                    v-show=\"route.path === page.path\"\n                    class=\"layout-tabs-close-icon\"\n                    @click=\"reloadPage(page.path)\"\n                />\n            </template>\n        </a-tab-pane>\n        <template #tabBarExtraContent>\n            <a-dropdown>\n                <div class=\"layout-tabs-more-icon\">\n                    <MoreOutlined />\n                </div>\n                <template #overlay>\n                    <a-menu @click=\"handlerMore\">\n                        <a-menu-item key=\"closeOtherPage\">\n                            <a href=\"javascript:;\">关闭其他</a>\n                        </a-menu-item>\n                        <a-menu-item key=\"reloadPage\">\n                            <a href=\"javascript:;\">刷新当前页</a>\n                        </a-menu-item>\n                    </a-menu>\n                </template>\n            </a-dropdown>\n        </template>\n    </a-tabs>\n    <router-view v-slot=\"{ Component, route }\">\n        <keep-alive>\n            <component :is=\"Component\" :key=\"getPageKey(route)\" />\n        </keep-alive>\n    </router-view>\n</template>\n<script>\nimport {\n    computed,"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-layout/views/MultiTabProvider.vue","start":{"line":13,"column":17,"position":76},"end":{"line":45,"column":10,"position":304},"range":[371,1517],"fragment":"<ReloadOutlined\n                    v-show=\"route.path === page.path\"\n                    class=\"layout-tabs-close-icon\"\n                    @click=\"reloadPage(page.path)\"\n                />\n            </template>\n        </a-tab-pane>\n        <template #tabBarExtraContent>\n            <a-dropdown>\n                <div class=\"layout-tabs-more-icon\">\n                    <MoreOutlined />\n                </div>\n                <template #overlay>\n                    <a-menu @click=\"handlerMore\">\n                        <a-menu-item key=\"closeOtherPage\">\n                            <a href=\"javascript:;\">关闭其他</a>\n                        </a-menu-item>\n                        <a-menu-item key=\"reloadPage\">\n                            <a href=\"javascript:;\">刷新当前页</a>\n                        </a-menu-item>\n                    </a-menu>\n                </template>\n            </a-dropdown>\n        </template>\n    </a-tabs>\n    <router-view v-slot=\"{ Component, route }\">\n        <keep-alive>\n            <component :is=\"Component\" :key=\"getPageKey(route)\" />\n        </keep-alive>\n    </router-view>\n</template>\n<script>\nimport { reactive,"}},{"format":"markup","foundDate":1638413755679,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-layout/src/runtime/views/MultiTabProvider.vue","start":{"line":131,"column":9,"position":842},"end":{"line":190,"column":2,"position":1145},"range":[4263,5654],"fragment":"};\n        const getPageKey = (_route) => {\n            const selectedPage = findPage(_route.path);\n            if (selectedPage) {\n                return selectedPage.key;\n            }\n            return '';\n        };\n        const handlerMore = ({ key }) => {\n            switch (key) {\n                case 'closeOtherPage':\n                    closeOtherPage();\n                    break;\n                case 'reloadPage':\n                    reloadPage();\n                    break;\n                default:\n            }\n        };\n        return {\n            route,\n            pageList,\n            getPageKey,\n            reloadPage,\n            switchPage,\n            handlerMore,\n            onEdit\n        };\n    }\n};\n</script>\n<style lang=\"less\">\n.layout-content-tabs {\n    background: rgb(255, 255, 255);\n    margin: 0px;\n    padding-top: 6px;\n    width: 100%;\n    .ant-tabs-nav-container {\n        padding-left: 16px;\n    }\n    .layout-tabs-close-icon {\n        vertical-align: middle;\n        color: rgba(0, 0, 0, 0.45);\n        font-size: 12px;\n        margin-left: 6px;\n        margin-top: -2px;\n        &:hover {\n            color: rgba(0, 0, 0, 0.8);\n        }\n    }\n    .layout-tabs-more-icon {\n        margin-right: 8px;\n        padding: 0 4px;\n        color: rgba(0, 0, 0, 0.45);\n        &:hover {\n            color: rgba(0, 0, 0, 0.8);\n        }\n    }\n}\n</style>"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-layout/views/MultiTabProvider.vue","start":{"line":121,"column":9,"position":787},"end":{"line":180,"column":2,"position":1090},"range":[4088,5479],"fragment":"};\n        const getPageKey = (_route) => {\n            const selectedPage = findPage(_route.path);\n            if (selectedPage) {\n                return selectedPage.key;\n            }\n            return '';\n        };\n        const handlerMore = ({ key }) => {\n            switch (key) {\n                case 'closeOtherPage':\n                    closeOtherPage();\n                    break;\n                case 'reloadPage':\n                    reloadPage();\n                    break;\n                default:\n            }\n        };\n        return {\n            route,\n            pageList,\n            getPageKey,\n            reloadPage,\n            switchPage,\n            handlerMore,\n            onEdit\n        };\n    }\n};\n</script>\n<style lang=\"less\">\n.layout-content-tabs {\n    background: rgb(255, 255, 255);\n    margin: 0px;\n    padding-top: 6px;\n    width: 100%;\n    .ant-tabs-nav-container {\n        padding-left: 16px;\n    }\n    .layout-tabs-close-icon {\n        vertical-align: middle;\n        color: rgba(0, 0, 0, 0.45);\n        font-size: 12px;\n        margin-left: 6px;\n        margin-top: -2px;\n        &:hover {\n            color: rgba(0, 0, 0, 0.8);\n        }\n    }\n    .layout-tabs-more-icon {\n        margin-right: 8px;\n        padding: 0 4px;\n        color: rgba(0, 0, 0, 0.45);\n        &:hover {\n            color: rgba(0, 0, 0, 0.8);\n        }\n    }\n}\n</style>"}},{"format":"markup","foundDate":1638413755680,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-layout/src/runtime/views/MenuIcon.vue","start":{"line":1,"column":1,"position":0},"end":{"line":61,"column":2,"position":347},"range":[0,1657],"fragment":"<script>\n\nimport { ref, onBeforeMount } from 'vue';\n// eslint-disable-next-line import/extensions\nimport Icons from '../icons';\nimport { validateContent } from '../helpers/svg';\n\nexport default {\n    props: {\n        icon: [String, Object]\n    },\n    setup(props) {\n        const AIcon = ref(null);\n        const AText = ref(null);\n\n        onBeforeMount(() => {\n            if (props.icon && props.icon.type === 'icon') {\n                AIcon.value = Icons[props.icon.name];\n            } else {\n                fetch(props.icon).then((rsp) => {\n                    if (rsp.ok) {\n                        return rsp.text().then((svgContent) => {\n                            AText.value = validateContent(svgContent);\n                        });\n                    }\n                });\n            }\n        });\n\n        return () => {\n            if (AIcon.value) {\n                return <AIcon.value />;\n            }\n            if (AText.value) {\n                return (\n                    <span className={'fes-layout-icon anticon'} innerHTML={AText.value}>\n                    </span>\n                );\n            }\n            return null;\n        };\n    }\n};\n</script>\n<style>\n.fes-layout-icon{\n    display: inline-block;\n    color: inherit;\n    font-style: normal;\n    line-height: 0;\n    text-align: center;\n    text-transform: none;\n    vertical-align: -0.125em;\n    text-rendering: optimizeLegibility;\n    -webkit-font-smoothing: antialiased;\n    min-width: 14px;\n    margin-right: 10px;\n    font-size: 14px;\n    transition: font-size 0.15s cubic-bezier(0.215, 0.61, 0.355, 1), margin 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n}\n</style>"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-layout/views/MenuIcon.vue","start":{"line":1,"column":1,"position":0},"end":{"line":61,"column":2,"position":347},"range":[0,1657],"fragment":"<script>\n\nimport { ref, onBeforeMount } from 'vue';\n// eslint-disable-next-line import/extensions\nimport Icons from '../icons';\nimport { validateContent } from '../helpers/svg';\n\nexport default {\n    props: {\n        icon: [String, Object]\n    },\n    setup(props) {\n        const AIcon = ref(null);\n        const AText = ref(null);\n\n        onBeforeMount(() => {\n            if (props.icon && props.icon.type === 'icon') {\n                AIcon.value = Icons[props.icon.name];\n            } else {\n                fetch(props.icon).then((rsp) => {\n                    if (rsp.ok) {\n                        return rsp.text().then((svgContent) => {\n                            AText.value = validateContent(svgContent);\n                        });\n                    }\n                });\n            }\n        });\n\n        return () => {\n            if (AIcon.value) {\n                return <AIcon.value />;\n            }\n            if (AText.value) {\n                return (\n                    <span className={'fes-layout-icon anticon'} innerHTML={AText.value}>\n                    </span>\n                );\n            }\n            return null;\n        };\n    }\n};\n</script>\n<style>\n.fes-layout-icon{\n    display: inline-block;\n    color: inherit;\n    font-style: normal;\n    line-height: 0;\n    text-align: center;\n    text-transform: none;\n    vertical-align: -0.125em;\n    text-rendering: optimizeLegibility;\n    -webkit-font-smoothing: antialiased;\n    min-width: 14px;\n    margin-right: 10px;\n    font-size: 14px;\n    transition: font-size 0.15s cubic-bezier(0.215, 0.61, 0.355, 1), margin 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n}\n</style>"}},{"format":"markup","foundDate":1638413755682,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-layout/src/runtime/views/Menu.vue","start":{"line":1,"column":1,"position":0},"end":{"line":106,"column":2,"position":667},"range":[0,3634],"fragment":"<template>\n    <a-menu\n        :selectedKeys=\"selectedKeys\"\n        :theme=\"theme\"\n        mode=\"inline\"\n        @click=\"onMenuClick\"\n    >\n        <template v-for=\"(item, index) in fixedMenus\" :key=\"index\">\n            <template v-if=\"item.access\">\n                <a-sub-menu v-if=\"item.children\" :key=\"index\" :title=\"item.title\">\n                    <template v-if=\"item.icon\" #icon>\n                        <MenuIcon :icon=\"item.icon\" />\n                    </template>\n                    <template\n                        v-for=\"(item1, index1) in item.children\"\n                    >\n                        <template v-if=\"item1.access\">\n                            <a-sub-menu\n                                v-if=\"item1.children\"\n                                :key=\"`${index}-${index1}`\"\n                                :title=\"item1.title\"\n                            >\n                                <template\n                                    v-for=\"(item2) in item1.children\"\n                                >\n                                    <a-menu-item\n                                        v-if=\"item2.access\"\n                                        :key=\"item2.path\"\n                                        :title=\"item2.title\"\n                                    >\n                                        {{item2.title}}\n                                    </a-menu-item>\n                                </template>\n                            </a-sub-menu>\n                            <a-menu-item v-else :key=\"item1.path\" :title=\"item1.title\">\n                                {{item1.title}}\n                            </a-menu-item>\n                        </template>\n                    </template>\n                </a-sub-menu>\n                <a-menu-item v-else :key=\"item.path\" :title=\"item.title\">\n                    <MenuIcon v-if=\"item.icon\" :icon=\"item.icon\" />\n                    <span>{{item.title}}</span>\n                </a-menu-item>\n            </template>\n        </template>\n    </a-menu>\n</template>\n\n<script>\nimport { toRefs, computed } from 'vue';\nimport { useRoute, useRouter } from '@@/core/coreExports';\nimport Menu from 'ant-design-vue/lib/menu';\nimport 'ant-design-vue/lib/menu/style/css';\nimport MenuIcon from './MenuIcon';\nimport { transform as transformByAccess } from '../helpers/pluginAccess';\nimport { transform as transformByLocale } from '../helpers/pluginLocale';\n\nexport default {\n    components: {\n        [Menu.name]: Menu,\n        [Menu.SubMenu.name]: Menu.SubMenu,\n        [Menu.Item.name]: Menu.Item,\n        MenuIcon\n    },\n    props: {\n        menus: {\n            type: Array,\n            default() {\n                return [];\n            }\n        },\n        theme: {\n            type: String,\n            default: 'dark'\n        }\n    },\n    setup(props) {\n        const { menus } = toRefs(props);\n        const route = useRoute();\n        const router = useRouter();\n        const fixedMenus = transformByLocale(transformByAccess(menus));\n        const onMenuClick = (e) => {\n            const path = e.key;\n            if (/^https?:\\/\\//.test(path)) {\n                window.open(path, '_blank');\n            } else if (/^\\//.test(path)) {\n                router.push(path);\n            } else {\n                console.warn(\n                    '[plugin-layout]: 菜单的path只能使以http(s)开头的网址或者路由地址'\n                );\n            }\n        };\n        const selectedKeys = computed(() => [route.path]);\n        return {\n            selectedKeys,\n            fixedMenus,\n            onMenuClick\n        };\n    }\n};\n</script>\n\n<style lang=\"less\">\n</style>"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-layout/views/Menu.vue","start":{"line":1,"column":1,"position":0},"end":{"line":106,"column":2,"position":667},"range":[0,3634],"fragment":"<template>\n    <a-menu\n        :selectedKeys=\"selectedKeys\"\n        :theme=\"theme\"\n        mode=\"inline\"\n        @click=\"onMenuClick\"\n    >\n        <template v-for=\"(item, index) in fixedMenus\" :key=\"index\">\n            <template v-if=\"item.access\">\n                <a-sub-menu v-if=\"item.children\" :key=\"index\" :title=\"item.title\">\n                    <template v-if=\"item.icon\" #icon>\n                        <MenuIcon :icon=\"item.icon\" />\n                    </template>\n                    <template\n                        v-for=\"(item1, index1) in item.children\"\n                    >\n                        <template v-if=\"item1.access\">\n                            <a-sub-menu\n                                v-if=\"item1.children\"\n                                :key=\"`${index}-${index1}`\"\n                                :title=\"item1.title\"\n                            >\n                                <template\n                                    v-for=\"(item2) in item1.children\"\n                                >\n                                    <a-menu-item\n                                        v-if=\"item2.access\"\n                                        :key=\"item2.path\"\n                                        :title=\"item2.title\"\n                                    >\n                                        {{item2.title}}\n                                    </a-menu-item>\n                                </template>\n                            </a-sub-menu>\n                            <a-menu-item v-else :key=\"item1.path\" :title=\"item1.title\">\n                                {{item1.title}}\n                            </a-menu-item>\n                        </template>\n                    </template>\n                </a-sub-menu>\n                <a-menu-item v-else :key=\"item.path\" :title=\"item.title\">\n                    <MenuIcon v-if=\"item.icon\" :icon=\"item.icon\" />\n                    <span>{{item.title}}</span>\n                </a-menu-item>\n            </template>\n        </template>\n    </a-menu>\n</template>\n\n<script>\nimport { toRefs, computed } from 'vue';\nimport { useRoute, useRouter } from '@@/core/coreExports';\nimport Menu from 'ant-design-vue/lib/menu';\nimport 'ant-design-vue/lib/menu/style/css';\nimport MenuIcon from './MenuIcon';\nimport { transform as transformByAccess } from '../helpers/pluginAccess';\nimport { transform as transformByLocale } from '../helpers/pluginLocale';\n\nexport default {\n    components: {\n        [Menu.name]: Menu,\n        [Menu.SubMenu.name]: Menu.SubMenu,\n        [Menu.Item.name]: Menu.Item,\n        MenuIcon\n    },\n    props: {\n        menus: {\n            type: Array,\n            default() {\n                return [];\n            }\n        },\n        theme: {\n            type: String,\n            default: 'dark'\n        }\n    },\n    setup(props) {\n        const { menus } = toRefs(props);\n        const route = useRoute();\n        const router = useRouter();\n        const fixedMenus = transformByLocale(transformByAccess(menus));\n        const onMenuClick = (e) => {\n            const path = e.key;\n            if (/^https?:\\/\\//.test(path)) {\n                window.open(path, '_blank');\n            } else if (/^\\//.test(path)) {\n                router.push(path);\n            } else {\n                console.warn(\n                    '[plugin-layout]: 菜单的path只能使以http(s)开头的网址或者路由地址'\n                );\n            }\n        };\n        const selectedKeys = computed(() => [route.path]);\n        return {\n            selectedKeys,\n            fixedMenus,\n            onMenuClick\n        };\n    }\n};\n</script>\n\n<style lang=\"less\">\n</style>"}},{"format":"markup","foundDate":1638413755695,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-layout/src/runtime/views/BaseLayout.vue","start":{"line":1,"column":1,"position":0},"end":{"line":378,"column":2,"position":2314},"range":[0,11515],"fragment":"<template>\n    <a-layout\n        v-if=\"routeLayout\"\n        :class=\"[\n            collapsed ? 'main-layout-collapsed' : '',\n            `main-layout-navigation-${navigation}`,\n            `main-layout-theme-${siderTheme}`\n        ]\"\n        class=\"main-layout\"\n    >\n        <template v-if=\"navigation !== 'top' && routeLayout.side\">\n            <div v-if=\"fixedSideBar\" :style=\"siderFixedStuffStyle\" class=\"layout-sider-fixed-stuff\"></div>\n            <a-layout-sider\n                v-model:collapsed=\"collapsed\"\n                :width=\"sideWidth\"\n                :class=\"[\n                    'layout-sider',\n                    fixedSideBar ? 'layout-sider-fixed' : ''\n                ]\"\n                :theme=\"siderTheme\"\n                collapsible\n            >\n                <div v-if=\"navigation !== 'mixin' && routeLayout.logo\" class=\"layout-logo\">\n                    <img :src=\"logo\" class=\"logo-img\" />\n                    <h1 class=\"logo-name\">{{title}}</h1>\n                </div>\n                <Menu :menus=\"menus\" :theme=\"siderTheme\" />\n            </a-layout-sider>\n        </template>\n        <a-layout class=\"child-layout\">\n            <a-layout-header v-if=\"currentFixedHeader && routeLayout.top\" class=\"layout-header\">\n            </a-layout-header>\n            <a-layout-header\n                v-if=\"routeLayout.top\"\n                :style=\"headerFixedStyle\"\n                :class=\"[currentFixedHeader ? 'layout-header-fixed' : '']\"\n                class=\"layout-header\"\n            >\n                <div v-if=\"navigation === 'mixin' && routeLayout.logo\" class=\"layout-logo\">\n                    <img :src=\"logo\" class=\"logo-img\" />\n                    <h1 class=\"logo-name\">{{title}}</h1>\n                </div>\n                <template v-if=\"navigation === 'top'\">\n                    <div v-if=\"routeLayout.logo\" class=\"layout-logo\">\n                        <img :src=\"logo\" class=\"logo-img\" />\n                        <h1 class=\"logo-name\">{{title}}</h1>\n                    </div>\n                    <Menu :menus=\"menus\" :theme=\"theme\" class=\"layout-menu\" mode=\"horizontal\" />\n                </template>\n                <div class=\"layout-header-custom\">\n                    <slot name=\"customHeader\"></slot>\n                </div>\n                <template v-if=\"locale\">\n                    <slot name=\"locale\"></slot>\n                </template>\n            </a-layout-header>\n            <a-layout-content class=\"layout-content\">\n                <MultiTabProvider v-if=\"multiTabs\" />\n                <router-view v-else></router-view>\n            </a-layout-content>\n            <a-layout-footer v-if=\"footer\" class=\"layout-footer\">\n                {{footer}}\n            </a-layout-footer>\n        </a-layout>\n    </a-layout>\n    <div v-else class=\"content-wrapper\">\n        <router-view></router-view>\n    </div>\n</template>\n\n<script>\nimport { ref, computed } from 'vue';\nimport { useRoute } from '@@/core/coreExports';\nimport Layout from 'ant-design-vue/lib/layout';\nimport 'ant-design-vue/lib/layout/style/css';\nimport Menu from './Menu';\nimport MultiTabProvider from './MultiTabProvider';\nimport defaultLogo from '../assets/logo.png';\n\nexport default {\n    components: {\n        [Layout.name]: Layout,\n        [Layout.Sider.name]: Layout.Sider,\n        [Layout.Content.name]: Layout.Content,\n        [Layout.Header.name]: Layout.Header,\n        [Layout.Footer.name]: Layout.Footer,\n        Menu,\n        MultiTabProvider\n    },\n    props: {\n        menus: {\n            type: Array,\n            default() {\n                return [];\n            }\n        },\n        title: {\n            type: String,\n            default: ''\n        },\n        locale: {\n            type: Boolean,\n            default: false\n        },\n        logo: {\n            type: String,\n            default: defaultLogo\n        },\n        theme: {\n            type: String,\n            default: 'dark' // light、dark\n        },\n        navigation: {\n            type: String,\n            default: 'side' // side 左右（上/下）、 top 上/下、 mixin 上/下（左/右）\n        },\n        fixedHeader: {\n            type: Boolean,\n            default: false\n        },\n        fixedSideBar: {\n            type: Boolean,\n            default: true\n        },\n        multiTabs: {\n            type: Boolean,\n            default: false\n        },\n        sideWidth: {\n            type: Number,\n            default: 200\n        },\n        footer: String\n    },\n    setup(props) {\n        const collapsed = ref(false);\n        const route = useRoute();\n        const routeLayoutDefault = {\n            side: true,\n            top: true,\n            logo: true\n        };\n        const routeLayout = computed(() => {\n            let config;\n            // meta 中 layout 默认为 true\n            const metaLayoutConfig = route.meta.layout === undefined ? true : route.meta.layout;\n            if (typeof metaLayoutConfig === 'boolean') {\n                config = metaLayoutConfig ? routeLayoutDefault : false;\n            } else if (typeof metaLayoutConfig === 'object') {\n                config = { ...routeLayoutDefault, ...metaLayoutConfig };\n            } else {\n                console.error('[plugin-layout]: meta layout must be object or boolean！');\n            }\n            // query 中 layout 默认为 false\n            const routeQueryLayoutConfig = route.query.layout && JSON.parse(route.query.layout);\n            if (typeof routeQueryLayoutConfig === 'boolean') {\n                config = routeQueryLayoutConfig ? routeLayoutDefault : false;\n            } else if (typeof routeQueryLayoutConfig === 'object') {\n                config = { ...config, ...routeQueryLayoutConfig };\n            } else if (routeQueryLayoutConfig !== undefined) {\n                console.error('[plugin-layout]: query layout must be object or boolean！');\n            }\n            return config;\n        });\n        const siderTheme = computed(() => {\n            if (props.navigation === 'mixin') {\n                return 'light';\n            }\n            return props.theme;\n        });\n        const currentFixedHeader = computed(() => props.fixedHeader || props.navigation === 'mixin');\n        const siderFixedStuffStyle = computed(() => {\n            if (collapsed.value) {\n                return {\n                    width: '80px'\n                };\n            }\n            return {\n                width: `${props.sideWidth}px`\n            };\n        });\n        const headerFixedStyle = computed(() => {\n            if (!currentFixedHeader.value) {\n                return {};\n            }\n            if (props.navigation === 'side') {\n                return {\n                    left: `${props.sideWidth}px`,\n                    width: `calc(100% - ${props.sideWidth}px)`\n                };\n            }\n            return {\n                left: 0,\n                width: '100%'\n            };\n        });\n        return {\n            siderTheme,\n            currentFixedHeader,\n            route,\n            routeLayout,\n            collapsed,\n            siderFixedStuffStyle,\n            headerFixedStyle\n        };\n    }\n};\n</script>\n\n<style lang=\"less\">\n.main-layout.main-layout-navigation-mixin{\n    .layout-sider{\n        .ant-layout-sider-trigger {\n            border-top: 1px solid #f0f0f0;\n        }\n    }\n}\n</style>\n<style lang=\"less\" scoped>\n.main-layout {\n    min-height: 100vh;\n    &.main-layout-collapsed {\n        .layout-sider {\n            .layout-logo {\n                justify-content: center;\n                .logo-name {\n                    display: none;\n                }\n            }\n        }\n    }\n    &.main-layout-navigation-top {\n        .layout-header {\n            padding-left: 24px;\n            color: hsla(0,0%,100%,.65);\n            background: #001529;\n            .layout-menu {\n                line-height: 48px;\n            }\n            .layout-logo {\n                display: flex;\n                justify-content: flex-start;\n                align-items: center;\n                min-width: 165px;\n                height: 100%;\n                overflow: hidden;\n                transition: all .3s;\n                .logo-img {\n                    height: 32px;\n                    width: auto;\n                }\n                .logo-name {\n                    overflow: hidden;\n                    margin: 0 0 0 12px;\n                    color: #fff;\n                    font-weight: 600;\n                    font-size: 18px;\n                    line-height: 32px;\n                }\n            }\n        }\n    }\n    &.main-layout-navigation-mixin {\n        .layout-sider {\n            padding: 48px 0 0;\n            box-shadow: 2px 0 8px 0 rgba(29,35,41,.05);\n        }\n        .layout-header {\n            padding-left: 24px;\n            color: hsla(0,0%,100%,.65);\n            background: #001529;\n            .layout-menu {\n                line-height: 48px;\n            }\n            .layout-logo {\n                display: flex;\n                justify-content: flex-start;\n                align-items: center;\n                min-width: 165px;\n                height: 100%;\n                overflow: hidden;\n                transition: all .3s;\n                .logo-img {\n                    height: 32px;\n                    width: auto;\n                }\n                .logo-name {\n                    overflow: hidden;\n                    margin: 0 0 0 12px;\n                    color: #fff;\n                    font-weight: 600;\n                    font-size: 18px;\n                    line-height: 32px;\n                }\n            }\n        }\n    }\n    .layout-sider-fixed-stuff {\n        overflow: hidden;\n        transition: width 0.2s;\n        flex-shrink: 0;\n    }\n    .child-layout {\n        position: relative;\n    }\n    .layout-sider {\n        &.layout-sider-fixed {\n            position: fixed;\n            left: 0;\n            top: 0;\n            bottom: 0;\n            width: 200px;\n        }\n        .layout-logo {\n            height: 32px;\n            margin: 16px;\n            display: flex;\n            justify-content: flex-start;\n            align-items: center;\n            .logo-img {\n                height: 32px;\n                width: auto;\n            }\n            .logo-name {\n                overflow: hidden;\n                margin: 0 0 0 12px;\n                color: #fff;\n                font-weight: 600;\n                font-size: 18px;\n                line-height: 32px;\n            }\n        }\n    }\n    .layout-header {\n        position: relative;\n        z-index: 1;\n        display: flex;\n        align-items: center;\n        height: 48px;\n        line-height: 48px;\n        background: #fff;\n        box-shadow: 0 1px 4px rgba(0, 21, 41, 0.08);\n        padding: 0;\n        .layout-header-custom {\n            flex: 1;\n        }\n        &.layout-header-fixed {\n            position: fixed;\n            top: 0;\n            right: 0;\n            z-index: 10;\n        }\n    }\n    .layout-content,\n    .content-wrapper {\n        position: relative;\n    }\n    .layout-footer {\n        text-align: center;\n    }\n    &.main-layout-theme-light{\n        .logo-name{\n            color: rgba(0, 0, 0, 0.65) !important;\n        }\n        &.main-layout-navigation-mixin{\n            .logo-name{\n                color: #fff !important;\n            }\n        }\n        &.main-layout-navigation-top{\n            .layout-header {\n                background: #fff;\n                color: rgba(0, 0, 0, 0.85);\n            }\n        }\n    }\n}\n</style>"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-layout/views/BaseLayout.vue","start":{"line":1,"column":1,"position":0},"end":{"line":378,"column":2,"position":2314},"range":[0,11515],"fragment":"<template>\n    <a-layout\n        v-if=\"routeLayout\"\n        :class=\"[\n            collapsed ? 'main-layout-collapsed' : '',\n            `main-layout-navigation-${navigation}`,\n            `main-layout-theme-${siderTheme}`\n        ]\"\n        class=\"main-layout\"\n    >\n        <template v-if=\"navigation !== 'top' && routeLayout.side\">\n            <div v-if=\"fixedSideBar\" :style=\"siderFixedStuffStyle\" class=\"layout-sider-fixed-stuff\"></div>\n            <a-layout-sider\n                v-model:collapsed=\"collapsed\"\n                :width=\"sideWidth\"\n                :class=\"[\n                    'layout-sider',\n                    fixedSideBar ? 'layout-sider-fixed' : ''\n                ]\"\n                :theme=\"siderTheme\"\n                collapsible\n            >\n                <div v-if=\"navigation !== 'mixin' && routeLayout.logo\" class=\"layout-logo\">\n                    <img :src=\"logo\" class=\"logo-img\" />\n                    <h1 class=\"logo-name\">{{title}}</h1>\n                </div>\n                <Menu :menus=\"menus\" :theme=\"siderTheme\" />\n            </a-layout-sider>\n        </template>\n        <a-layout class=\"child-layout\">\n            <a-layout-header v-if=\"currentFixedHeader && routeLayout.top\" class=\"layout-header\">\n            </a-layout-header>\n            <a-layout-header\n                v-if=\"routeLayout.top\"\n                :style=\"headerFixedStyle\"\n                :class=\"[currentFixedHeader ? 'layout-header-fixed' : '']\"\n                class=\"layout-header\"\n            >\n                <div v-if=\"navigation === 'mixin' && routeLayout.logo\" class=\"layout-logo\">\n                    <img :src=\"logo\" class=\"logo-img\" />\n                    <h1 class=\"logo-name\">{{title}}</h1>\n                </div>\n                <template v-if=\"navigation === 'top'\">\n                    <div v-if=\"routeLayout.logo\" class=\"layout-logo\">\n                        <img :src=\"logo\" class=\"logo-img\" />\n                        <h1 class=\"logo-name\">{{title}}</h1>\n                    </div>\n                    <Menu :menus=\"menus\" :theme=\"theme\" class=\"layout-menu\" mode=\"horizontal\" />\n                </template>\n                <div class=\"layout-header-custom\">\n                    <slot name=\"customHeader\"></slot>\n                </div>\n                <template v-if=\"locale\">\n                    <slot name=\"locale\"></slot>\n                </template>\n            </a-layout-header>\n            <a-layout-content class=\"layout-content\">\n                <MultiTabProvider v-if=\"multiTabs\" />\n                <router-view v-else></router-view>\n            </a-layout-content>\n            <a-layout-footer v-if=\"footer\" class=\"layout-footer\">\n                {{footer}}\n            </a-layout-footer>\n        </a-layout>\n    </a-layout>\n    <div v-else class=\"content-wrapper\">\n        <router-view></router-view>\n    </div>\n</template>\n\n<script>\nimport { ref, computed } from 'vue';\nimport { useRoute } from '@@/core/coreExports';\nimport Layout from 'ant-design-vue/lib/layout';\nimport 'ant-design-vue/lib/layout/style/css';\nimport Menu from './Menu';\nimport MultiTabProvider from './MultiTabProvider';\nimport defaultLogo from '../assets/logo.png';\n\nexport default {\n    components: {\n        [Layout.name]: Layout,\n        [Layout.Sider.name]: Layout.Sider,\n        [Layout.Content.name]: Layout.Content,\n        [Layout.Header.name]: Layout.Header,\n        [Layout.Footer.name]: Layout.Footer,\n        Menu,\n        MultiTabProvider\n    },\n    props: {\n        menus: {\n            type: Array,\n            default() {\n                return [];\n            }\n        },\n        title: {\n            type: String,\n            default: ''\n        },\n        locale: {\n            type: Boolean,\n            default: false\n        },\n        logo: {\n            type: String,\n            default: defaultLogo\n        },\n        theme: {\n            type: String,\n            default: 'dark' // light、dark\n        },\n        navigation: {\n            type: String,\n            default: 'side' // side 左右（上/下）、 top 上/下、 mixin 上/下（左/右）\n        },\n        fixedHeader: {\n            type: Boolean,\n            default: false\n        },\n        fixedSideBar: {\n            type: Boolean,\n            default: true\n        },\n        multiTabs: {\n            type: Boolean,\n            default: false\n        },\n        sideWidth: {\n            type: Number,\n            default: 200\n        },\n        footer: String\n    },\n    setup(props) {\n        const collapsed = ref(false);\n        const route = useRoute();\n        const routeLayoutDefault = {\n            side: true,\n            top: true,\n            logo: true\n        };\n        const routeLayout = computed(() => {\n            let config;\n            // meta 中 layout 默认为 true\n            const metaLayoutConfig = route.meta.layout === undefined ? true : route.meta.layout;\n            if (typeof metaLayoutConfig === 'boolean') {\n                config = metaLayoutConfig ? routeLayoutDefault : false;\n            } else if (typeof metaLayoutConfig === 'object') {\n                config = { ...routeLayoutDefault, ...metaLayoutConfig };\n            } else {\n                console.error('[plugin-layout]: meta layout must be object or boolean！');\n            }\n            // query 中 layout 默认为 false\n            const routeQueryLayoutConfig = route.query.layout && JSON.parse(route.query.layout);\n            if (typeof routeQueryLayoutConfig === 'boolean') {\n                config = routeQueryLayoutConfig ? routeLayoutDefault : false;\n            } else if (typeof routeQueryLayoutConfig === 'object') {\n                config = { ...config, ...routeQueryLayoutConfig };\n            } else if (routeQueryLayoutConfig !== undefined) {\n                console.error('[plugin-layout]: query layout must be object or boolean！');\n            }\n            return config;\n        });\n        const siderTheme = computed(() => {\n            if (props.navigation === 'mixin') {\n                return 'light';\n            }\n            return props.theme;\n        });\n        const currentFixedHeader = computed(() => props.fixedHeader || props.navigation === 'mixin');\n        const siderFixedStuffStyle = computed(() => {\n            if (collapsed.value) {\n                return {\n                    width: '80px'\n                };\n            }\n            return {\n                width: `${props.sideWidth}px`\n            };\n        });\n        const headerFixedStyle = computed(() => {\n            if (!currentFixedHeader.value) {\n                return {};\n            }\n            if (props.navigation === 'side') {\n                return {\n                    left: `${props.sideWidth}px`,\n                    width: `calc(100% - ${props.sideWidth}px)`\n                };\n            }\n            return {\n                left: 0,\n                width: '100%'\n            };\n        });\n        return {\n            siderTheme,\n            currentFixedHeader,\n            route,\n            routeLayout,\n            collapsed,\n            siderFixedStuffStyle,\n            headerFixedStyle\n        };\n    }\n};\n</script>\n\n<style lang=\"less\">\n.main-layout.main-layout-navigation-mixin{\n    .layout-sider{\n        .ant-layout-sider-trigger {\n            border-top: 1px solid #f0f0f0;\n        }\n    }\n}\n</style>\n<style lang=\"less\" scoped>\n.main-layout {\n    min-height: 100vh;\n    &.main-layout-collapsed {\n        .layout-sider {\n            .layout-logo {\n                justify-content: center;\n                .logo-name {\n                    display: none;\n                }\n            }\n        }\n    }\n    &.main-layout-navigation-top {\n        .layout-header {\n            padding-left: 24px;\n            color: hsla(0,0%,100%,.65);\n            background: #001529;\n            .layout-menu {\n                line-height: 48px;\n            }\n            .layout-logo {\n                display: flex;\n                justify-content: flex-start;\n                align-items: center;\n                min-width: 165px;\n                height: 100%;\n                overflow: hidden;\n                transition: all .3s;\n                .logo-img {\n                    height: 32px;\n                    width: auto;\n                }\n                .logo-name {\n                    overflow: hidden;\n                    margin: 0 0 0 12px;\n                    color: #fff;\n                    font-weight: 600;\n                    font-size: 18px;\n                    line-height: 32px;\n                }\n            }\n        }\n    }\n    &.main-layout-navigation-mixin {\n        .layout-sider {\n            padding: 48px 0 0;\n            box-shadow: 2px 0 8px 0 rgba(29,35,41,.05);\n        }\n        .layout-header {\n            padding-left: 24px;\n            color: hsla(0,0%,100%,.65);\n            background: #001529;\n            .layout-menu {\n                line-height: 48px;\n            }\n            .layout-logo {\n                display: flex;\n                justify-content: flex-start;\n                align-items: center;\n                min-width: 165px;\n                height: 100%;\n                overflow: hidden;\n                transition: all .3s;\n                .logo-img {\n                    height: 32px;\n                    width: auto;\n                }\n                .logo-name {\n                    overflow: hidden;\n                    margin: 0 0 0 12px;\n                    color: #fff;\n                    font-weight: 600;\n                    font-size: 18px;\n                    line-height: 32px;\n                }\n            }\n        }\n    }\n    .layout-sider-fixed-stuff {\n        overflow: hidden;\n        transition: width 0.2s;\n        flex-shrink: 0;\n    }\n    .child-layout {\n        position: relative;\n    }\n    .layout-sider {\n        &.layout-sider-fixed {\n            position: fixed;\n            left: 0;\n            top: 0;\n            bottom: 0;\n            width: 200px;\n        }\n        .layout-logo {\n            height: 32px;\n            margin: 16px;\n            display: flex;\n            justify-content: flex-start;\n            align-items: center;\n            .logo-img {\n                height: 32px;\n                width: auto;\n            }\n            .logo-name {\n                overflow: hidden;\n                margin: 0 0 0 12px;\n                color: #fff;\n                font-weight: 600;\n                font-size: 18px;\n                line-height: 32px;\n            }\n        }\n    }\n    .layout-header {\n        position: relative;\n        z-index: 1;\n        display: flex;\n        align-items: center;\n        height: 48px;\n        line-height: 48px;\n        background: #fff;\n        box-shadow: 0 1px 4px rgba(0, 21, 41, 0.08);\n        padding: 0;\n        .layout-header-custom {\n            flex: 1;\n        }\n        &.layout-header-fixed {\n            position: fixed;\n            top: 0;\n            right: 0;\n            z-index: 10;\n        }\n    }\n    .layout-content,\n    .content-wrapper {\n        position: relative;\n    }\n    .layout-footer {\n        text-align: center;\n    }\n    &.main-layout-theme-light{\n        .logo-name{\n            color: rgba(0, 0, 0, 0.65) !important;\n        }\n        &.main-layout-navigation-mixin{\n            .logo-name{\n                color: #fff !important;\n            }\n        }\n        &.main-layout-navigation-top{\n            .layout-header {\n                background: #fff;\n                color: rgba(0, 0, 0, 0.85);\n            }\n        }\n    }\n}\n</style>"}},{"format":"markup","foundDate":1638413755701,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-layout/src/runtime/views/404.vue","start":{"line":1,"column":1,"position":0},"end":{"line":35,"column":2,"position":202},"range":[0,794],"fragment":"<template>\n    <a-result status=\"404\" title=\"404\" sub-title=\"对不起，您访问的页面不存在。\">\n        <template #extra>\n            <a-button type=\"primary\" @click=\"click\">上一页</a-button>\n        </template>\n    </a-result>\n</template>\n<config>\n{\n    \"layout\": false\n}\n</config>\n<script>\nimport { useRouter } from '@@/core/coreExports';\nimport Result from 'ant-design-vue/lib/result';\nimport 'ant-design-vue/lib/result/style/css';\nimport Button from 'ant-design-vue/lib/button';\nimport 'ant-design-vue/lib/button/style/css';\n\nexport default {\n    components: {\n        [Result.name]: Result,\n        [Button.name]: Button\n    },\n    setup() {\n        const router = useRouter();\n        const click = () => {\n            router.back();\n        };\n        return {\n            click\n        };\n    }\n};\n</script>"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-layout/views/404.vue","start":{"line":1,"column":1,"position":0},"end":{"line":35,"column":2,"position":202},"range":[0,794],"fragment":"<template>\n    <a-result status=\"404\" title=\"404\" sub-title=\"对不起，您访问的页面不存在。\">\n        <template #extra>\n            <a-button type=\"primary\" @click=\"click\">上一页</a-button>\n        </template>\n    </a-result>\n</template>\n<config>\n{\n    \"layout\": false\n}\n</config>\n<script>\nimport { useRouter } from '@@/core/coreExports';\nimport Result from 'ant-design-vue/lib/result';\nimport 'ant-design-vue/lib/result/style/css';\nimport Button from 'ant-design-vue/lib/button';\nimport 'ant-design-vue/lib/button/style/css';\n\nexport default {\n    components: {\n        [Result.name]: Result,\n        [Button.name]: Button\n    },\n    setup() {\n        const router = useRouter();\n        const click = () => {\n            router.back();\n        };\n        return {\n            click\n        };\n    }\n};\n</script>"}},{"format":"markup","foundDate":1638413755702,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-layout/src/runtime/views/403.vue","start":{"line":1,"column":1,"position":0},"end":{"line":35,"column":2,"position":202},"range":[0,795],"fragment":"<template>\n    <a-result status=\"403\" title=\"403\" sub-title=\"对不起，您没有权限访问此页面。\">\n        <template #extra>\n            <a-button type=\"primary\" @click=\"click\">上一页</a-button>\n        </template>\n    </a-result>\n</template>\n<config>\n{\n    \"layout\": false\n}\n</config>\n<script>\nimport { useRouter } from '@@/core/coreExports';\nimport Result from 'ant-design-vue/lib/result';\nimport 'ant-design-vue/lib/result/style/css';\nimport Button from 'ant-design-vue/lib/button';\nimport 'ant-design-vue/lib/button/style/css';\n\nexport default {\n    components: {\n        [Result.name]: Result,\n        [Button.name]: Button\n    },\n    setup() {\n        const router = useRouter();\n        const click = () => {\n            router.back();\n        };\n        return {\n            click\n        };\n    }\n};\n</script>"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-layout/views/403.vue","start":{"line":1,"column":1,"position":0},"end":{"line":35,"column":2,"position":202},"range":[0,794],"fragment":"<template>\n    <a-result status=\"403\" title=\"403\" sub-title=\"对不起，您没有权限访问此页面。\">\n        <template #extra>\n            <a-button type=\"primary\" @click=\"click\">上一页</a-button>\n        </template>\n    </a-result>\n</template>\n<config>\n{\n    \"layout\": false\n}\n</config>\n<script>\nimport { useRouter } from '@@/core/coreExports';\nimport Result from 'ant-design-vue/lib/result';\nimport 'ant-design-vue/lib/result/style/css';\nimport Button from 'ant-design-vue/lib/button';\nimport 'ant-design-vue/lib/button/style/css';\n\nexport default {\n    components: {\n        [Result.name]: Result,\n        [Button.name]: Button\n    },\n    setup() {\n        const router = useRouter();\n        const click = () => {\n            router.back();\n        };\n        return {\n            click\n        };\n    }\n};\n</script"}},{"format":"javascript","foundDate":1638413755703,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-layout/src/runtime/helpers/svg.js","start":{"line":1,"column":1,"position":0},"end":{"line":49,"column":2,"position":456},"range":[0,1385],"fragment":"const isStr = function (str) {\n    return typeof str === 'string';\n};\n\nexport const isValid = (elm) => {\n    if (elm.nodeType === 1) {\n        if (elm.nodeName.toLowerCase() === 'script') {\n            return false;\n        }\n\n        for (let i = 0; i < elm.attributes.length; i++) {\n            const val = elm.attributes[i].value;\n            if (isStr(val) && val.toLowerCase().indexOf('on') === 0) {\n                return false;\n            }\n        }\n\n        for (let i = 0; i < elm.childNodes.length; i++) {\n            if (!isValid(elm.childNodes[i])) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\nexport const validateContent = (svgContent) => {\n    const div = document.createElement('div');\n    div.innerHTML = svgContent;\n\n    // setup this way to ensure it works on our buddy IE\n    for (let i = div.childNodes.length - 1; i >= 0; i--) {\n        if (div.childNodes[i].nodeName.toLowerCase() !== 'svg') {\n            div.removeChild(div.childNodes[i]);\n        }\n    }\n\n    // must only have 1 root element\n    const svgElm = div.firstElementChild;\n    if (svgElm && svgElm.nodeName.toLowerCase() === 'svg') {\n        // root element must be an svg\n        // lets double check we've got valid elements\n        // do not allow scripts\n        if (isValid(svgElm)) {\n            return div.innerHTML;\n        }\n    }\n    return '';\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-layout/helpers/svg.js","start":{"line":1,"column":1,"position":0},"end":{"line":49,"column":2,"position":456},"range":[0,1385],"fragment":"const isStr = function (str) {\n    return typeof str === 'string';\n};\n\nexport const isValid = (elm) => {\n    if (elm.nodeType === 1) {\n        if (elm.nodeName.toLowerCase() === 'script') {\n            return false;\n        }\n\n        for (let i = 0; i < elm.attributes.length; i++) {\n            const val = elm.attributes[i].value;\n            if (isStr(val) && val.toLowerCase().indexOf('on') === 0) {\n                return false;\n            }\n        }\n\n        for (let i = 0; i < elm.childNodes.length; i++) {\n            if (!isValid(elm.childNodes[i])) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\nexport const validateContent = (svgContent) => {\n    const div = document.createElement('div');\n    div.innerHTML = svgContent;\n\n    // setup this way to ensure it works on our buddy IE\n    for (let i = div.childNodes.length - 1; i >= 0; i--) {\n        if (div.childNodes[i].nodeName.toLowerCase() !== 'svg') {\n            div.removeChild(div.childNodes[i]);\n        }\n    }\n\n    // must only have 1 root element\n    const svgElm = div.firstElementChild;\n    if (svgElm && svgElm.nodeName.toLowerCase() === 'svg') {\n        // root element must be an svg\n        // lets double check we've got valid elements\n        // do not allow scripts\n        if (isValid(svgElm)) {\n            return div.innerHTML;\n        }\n    }\n    return '';\n};"}},{"format":"javascript","foundDate":1638413755705,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-layout/src/runtime/helpers/pluginLocale.js","start":{"line":5,"column":2,"position":33},"end":{"line":33,"column":2,"position":292},"range":[94,816],"fragment":"const transTitle = (name) => {\n    const sharedLocale = plugin.getShared('locale');\n    if (sharedLocale) {\n        const { t } = sharedLocale.useI18n();\n        return t(name);\n    }\n    return name;\n};\n\n\nconst _transform = (arr) => {\n    if (Array.isArray(arr)) {\n        arr.forEach((item) => {\n            if (item.title) {\n                item._title = item.title;\n                item.title = computed(() => transTitle(item._title));\n            }\n            if (item.children && item.children.length > 0) {\n                _transform(item.children);\n            }\n        });\n    }\n};\n\nexport const transform = (menus) => {\n    const originData = unref(menus);\n    _transform(originData);\n    return originData;\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-layout/helpers/pluginLocale.js","start":{"line":5,"column":1,"position":31},"end":{"line":33,"column":2,"position":290},"range":[87,809],"fragment":"const transTitle = (name) => {\n    const sharedLocale = plugin.getShared('locale');\n    if (sharedLocale) {\n        const { t } = sharedLocale.useI18n();\n        return t(name);\n    }\n    return name;\n};\n\n\nconst _transform = (arr) => {\n    if (Array.isArray(arr)) {\n        arr.forEach((item) => {\n            if (item.title) {\n                item._title = item.title;\n                item.title = computed(() => transTitle(item._title));\n            }\n            if (item.children && item.children.length > 0) {\n                _transform(item.children);\n            }\n        });\n    }\n};\n\nexport const transform = (menus) => {\n    const originData = unref(menus);\n    _transform(originData);\n    return originData;\n};"}},{"format":"javascript","foundDate":1638413755707,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-layout/src/runtime/helpers/pluginAccess.js","start":{"line":1,"column":1,"position":0},"end":{"line":40,"column":2,"position":368},"range":[0,1112],"fragment":"import { unref, computed } from 'vue';\n// eslint-disable-next-line\nimport { useAccess } from '../../plugin-access/core';\n\nif (!useAccess) {\n    throw new Error(\n        '[plugin-layout]: pLugin-layout depends on plugin-access，please install plugin-access first！'\n    );\n}\n\nexport const hasAccessByMenuItem = (item) => {\n    let res;\n    if (item.path && (!item.children || item.children.length === 0)) {\n        res = useAccess(item.path);\n    } else if (item.children && item.children.length > 0) {\n        res = computed(() => item.children.some((child) => {\n            const rst = hasAccessByMenuItem(child);\n            return rst && rst.value;\n        }));\n    }\n    return res;\n};\n\nconst _addAccessTag = (arr) => {\n    if (Array.isArray(arr)) {\n        arr.forEach((item) => {\n            item.access = hasAccessByMenuItem(item);\n            if (item.children && item.children.length > 0) {\n                _addAccessTag(item.children);\n            }\n        });\n    }\n};\n\nexport const transform = (menus) => {\n    const originData = unref(menus);\n    _addAccessTag(originData);\n\n    return originData;\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-layout/helpers/pluginAccess.js","start":{"line":1,"column":1,"position":0},"end":{"line":40,"column":2,"position":368},"range":[0,1112],"fragment":"import { unref, computed } from 'vue';\n// eslint-disable-next-line\nimport { useAccess } from '../../plugin-access/core';\n\nif (!useAccess) {\n    throw new Error(\n        '[plugin-layout]: pLugin-layout depends on plugin-access，please install plugin-access first！'\n    );\n}\n\nexport const hasAccessByMenuItem = (item) => {\n    let res;\n    if (item.path && (!item.children || item.children.length === 0)) {\n        res = useAccess(item.path);\n    } else if (item.children && item.children.length > 0) {\n        res = computed(() => item.children.some((child) => {\n            const rst = hasAccessByMenuItem(child);\n            return rst && rst.value;\n        }));\n    }\n    return res;\n};\n\nconst _addAccessTag = (arr) => {\n    if (Array.isArray(arr)) {\n        arr.forEach((item) => {\n            item.access = hasAccessByMenuItem(item);\n            if (item.children && item.children.length > 0) {\n                _addAccessTag(item.children);\n            }\n        });\n    }\n};\n\nexport const transform = (menus) => {\n    const originData = unref(menus);\n    _addAccessTag(originData);\n\n    return originData;\n};"}},{"format":"less","foundDate":1638413755710,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-icon/src/runtime/Icon/icon.less","start":{"line":1,"column":1,"position":0},"end":{"line":50,"column":2,"position":278},"range":[0,1020],"fragment":".inner-icon {\n    display: inline-block;\n    color: inherit;\n    font-style: normal;\n    line-height: 0;\n    text-align: center;\n    text-transform: none;\n    outline: none;\n    vertical-align: -0.125em;\n    text-rendering: optimizeLegibility;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n\n    > * {\n        line-height: 1;\n    }\n\n    svg {\n        display: inline-block;\n        width: 1em;\n        height: 1em;\n        fill: currentColor;\n    }\n\n    &::before {\n        display: none; // dont display old icon.\n    }\n\n    &[tabindex] {\n        cursor: pointer;\n    }\n    &--spin {\n        display: inline-block;\n        animation: loadingCircle 1s infinite linear;\n    }\n\n    @-webkit-keyframes loadingCircle {\n        100% {\n            -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n        }\n    }\n    @keyframes loadingCircle {\n        100% {\n            -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n        }\n    }\n    \n}"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-icon/Icon/icon.less","start":{"line":1,"column":1,"position":0},"end":{"line":50,"column":2,"position":278},"range":[0,1020],"fragment":".inner-icon {\n    display: inline-block;\n    color: inherit;\n    font-style: normal;\n    line-height: 0;\n    text-align: center;\n    text-transform: none;\n    outline: none;\n    vertical-align: -0.125em;\n    text-rendering: optimizeLegibility;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n\n    > * {\n        line-height: 1;\n    }\n\n    svg {\n        display: inline-block;\n        width: 1em;\n        height: 1em;\n        fill: currentColor;\n    }\n\n    &::before {\n        display: none; // dont display old icon.\n    }\n\n    &[tabindex] {\n        cursor: pointer;\n    }\n    &--spin {\n        display: inline-block;\n        animation: loadingCircle 1s infinite linear;\n    }\n\n    @-webkit-keyframes loadingCircle {\n        100% {\n            -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n        }\n    }\n    @keyframes loadingCircle {\n        100% {\n            -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n        }\n    }\n    \n}"}},{"format":"markup","foundDate":1638413755712,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-icon/src/runtime/Icon/Icon.vue","start":{"line":1,"column":1,"position":0},"end":{"line":41,"column":2,"position":278},"range":[0,1225],"fragment":"<script>\nimport { computed } from 'vue';\n// eslint-disable-next-line\nimport icons from '../icons';\n\nconst noop = () => { };\n\nexport default {\n    name: 'FesIcon',\n    props: ['type', 'spin', 'rotate', 'tabIndex'],\n    setup(props, { attrs }) {\n        const CurrentIcon = computed(() => icons[props.type]);\n        const iconTabIndex = computed(() => {\n            let tabIndex = props.tabIndex;\n            if (tabIndex == null && attrs.onClick) {\n                tabIndex = -1;\n            }\n            return tabIndex;\n        });\n        const svgStyle = computed(() => (props.rotate\n            ? {\n                msTransform: `rotate(${props.rotate}deg)`,\n                transform: `rotate(${props.rotate}deg)`\n            }\n            : null));\n        const svgCls = computed(() => ({\n            'inner-icon--spin': !!props.spin || props.type === 'loading'\n        }));\n        return () => (\n            <span\n                tabIndex={iconTabIndex.value}\n                role=\"img\"\n                class=\"inner-icon\"\n                onClick={attrs.onClick || noop}\n            >\n                <CurrentIcon.value class={svgCls.value} style={svgStyle.value} />\n            </span>\n        );\n    }\n};\n</script>"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-icon/Icon/Icon.vue","start":{"line":1,"column":1,"position":0},"end":{"line":41,"column":2,"position":278},"range":[0,1225],"fragment":"<script>\nimport { computed } from 'vue';\n// eslint-disable-next-line\nimport icons from '../icons';\n\nconst noop = () => { };\n\nexport default {\n    name: 'FesIcon',\n    props: ['type', 'spin', 'rotate', 'tabIndex'],\n    setup(props, { attrs }) {\n        const CurrentIcon = computed(() => icons[props.type]);\n        const iconTabIndex = computed(() => {\n            let tabIndex = props.tabIndex;\n            if (tabIndex == null && attrs.onClick) {\n                tabIndex = -1;\n            }\n            return tabIndex;\n        });\n        const svgStyle = computed(() => (props.rotate\n            ? {\n                msTransform: `rotate(${props.rotate}deg)`,\n                transform: `rotate(${props.rotate}deg)`\n            }\n            : null));\n        const svgCls = computed(() => ({\n            'inner-icon--spin': !!props.spin || props.type === 'loading'\n        }));\n        return () => (\n            <span\n                tabIndex={iconTabIndex.value}\n                role=\"img\"\n                class=\"inner-icon\"\n                onClick={attrs.onClick || noop}\n            >\n                <CurrentIcon.value class={svgCls.value} style={svgStyle.value} />\n            </span>\n        );\n    }\n};\n</script>"}},{"format":"json","foundDate":1638413755740,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/create-fes-app/templates/app/h5/tsconfig.json","start":{"line":1,"column":1,"position":0},"end":{"line":37,"column":2,"position":233},"range":[0,893],"fragment":"{\n  \"compilerOptions\": {\n    \"outDir\": \"build/dist\",\n    \"module\": \"esnext\",\n    \"target\": \"esnext\",\n    \"lib\": [\"esnext\", \"dom\"],\n    \"sourceMap\": true,\n    \"baseUrl\": \".\",\n    \"jsx\": \"preserve\",\n    \"allowSyntheticDefaultImports\": true,\n    \"moduleResolution\": \"node\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"noImplicitReturns\": true,\n    \"suppressImplicitAnyIndexErrors\": true,\n    \"noUnusedLocals\": true,\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"experimentalDecorators\": true,\n    \"strict\": true,\n    \"paths\": {\n      \"@/*\": [\"./src/*\"],\n      \"@@/*\": [\"./src/.fes/*\"]\n    }\n  },\n  \"include\": [\n    \"src/**/*\",\n    \"tests/**/*\",\n    \"test/**/*\",\n    \"__test__/**/*\",\n    \"typings/**/*\",\n    \"config/**/*\",\n    \".eslintrc.js\",\n    \".stylelintrc.js\",\n    \".prettierrc.js\"\n  ],\n  \"exclude\": [\"node_modules\", \"build\", \"dist\", \"scripts\", \"src/.fes/*\", \"webpack\", \"jest\"]\n}"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/create-fes-app/templates/app/pc/tsconfig.json","start":{"line":1,"column":1,"position":0},"end":{"line":37,"column":2,"position":233},"range":[0,893],"fragment":"{\n  \"compilerOptions\": {\n    \"outDir\": \"build/dist\",\n    \"module\": \"esnext\",\n    \"target\": \"esnext\",\n    \"lib\": [\"esnext\", \"dom\"],\n    \"sourceMap\": true,\n    \"baseUrl\": \".\",\n    \"jsx\": \"preserve\",\n    \"allowSyntheticDefaultImports\": true,\n    \"moduleResolution\": \"node\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"noImplicitReturns\": true,\n    \"suppressImplicitAnyIndexErrors\": true,\n    \"noUnusedLocals\": true,\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"experimentalDecorators\": true,\n    \"strict\": true,\n    \"paths\": {\n      \"@/*\": [\"./src/*\"],\n      \"@@/*\": [\"./src/.fes/*\"]\n    }\n  },\n  \"include\": [\n    \"src/**/*\",\n    \"tests/**/*\",\n    \"test/**/*\",\n    \"__test__/**/*\",\n    \"typings/**/*\",\n    \"config/**/*\",\n    \".eslintrc.js\",\n    \".stylelintrc.js\",\n    \".prettierrc.js\"\n  ],\n  \"exclude\": [\"node_modules\", \"build\", \"dist\", \"scripts\", \"src/.fes/*\", \"webpack\", \"jest\"]\n}"}},{"format":"json","foundDate":1638413755741,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/create-fes-app/templates/app/h5/package.json","start":{"line":8,"column":3,"position":43},"end":{"line":31,"column":27,"position":148},"range":[152,567],"fragment":"},\n  \"keywords\": [\n    \"管理端\",\n    \"fes\",\n    \"fast\",\n    \"easy\",\n    \"strong\"\n  ],\n  \"files\": [\n    \".eslintrc.js\",\n    \".gitignore\",\n    \".fes.js\",\n    \".fes.prod.js\",\n    \"mock.js\",\n    \"package.json\",\n    \"README.md\",\n    \"tsconfig.json\",\n    \"/src\",\n    \"/config\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/WeBankFinTech/fes.js.git\",\n    \"directory\": \"packages/fes-template-h5\""},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/create-fes-app/templates/app/pc/package.json","start":{"line":11,"column":3,"position":64},"end":{"line":34,"column":24,"position":169},"range":[255,667],"fragment":"},\n  \"keywords\": [\n    \"管理端\",\n    \"fes\",\n    \"fast\",\n    \"easy\",\n    \"strong\"\n  ],\n  \"files\": [\n    \".eslintrc.js\",\n    \".gitignore\",\n    \".fes.js\",\n    \".fes.prod.js\",\n    \"mock.js\",\n    \"package.json\",\n    \"README.md\",\n    \"tsconfig.json\",\n    \"/src\",\n    \"/config\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/WeBankFinTech/fes.js.git\",\n    \"directory\": \"packages/fes-template\""}},{"format":"javascript","foundDate":1638413755768,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/plugin/plugins/qiankun.md","start":{"line":149,"column":2,"position":405},"end":{"line":229,"column":6,"position":642},"range":[3260,4520],"fragment":"l` 参数，用于指定加载子应用什么路由页面。\n\n ```vue\n<template>\n    <MicroApp :name=\"name\" url=\"/\" />\n</template>\n<script>\nimport { MicroApp } from '@fesjs/fes';\n\nexport default {\n    components: { MicroApp },\n    setup(){\n        const name = \"app1\"\n        return {\n            name\n        }\n    }\n}\n</script>\n```\n\n## 子应用配置\n\n### 第一步：插件注册\n```js\nexport default {\n    qiankun: {\n        micro: {},\n    }\n};\n```\n\n### 第二步：配置运行时生命周期钩子（可选）\n插件会自动为你创建好 `qiankun` 子应用需要的生命周期钩子，但是如果你想在生命周期期间加一些自定义逻辑，可以在子应用的 `src/app.js` 里导出 `qiankun` 对象，并实现每一个生命周期钩子，其中钩子函数的入参 `props` 由主应用自动注入。\n```js\nexport const qiankun = {\n    // 应用加载之前\n    async bootstrap(props) {\n        console.log('app1 bootstrap', props);\n    },\n    // 应用 render 之前触发\n    async mount(props) {\n        console.log('app1 mount', props);\n    },\n    // 当 props 更新时触发\n    async update(props){\n        console.log('app1 update', props);\n    },\n    // 应用卸载之后触发\n    async unmount(props) {\n        console.log('app1 unmount', props);\n    },\n};\n\n```\n\n## 父子应用通讯\n\n有两种方式实现\n\n### 配合 [useModel](./model.md) 使用\n\n确保已经安装了 `@fesjs/plugin-model`：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-model\": \"^2.0.0\"\n    },\n}\n```\n\n#### 主应用传递 props\n\n- 如果使用 `MicroApp` 组件模式消费子应用，直接通过 props 传递即可：\n```vue\n<template>\n    "},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/plugin/plugins/qiankun.md","start":{"line":124,"column":2,"position":305},"end":{"line":156,"column":7,"position":441},"range":[2666,3403],"fragment":"用加载了，但是页面没有渲染出来的情况。\n:::\n```vue\n<template>\n    <MicroApp :name=\"name\" />\n</template>\n<script>\nimport { MicroApp } from '@fesjs/fes';\n\nexport default {\n    components: { MicroApp },\n    setup(){\n        const name = \"app1\"\n        return {\n            name\n        }\n    }\n}\n</script>\n```\n\n####  使用 `<MicroAppWithMemoHistory />` 组件的方式\n如果我们的路由使用 `history` 模式，那么在使用乾坤时还算方便，主应用和子应用的路由根据base可以很方便的匹配起来，而且不存在冲突。但是当我们使用 `hash` 模式时，就问题很大，主应用和子应用的路由必须一样才可以匹配上，用起来贼不方便。而且不能在一个页面上同时加载多个子应用，路由存在冲突！这时候，`<MicroAppWithMemoHistory />` 出现了，完美解决上面的问题。\n\n\n`<MicroAppWithMemoHistory />` 相比 `<MicroApp />` ，需要多传入 `url` 参数，用于指定加载子应用什么路由页面。\n\n ```vue\n<template>\n    <MicroApp :name=\"name\" url=\"/\" />\n</template>\n<script>\nimport { MicroApp } from '@fesjs/fes';\n\ne"}},{"format":"markdown","foundDate":1638413755924,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/plugin/plugins/access.md","start":{"line":102,"column":1,"position":331},"end":{"line":134,"column":2,"position":448},"range":[1508,2293],"fragment":"认值**：`{}`\n\n- **详情**：     \n  \n  角色预定义列表。`key` 是角色 Id ，`value`是角色 Id 对应的资源列表。\n\n\n### 运行时配置\n在 `app.js` 中配置\n\n#### unAccessHandler\n- **类型**：`Function`\n  \n- **默认值**：`null`\n\n- **详情**：     \n  \n  当进入某个路由时，如果路由对应的页面不属于可见资源列表，则会暂停进入，调用 `unAccessHandler` 函数。\n- **参数**\n  - router：createRouter 创建的路由实例\n  - to： 准备进入的路由\n  - from：离开的路由\n  - next： [next函数](https://next.router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%8F%AF%E9%80%89%E7%9A%84%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0-next)\n\n比如：\n```js\nexport const access = {\n    unAccessHandler({ to, next }) {\n        const accesssIds = accessApi.getAccess();\n        if (to.path === '/404') {\n            accessApi.setAccess(accesssIds.concat(['/404']));\n            return next('/404');\n        }\n        if (!accesssIds.includes('/403"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/plugin/plugins/layout.md","start":{"line":222,"column":1,"position":862},"end":{"line":254,"column":4,"position":979},"range":[3312,4099],"fragment":"置\n在 `app.js` 中配置：\n```js\nimport UserCenter from '@/components/UserCenter';\nexport const layout = {\n    customHeader: <UserCenter />\n};\n\n```\n#### customHeader\n- **类型**：Vue Component\n  \n- **默认值**：`null`\n\n- **详情**：top的区域部分位置提供组件自定义功能。\n\n#### unAccessHandler\n- **类型**：`Function`\n  \n- **默认值**：`null`\n\n- **详情**：     \n  \n  当进入某个路由时，如果路由对应的页面不属于可见资源列表，则会暂停进入，调用 `unAccessHandler` 函数。\n- **参数**\n  - router：createRouter 创建的路由实例\n  - to： 准备进入的路由\n  - from：离开的路由\n  - next： [next函数](https://next.router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%8F%AF%E9%80%89%E7%9A%84%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0-next)\n\n比如：\n```js\nexport const access = {\n    unAccessHandler({ to, next }) {\n        const accesssIds = accessApi.getAccess();\n        if (to.path === '/404') {\n            acces"}},{"format":"less","foundDate":1638413755945,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/styles/reset.less","start":{"line":1,"column":1,"position":0},"end":{"line":142,"column":2,"position":412},"range":[0,1647],"fragment":"@charset \"UTF-8\";\n\n// 所有元素为border-box\n* {\n    box-sizing: border-box;\n}\n\nhtml {\n    -webkit-text-size-adjust: 100%;\n    -ms-text-size-adjust: 100%;\n}\n\nbody,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nul,\nol,\nli,\ndl,\ndd,\np,\nform,\nth,\ntd,\nfieldset,\nlegend,\nblockquote,\nbutton,\ninput,\nselect,\ntextarea {\n    margin: 0;\n    padding: 0;\n}\n\nbody,\nbutton,\ninput,\nselect,\ntextarea {\n    font: 14*@PX/1.5 tahoma, arial, \"Hiragino Sans GB\", \"Microsoft YaHei\";\n}\n\n\nbody {\n    color: @txt-color;\n    background-color: @bg-color;\n    font-size: 14px;\n    word-wrap: break-word;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    font-size: 100%;\n    font-weight: normal;\n}\n\nol,\nul {\n    list-style: none;\n}\n\nimg {\n    border: 0;\n    vertical-align: middle;\n}\n\naddress,\ncite,\ndfn,\nem,\ni,\nvar {\n    font-style: normal;\n}\n\na {\n    text-decoration: none;\n    cursor: pointer;\n}\n\na:hover {\n    text-decoration: none;\n}\n\na:focus {\n    outline: none;\n}\n\ntable {\n    border-spacing: 0;\n    word-wrap: break-word;\n    border-collapse: separate;\n}\n\ninput,\nselect,\nbutton {\n    outline: none;\n    vertical-align: middle;\n}\n\ninput[type='search']::-webkit-search-decoration,\ninput[type='search']::-webkit-search-cancel-button,\ninput[type='search']::-webkit-search-results-button,\ninput[type='search']::-webkit-search-results-decoration {\n    display: none;\n}\n\ninput::-ms-clear {\n    display: none;\n}\n\nselect::-ms-expand {\n    display: none;\n}\n\nbutton,\ninput,\nselect,\ntextarea {\n    margin: 0;\n    font-size: 100%;\n    font-family: inherit;\n    outline-offset: 0;\n    outline-style: none;\n    outline-width: 0;\n    background-image: none;\n}\n\ninput[readonly],\ntextarea[readonly] {\n    background-color: #F1F1F1;\n}"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/create-fes-app/templates/app/h5/src/styles/reset.less","start":{"line":1,"column":1,"position":0},"end":{"line":142,"column":2,"position":412},"range":[0,1647],"fragment":"@charset \"UTF-8\";\n\n// 所有元素为border-box\n* {\n    box-sizing: border-box;\n}\n\nhtml {\n    -webkit-text-size-adjust: 100%;\n    -ms-text-size-adjust: 100%;\n}\n\nbody,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nul,\nol,\nli,\ndl,\ndd,\np,\nform,\nth,\ntd,\nfieldset,\nlegend,\nblockquote,\nbutton,\ninput,\nselect,\ntextarea {\n    margin: 0;\n    padding: 0;\n}\n\nbody,\nbutton,\ninput,\nselect,\ntextarea {\n    font: 14*@PX/1.5 tahoma, arial, \"Hiragino Sans GB\", \"Microsoft YaHei\";\n}\n\n\nbody {\n    color: @txt-color;\n    background-color: @bg-color;\n    font-size: 14px;\n    word-wrap: break-word;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    font-size: 100%;\n    font-weight: normal;\n}\n\nol,\nul {\n    list-style: none;\n}\n\nimg {\n    border: 0;\n    vertical-align: middle;\n}\n\naddress,\ncite,\ndfn,\nem,\ni,\nvar {\n    font-style: normal;\n}\n\na {\n    text-decoration: none;\n    cursor: pointer;\n}\n\na:hover {\n    text-decoration: none;\n}\n\na:focus {\n    outline: none;\n}\n\ntable {\n    border-spacing: 0;\n    word-wrap: break-word;\n    border-collapse: separate;\n}\n\ninput,\nselect,\nbutton {\n    outline: none;\n    vertical-align: middle;\n}\n\ninput[type='search']::-webkit-search-decoration,\ninput[type='search']::-webkit-search-cancel-button,\ninput[type='search']::-webkit-search-results-button,\ninput[type='search']::-webkit-search-results-decoration {\n    display: none;\n}\n\ninput::-ms-clear {\n    display: none;\n}\n\nselect::-ms-expand {\n    display: none;\n}\n\nbutton,\ninput,\nselect,\ntextarea {\n    margin: 0;\n    font-size: 100%;\n    font-family: inherit;\n    outline-offset: 0;\n    outline-style: none;\n    outline-width: 0;\n    background-image: none;\n}\n\ninput[readonly],\ntextarea[readonly] {\n    background-color: #F1F1F1;\n}"}},{"format":"less","foundDate":1638413755947,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/styles/common.less","start":{"line":1,"column":1,"position":0},"end":{"line":45,"column":2,"position":270},"range":[0,916],"fragment":"a,\nimg {\n    -webkit-touch-callout: none;\n}\n\nhtml {\n    touch-action: manipulation; // 处理 IOS10+，click点击 300ms 问题\n}\nbody {\n    background-color: #f7f7f7;\n}\n\ninput {\n    line-height: normal;\n    border: none;\n}\n\na {\n    color: #0af;\n    text-decoration: none;\n}\n\n* {\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\n/* 适配 iPhone X 顶部填充*/\n@supports (top: env(safe-area-inset-top)){\n    body,\n    .alien-screen-header {\n        padding-top: constant(safe-area-inset-top, 40px);\n        padding-top: env(safe-area-inset-top, 40px);\n        padding-top: var(safe-area-inset-top, 40px);\n    }\n}\n\n/* 判断iPhoneX 将 footer 的 padding-bottom 填充到最底部 */\n@supports (bottom: env(safe-area-inset-bottom)){\n    body,\n    .alien-screen-footer {\n        padding-bottom: constant(safe-area-inset-bottom, 20px);\n        padding-bottom: env(safe-area-inset-bottom, 20px);\n        padding-top: var(safe-area-inset-bottom, 20px);\n    }\n}"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/create-fes-app/templates/app/h5/src/styles/common.less","start":{"line":1,"column":1,"position":0},"end":{"line":45,"column":2,"position":270},"range":[0,916],"fragment":"a,\nimg {\n    -webkit-touch-callout: none;\n}\n\nhtml {\n    touch-action: manipulation; // 处理 IOS10+，click点击 300ms 问题\n}\nbody {\n    background-color: #f7f7f7;\n}\n\ninput {\n    line-height: normal;\n    border: none;\n}\n\na {\n    color: #0af;\n    text-decoration: none;\n}\n\n* {\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\n/* 适配 iPhone X 顶部填充*/\n@supports (top: env(safe-area-inset-top)){\n    body,\n    .alien-screen-header {\n        padding-top: constant(safe-area-inset-top, 40px);\n        padding-top: env(safe-area-inset-top, 40px);\n        padding-top: var(safe-area-inset-top, 40px);\n    }\n}\n\n/* 判断iPhoneX 将 footer 的 padding-bottom 填充到最底部 */\n@supports (bottom: env(safe-area-inset-bottom)){\n    body,\n    .alien-screen-footer {\n        padding-bottom: constant(safe-area-inset-bottom, 20px);\n        padding-bottom: env(safe-area-inset-bottom, 20px);\n        padding-top: var(safe-area-inset-bottom, 20px);\n    }\n}"}},{"format":"javascript","foundDate":1638413755964,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/common/utils.js","start":{"line":8,"column":1,"position":12},"end":{"line":66,"column":2,"position":668},"range":[57,2127],"fragment":"export function resetContainerHeight(dom) {\n    const originalHeight = document.body.clientHeight || document.documentElement.clientHeight;\n\n    window.onresize = function () {\n        const resizeHeight = document.documentElement.clientHeight || document.body.clientHeight;\n        if (resizeHeight < originalHeight) {\n            // 恢复内容区域高度\n            const container = document.querySelector(dom);\n            container.style.height = originalHeight;\n        }\n    };\n}\n\n\nexport function resetInputBlur() {\n    const isWechat = window.navigator.userAgent.match(/MicroMessenger\\/([\\d.]+)/i);\n    if (!isWechat) return;\n    const wechatVersion = isWechat[1];\n    const version = (navigator.appVersion).match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n\n    // 如果设备类型为iOS 12+ 和wechat 6.7.4+，恢复成原来的视口\n    if (+wechatVersion.replace(/\\./g, '') >= 674 && +version[1] >= 12) {\n        window.scrollTo(0, Math.max(document.body.clientHeight, document.documentElement.clientHeight));\n    }\n}\n\nexport function getQueryString(name) {\n    const reg = new RegExp(`(^|&)${name}=([^&]*)(&|$)`, 'i');\n    const r = window.location.search.substr(1).match(reg);\n    if (r != null) {\n        return decodeURIComponent(r[2]);\n    }\n    return null;\n}\n\nexport function simpleRequest(options) {\n    const xhr = new XMLHttpRequest();\n    xhr.timeout = 3000;\n    if (options.type === 'GET') {\n        xhr.open(options.type, options.url, options.async || true);\n        xhr.send(null);\n    } else if (options.type === 'POST') {\n        xhr.open(options.type, options.url, options.async || true);\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(JSON.stringify(options.data || {}));\n    }\n    xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n            if (xhr.status >= 200 && xhr.status < 300) {\n                options.successed(xhr.responseText);\n            } else {\n                options.failed && options.failed(xhr);\n            }\n        }\n    };\n    xhr.ontimeout = function () {\n        options.failed && options.failed(xhr);\n    };\n}"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/create-fes-app/templates/app/h5/src/common/utils.js","start":{"line":8,"column":1,"position":12},"end":{"line":66,"column":2,"position":668},"range":[57,2127],"fragment":"export function resetContainerHeight(dom) {\n    const originalHeight = document.body.clientHeight || document.documentElement.clientHeight;\n\n    window.onresize = function () {\n        const resizeHeight = document.documentElement.clientHeight || document.body.clientHeight;\n        if (resizeHeight < originalHeight) {\n            // 恢复内容区域高度\n            const container = document.querySelector(dom);\n            container.style.height = originalHeight;\n        }\n    };\n}\n\n\nexport function resetInputBlur() {\n    const isWechat = window.navigator.userAgent.match(/MicroMessenger\\/([\\d.]+)/i);\n    if (!isWechat) return;\n    const wechatVersion = isWechat[1];\n    const version = (navigator.appVersion).match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n\n    // 如果设备类型为iOS 12+ 和wechat 6.7.4+，恢复成原来的视口\n    if (+wechatVersion.replace(/\\./g, '') >= 674 && +version[1] >= 12) {\n        window.scrollTo(0, Math.max(document.body.clientHeight, document.documentElement.clientHeight));\n    }\n}\n\nexport function getQueryString(name) {\n    const reg = new RegExp(`(^|&)${name}=([^&]*)(&|$)`, 'i');\n    const r = window.location.search.substr(1).match(reg);\n    if (r != null) {\n        return decodeURIComponent(r[2]);\n    }\n    return null;\n}\n\nexport function simpleRequest(options) {\n    const xhr = new XMLHttpRequest();\n    xhr.timeout = 3000;\n    if (options.type === 'GET') {\n        xhr.open(options.type, options.url, options.async || true);\n        xhr.send(null);\n    } else if (options.type === 'POST') {\n        xhr.open(options.type, options.url, options.async || true);\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(JSON.stringify(options.data || {}));\n    }\n    xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n            if (xhr.status >= 200 && xhr.status < 300) {\n                options.successed(xhr.responseText);\n            } else {\n                options.failed && options.failed(xhr);\n            }\n        }\n    };\n    xhr.ontimeout = function () {\n        options.failed && options.failed(xhr);\n    };\n}"}},{"format":"javascript","foundDate":1638413755977,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/stores/user.js","start":{"line":6,"column":9,"position":40},"end":{"line":23,"column":2,"position":156},"range":[107,461],"fragment":"count: 0\n    }),\n    mutations: {\n        increment(state) {\n            state.count++;\n        }\n    },\n    getters: {\n        doubleCount(state) {\n            return state.count * 2;\n        }\n    },\n    actions: {\n        asyncIncrement({ commit }) {\n            setTimeout(() => {\n                commit('increment');\n            }, 2000);\n        },"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/stores/foo/bar.js","start":{"line":4,"column":9,"position":26},"end":{"line":22,"column":2,"position":144},"range":[67,426],"fragment":"count: 0\n    }),\n    mutations: {\n        increment(state) {\n            state.count++;\n        }\n    },\n    getters: {\n        doubleCount(state) {\n            return state.count * 2;\n        }\n    },\n    actions: {\n        asyncIncrement({ commit }) {\n            setTimeout(() => {\n                commit('increment');\n            }, 2000);\n        }\n    }"}},{"format":"javascript","foundDate":1638413755979,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/stores/counter.js","start":{"line":1,"column":1,"position":0},"end":{"line":23,"column":2,"position":147},"range":[0,429],"fragment":"export default {\n    namespaced: true,\n    state: () => ({\n        count: 0\n    }),\n    mutations: {\n        increment(state) {\n            state.count++;\n        }\n    },\n    getters: {\n        doubleCount(state) {\n            return state.count * 2;\n        }\n    },\n    actions: {\n        asyncIncrement({ commit }) {\n            setTimeout(() => {\n                commit('increment');\n            }, 2000);\n        }\n    }\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/stores/foo/bar.js","start":{"line":1,"column":1,"position":0},"end":{"line":23,"column":2,"position":147},"range":[0,429],"fragment":"export default {\n    namespaced: true,\n    state: () => ({\n        count: 0\n    }),\n    mutations: {\n        increment(state) {\n            state.count++;\n        }\n    },\n    getters: {\n        doubleCount(state) {\n            return state.count * 2;\n        }\n    },\n    actions: {\n        asyncIncrement({ commit }) {\n            setTimeout(() => {\n                commit('increment');\n            }, 2000);\n        }\n    }\n};"}},{"format":"javascript","foundDate":1638413756000,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/fes.js","start":{"line":14,"column":2,"position":78},"end":{"line":89,"column":2,"position":698},"range":[322,2305],"fragment":";\n\nconst renderClient = (opts = {}) => {\n    const { plugin, routes, rootElement, initialState } = opts;\n    const rootContainer = plugin.applyPlugins({\n        type: ApplyPluginsType.modify,\n        key: 'rootContainer',\n        initialValue: defineComponent(() => () => (<RouterView></RouterView>)),\n        args: {\n            routes: routes,\n            plugin: plugin\n        }\n    });\n\n    const app = createApp(rootContainer);\n    app.provide(\"initialState\", initialState);\n\n    plugin.applyPlugins({\n        key: 'onAppCreated',\n        type: ApplyPluginsType.event,\n        args: { app, routes },\n    });\n\n    if (rootElement) {\n        app.mount(rootElement);\n    }\n    return app;\n}\n\nconst beforeRender = async ({rootElement}) => {\n    const beforeRenderConfig = plugin.applyPlugins({\n        key: \"beforeRender\",\n        type: ApplyPluginsType.modify,\n        initialValue: {\n            loading: null,\n            action: null\n        },\n    });\n    let initialState = {};\n    if (typeof beforeRenderConfig.action === \"function\") {\n        const app = createApp(beforeRenderConfig.loading);\n        app.mount(rootElement);\n        try {\n            initialState = await beforeRenderConfig.action();\n        } catch(e){\n            console.error(`[fes] beforeRender执行出现异常：`);\n            console.error(e);\n        }\n        app.unmount();\n    }\n    return initialState;\n};\n\nconst getClientRender = (args = {}) => plugin.applyPlugins({\n  key: 'render',\n  type: ApplyPluginsType.compose,\n  initialValue: async () => {\n    const opts = plugin.applyPlugins({\n      key: 'modifyClientRenderOpts',\n      type: ApplyPluginsType.modify,\n      initialValue: {\n        routes: args.routes || getRoutes(),\n        plugin,\n        rootElement: '#app',\n        defaultTitle: ``,\n      },\n    });\n    const initialState = await beforeRender(opts); \n    return renderClient({...opts, initialState});\n  },\n  args,\n});\n\nconst clientRender = getClientRender();\n\nconst app = clientRender();"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/fes.js","start":{"line":10,"column":23,"position":65},"end":{"line":89,"column":2,"position":689},"range":[274,2261],"fragment":";\n\n\n\n\n\nconst renderClient = (opts = {}) => {\n    const { plugin, routes, rootElement, initialState } = opts;\n    const rootContainer = plugin.applyPlugins({\n        type: ApplyPluginsType.modify,\n        key: 'rootContainer',\n        initialValue: defineComponent(() => () => (<RouterView></RouterView>)),\n        args: {\n            routes: routes,\n            plugin: plugin\n        }\n    });\n\n    const app = createApp(rootContainer);\n    app.provide(\"initialState\", initialState);\n\n    plugin.applyPlugins({\n        key: 'onAppCreated',\n        type: ApplyPluginsType.event,\n        args: { app, routes },\n    });\n\n    if (rootElement) {\n        app.mount(rootElement);\n    }\n    return app;\n}\n\nconst beforeRender = async ({rootElement}) => {\n    const beforeRenderConfig = plugin.applyPlugins({\n        key: \"beforeRender\",\n        type: ApplyPluginsType.modify,\n        initialValue: {\n            loading: null,\n            action: null\n        },\n    });\n    let initialState = {};\n    if (typeof beforeRenderConfig.action === \"function\") {\n        const app = createApp(beforeRenderConfig.loading);\n        app.mount(rootElement);\n        try {\n            initialState = await beforeRenderConfig.action();\n        } catch(e){\n            console.error(`[fes] beforeRender执行出现异常：`);\n            console.error(e);\n        }\n        app.unmount();\n    }\n    return initialState;\n};\n\nconst getClientRender = (args = {}) => plugin.applyPlugins({\n  key: 'render',\n  type: ApplyPluginsType.compose,\n  initialValue: async () => {\n    const opts = plugin.applyPlugins({\n      key: 'modifyClientRenderOpts',\n      type: ApplyPluginsType.modify,\n      initialValue: {\n        routes: args.routes || getRoutes(),\n        plugin,\n        rootElement: '#app',\n        defaultTitle: ``,\n      },\n    });\n    const initialState = await beforeRender(opts); \n    return renderClient({...opts, initialState});\n  },\n  args,\n});\n\nconst clientRender = getClientRender();\n\nconst app = clientRender();"}},{"format":"javascript","foundDate":1638413756035,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-request/src/template/throttle.js","start":{"line":2,"column":1,"position":1},"end":{"line":16,"column":2,"position":140},"range":[1,383],"fragment":"const throttleMap = new Map();\n\nexport default async (ctx, next) => {\n    if (ctx.config.throttle) {\n        if (throttleMap.get(ctx.key) >= Date.now()) {\n            ctx.error = {\n                type: 'FREQUENTLY',\n                msg: '请求过于频繁'\n            };\n            return;\n        }\n    }\n    await next();\n    throttleMap.set(ctx.key, Date.now() + ctx.config.throttle);\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/throttle.js","start":{"line":2,"column":1,"position":1},"end":{"line":16,"column":2,"position":140},"range":[1,383],"fragment":"const throttleMap = new Map();\n\nexport default async (ctx, next) => {\n    if (ctx.config.throttle) {\n        if (throttleMap.get(ctx.key) >= Date.now()) {\n            ctx.error = {\n                type: 'FREQUENTLY',\n                msg: '请求过于频繁'\n            };\n            return;\n        }\n    }\n    await next();\n    throttleMap.set(ctx.key, Date.now() + ctx.config.throttle);\n};"}},{"format":"javascript","foundDate":1638413756036,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-request/src/template/setDataField.js","start":{"line":1,"column":1,"position":0},"end":{"line":11,"column":2,"position":134},"range":[0,378],"fragment":"import { isObject } from './helpers';\n\n// FEATURE: 后续支持 a.b.c\nexport default async (ctx, next) => {\n    const dataField = ctx.config.dataField ?? ctx.dataField;\n    if (!ctx.error && ctx.response && isObject(ctx.response.data) && dataField) {\n        ctx.response._rawData = ctx.response.data;\n        ctx.response.data = ctx.response.data[dataField];\n    }\n    await next();\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/setDataField.js","start":{"line":1,"column":1,"position":0},"end":{"line":11,"column":2,"position":134},"range":[0,378],"fragment":"import { isObject } from './helpers';\n\n// FEATURE: 后续支持 a.b.c\nexport default async (ctx, next) => {\n    const dataField = ctx.config.dataField ?? ctx.dataField;\n    if (!ctx.error && ctx.response && isObject(ctx.response.data) && dataField) {\n        ctx.response._rawData = ctx.response.data;\n        ctx.response.data = ctx.response.data[dataField];\n    }\n    await next();\n};"}},{"format":"javascript","foundDate":1638413756039,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-request/src/template/scheduler.js","start":{"line":2,"column":1,"position":1},"end":{"line":33,"column":2,"position":307},"range":[1,952],"fragment":"class Scheduler {\n    constructor() {\n        this.middlewares = [];\n    }\n\n    use(fn) {\n        if (typeof fn !== 'function') throw new TypeError('middleware must be a function!');\n        this.middlewares.push(fn);\n        return this;\n    }\n\n    compose() {\n        return (context, next) => {\n            let index = -1;\n            const dispatch = (i) => {\n                if (i <= index) return Promise.reject(new Error('next() called multiple times'));\n                index = i;\n                let fn = this.middlewares[i];\n                if (index === this.middlewares.length) fn = next;\n                if (!fn) return Promise.resolve();\n                try {\n                    return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\n                } catch (e) {\n                    return Promise.reject(e);\n                }\n            };\n            return dispatch(0);\n        };\n    }\n}\n\nexport default new Scheduler();"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/scheduler.js","start":{"line":2,"column":1,"position":1},"end":{"line":33,"column":2,"position":307},"range":[1,952],"fragment":"class Scheduler {\n    constructor() {\n        this.middlewares = [];\n    }\n\n    use(fn) {\n        if (typeof fn !== 'function') throw new TypeError('middleware must be a function!');\n        this.middlewares.push(fn);\n        return this;\n    }\n\n    compose() {\n        return (context, next) => {\n            let index = -1;\n            const dispatch = (i) => {\n                if (i <= index) return Promise.reject(new Error('next() called multiple times'));\n                index = i;\n                let fn = this.middlewares[i];\n                if (index === this.middlewares.length) fn = next;\n                if (!fn) return Promise.resolve();\n                try {\n                    return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\n                } catch (e) {\n                    return Promise.reject(e);\n                }\n            };\n            return dispatch(0);\n        };\n    }\n}\n\nexport default new Scheduler();"}},{"format":"javascript","foundDate":1638413756040,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-request/src/template/resErrorProcess.js","start":{"line":1,"column":1,"position":0},"end":{"line":17,"column":2,"position":133},"range":[0,387],"fragment":"import { isObject } from './helpers';\n\n// 错误处理等副作用网上提\nexport default async (ctx, next) => {\n    const {\n        response,\n        config\n    } = ctx;\n    if (!config.closeResDataCheck && response && isObject(response.data)) {\n        const code = response.data.code;\n        if (code !== '0') {\n            ctx.error = response; // code 不为零进入 reject\n        }\n    }\n\n    await next();\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/resErrorProcess.js","start":{"line":1,"column":1,"position":0},"end":{"line":17,"column":2,"position":133},"range":[0,387],"fragment":"import { isObject } from './helpers';\n\n// 错误处理等副作用网上提\nexport default async (ctx, next) => {\n    const {\n        response,\n        config\n    } = ctx;\n    if (!config.closeResDataCheck && response && isObject(response.data)) {\n        const code = response.data.code;\n        if (code !== '0') {\n            ctx.error = response; // code 不为零进入 reject\n        }\n    }\n\n    await next();\n};"}},{"format":"javascript","foundDate":1638413756041,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-request/src/template/resDataAdaptor.js","start":{"line":1,"column":1,"position":0},"end":{"line":8,"column":2,"position":107},"range":[0,326],"fragment":"import { isFunction, isObject, isString } from './helpers';\n\nexport default async ({ response, responseDataAdaptor }, next) => {\n    if (isFunction(responseDataAdaptor) && response && (isObject(response.data) || isString(response.data))) {\n        response.data = responseDataAdaptor(response.data);\n    }\n    await next();\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/resDataAdaptor.js","start":{"line":1,"column":1,"position":0},"end":{"line":8,"column":2,"position":107},"range":[0,326],"fragment":"import { isFunction, isObject, isString } from './helpers';\n\nexport default async ({ response, responseDataAdaptor }, next) => {\n    if (isFunction(responseDataAdaptor) && response && (isObject(response.data) || isString(response.data))) {\n        response.data = responseDataAdaptor(response.data);\n    }\n    await next();\n};"}},{"format":"javascript","foundDate":1638413756048,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-request/src/template/request.js","start":{"line":1,"column":13,"position":7},"end":{"line":84,"column":19,"position":620},"range":[30,2358],"fragment":";\nimport { ApplyPluginsType, plugin } from '@fesjs/fes';\nimport { ref } from 'vue';\nimport scheduler from './scheduler';\nimport {\n    checkHttpRequestHasBody,\n    isFunction\n} from './helpers';\n\nimport setDataField from './setDataField';\nimport paramsProcess from './paramsProcess';\nimport genRequestKey from './genRequestKey';\nimport preventRepeatReq from './preventRepeatReq';\nimport throttle from './throttle';\nimport cacheControl from './cacheControl';\nimport resDataAdaptor from './resDataAdaptor';\nimport resErrorProcess from './resErrorProcess';\n\nfunction addInterceptors(instance, interceptors, type = 'request') {\n    interceptors.forEach((fn) => {\n        if (Array.isArray(fn)) {\n            instance.interceptors[type].use(...fn);\n        } else if (isFunction(fn)) {\n            instance.interceptors[type].use(fn);\n        }\n    });\n}\n\nfunction addRequestInterceptors(instance, interceptors) {\n    addInterceptors(instance, interceptors, 'request');\n}\n\nfunction addResponseInterceptors(instance, interceptors) {\n    addInterceptors(instance, interceptors, 'response');\n}\n\nasync function axiosMiddleware(context, next) {\n    try {\n        context.response = await context.instance.request(context.config);\n    } catch (error) {\n        context.error = error;\n    }\n    await next();\n}\n\nfunction getRequestInstance() {\n    const {\n        responseDataAdaptor,\n        requestInterceptors = [],\n        responseInterceptors = [],\n        errorHandler,\n        ...otherConfigs\n    } = plugin.applyPlugins({\n        key: 'request',\n        type: ApplyPluginsType.modify,\n        initialValue: {}\n    });\n\n    const defaultConfig = Object.assign({\n        timeout: 10000,\n        withCredentials: true\n    }, otherConfigs);\n    const instance = axios.create(defaultConfig);\n\n    addRequestInterceptors(instance, requestInterceptors);\n    addResponseInterceptors(instance, responseInterceptors);\n\n    // 洋葱模型内部应该这是对数据的处理，避免有副作用调用\n    scheduler\n        .use(paramsProcess)\n        .use(genRequestKey)\n        .use(cacheControl)\n        .use(preventRepeatReq)\n        .use(throttle)\n        .use(axiosMiddleware)\n        .use(resDataAdaptor)\n        .use(resErrorProcess)\n        .use(setDataField);\n\n    return {\n        context: {\n            instance,\n            defaultConfig,\n            dataField: REPLACE_DATA_FIELD"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/request.js","start":{"line":1,"column":45,"position":7},"end":{"line":84,"column":9,"position":620},"range":[62,2380],"fragment":";\nimport { ApplyPluginsType, plugin } from '@fesjs/fes';\nimport { ref } from 'vue';\nimport scheduler from './scheduler';\nimport {\n    checkHttpRequestHasBody,\n    isFunction\n} from './helpers';\n\nimport setDataField from './setDataField';\nimport paramsProcess from './paramsProcess';\nimport genRequestKey from './genRequestKey';\nimport preventRepeatReq from './preventRepeatReq';\nimport throttle from './throttle';\nimport cacheControl from './cacheControl';\nimport resDataAdaptor from './resDataAdaptor';\nimport resErrorProcess from './resErrorProcess';\n\nfunction addInterceptors(instance, interceptors, type = 'request') {\n    interceptors.forEach((fn) => {\n        if (Array.isArray(fn)) {\n            instance.interceptors[type].use(...fn);\n        } else if (isFunction(fn)) {\n            instance.interceptors[type].use(fn);\n        }\n    });\n}\n\nfunction addRequestInterceptors(instance, interceptors) {\n    addInterceptors(instance, interceptors, 'request');\n}\n\nfunction addResponseInterceptors(instance, interceptors) {\n    addInterceptors(instance, interceptors, 'response');\n}\n\nasync function axiosMiddleware(context, next) {\n    try {\n        context.response = await context.instance.request(context.config);\n    } catch (error) {\n        context.error = error;\n    }\n    await next();\n}\n\nfunction getRequestInstance() {\n    const {\n        responseDataAdaptor,\n        requestInterceptors = [],\n        responseInterceptors = [],\n        errorHandler,\n        ...otherConfigs\n    } = plugin.applyPlugins({\n        key: 'request',\n        type: ApplyPluginsType.modify,\n        initialValue: {}\n    });\n\n    const defaultConfig = Object.assign({\n        timeout: 10000,\n        withCredentials: true\n    }, otherConfigs);\n    const instance = axios.create(defaultConfig);\n\n    addRequestInterceptors(instance, requestInterceptors);\n    addResponseInterceptors(instance, responseInterceptors);\n\n    // 洋葱模型内部应该这是对数据的处理，避免有副作用调用\n    scheduler\n        .use(paramsProcess)\n        .use(genRequestKey)\n        .use(cacheControl)\n        .use(preventRepeatReq)\n        .use(throttle)\n        .use(axiosMiddleware)\n        .use(resDataAdaptor)\n        .use(resErrorProcess)\n        .use(setDataField);\n\n    return {\n        context: {\n            instance,\n            defaultConfig,\n            dataField: \"result\""}},{"format":"javascript","foundDate":1638413756050,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-request/src/template/request.js","start":{"line":84,"column":19,"position":621},"end":{"line":99,"column":14,"position":722},"range":[2358,2720],"fragment":", // eslint-disable-line\n            responseDataAdaptor,\n            errorHandler\n        },\n        request: scheduler.compose()\n    };\n}\n\n// DEPRECATED 废弃，使用 axios baseURL\nfunction handleApiPathBase(url, options = {}) {\n    if (url.startsWith('http')) return url;\n\n    if (options.base) {\n        return `${options.base}${url}`;\n    }\n    return `REPLACE_BASE"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/request.js","start":{"line":84,"column":9,"position":621},"end":{"line":99,"column":10,"position":722},"range":[2380,2738],"fragment":", // eslint-disable-line\n            responseDataAdaptor,\n            errorHandler\n        },\n        request: scheduler.compose()\n    };\n}\n\n// DEPRECATED 废弃，使用 axios baseURL\nfunction handleApiPathBase(url, options = {}) {\n    if (url.startsWith('http')) return url;\n\n    if (options.base) {\n        return `${options.base}${url}`;\n    }\n    return `/ras-mas"}},{"format":"javascript","foundDate":1638413756051,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-request/src/template/request.js","start":{"line":99,"column":14,"position":723},"end":{"line":218,"column":2,"position":1763},"range":[2720,5817],"fragment":"${url}`;\n}\n\nfunction userConfigHandler(url, data, options = {}) {\n    options.url = handleApiPathBase(url, options);\n    options.method = (options.method || 'post').toUpperCase();\n    if (checkHttpRequestHasBody(options.method)) {\n        options.data = data;\n    } else {\n        options.params = data;\n    }\n    return options;\n}\n\nlet currentRequestInstance = null;\n\nfunction createContext(userConfig) {\n    return {\n        ...currentRequestInstance.context,\n        config: {\n            ...currentRequestInstance.context.defaultConfig,\n            ...userConfig\n        }\n    };\n}\n\n\nfunction getResponseCode(response) {\n    if (response) {\n        if (response._rawData) return response._rawData.code;\n        if (response.data) return response.data.code;\n    }\n    return null;\n}\n\nfunction skipErrorHandlerToObj(skipErrorHandler = []) {\n    if (!Array.isArray(skipErrorHandler)) {\n        skipErrorHandler = [skipErrorHandler];\n    }\n\n    return skipErrorHandler.reduce((acc, cur) => {\n        acc[cur] = true;\n        return acc;\n    }, {});\n}\n\nfunction handleRequestError({\n    errorHandler = {},\n    error,\n    response,\n    config\n}) {\n    // 跳过所有错误类型处理\n    if (config.skipErrorHandler === true) return;\n\n    const skipObj = skipErrorHandlerToObj(config.skipErrorHandler);\n    const resCode = getResponseCode(response);\n\n    let errorKey = 'default';\n    if (resCode && errorHandler[resCode]) {\n        errorKey = resCode;\n    } else if (error.type && errorHandler[error.type]) {\n        errorKey = error.type;\n    } else if (error.response && errorHandler[error.response.status]) {\n        errorKey = error.response.status;\n    }\n\n    if (!skipObj[errorKey] && errorHandler[errorKey]) {\n        return errorHandler[errorKey](error);\n    }\n}\n\nexport const request = (url, data, options = {}) => {\n    if (typeof options === 'string') {\n        options = {\n            method: options\n        };\n    }\n    if (!currentRequestInstance) {\n        currentRequestInstance = getRequestInstance();\n    }\n    const userConfig = userConfigHandler(url, data, options);\n    const context = createContext(userConfig);\n\n    return currentRequestInstance.request(context).then(async () => {\n        if (!context.error) {\n            return context.config.useResonse ? context.response : context.response.data;\n        }\n        await handleRequestError(context);\n        return Promise.reject(context.error);\n    });\n};\n\nfunction isPromiseLike(obj) {\n    return !!obj && typeof obj === 'object' && typeof obj.then === 'function';\n}\n\nexport const useRequest = (url, data, options = {}) => {\n    const loadingRef = ref(true);\n    const errorRef = ref(null);\n    const dataRef = ref(null);\n    let promise;\n    if (isPromiseLike(url)) {\n        promise = url;\n    } else {\n        promise = request(url, data, options);\n    }\n    promise.then((res) => {\n        dataRef.value = res;\n    }).catch((error) => {\n        errorRef.value = error;\n    }).finally(() => {\n        loadingRef.value = false;\n    });\n    return {\n        loading: loadingRef,\n        error: errorRef,\n        data: dataRef\n    };\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/request.js","start":{"line":99,"column":10,"position":723},"end":{"line":218,"column":2,"position":1763},"range":[2738,5835],"fragment":"${url}`;\n}\n\nfunction userConfigHandler(url, data, options = {}) {\n    options.url = handleApiPathBase(url, options);\n    options.method = (options.method || 'post').toUpperCase();\n    if (checkHttpRequestHasBody(options.method)) {\n        options.data = data;\n    } else {\n        options.params = data;\n    }\n    return options;\n}\n\nlet currentRequestInstance = null;\n\nfunction createContext(userConfig) {\n    return {\n        ...currentRequestInstance.context,\n        config: {\n            ...currentRequestInstance.context.defaultConfig,\n            ...userConfig\n        }\n    };\n}\n\n\nfunction getResponseCode(response) {\n    if (response) {\n        if (response._rawData) return response._rawData.code;\n        if (response.data) return response.data.code;\n    }\n    return null;\n}\n\nfunction skipErrorHandlerToObj(skipErrorHandler = []) {\n    if (!Array.isArray(skipErrorHandler)) {\n        skipErrorHandler = [skipErrorHandler];\n    }\n\n    return skipErrorHandler.reduce((acc, cur) => {\n        acc[cur] = true;\n        return acc;\n    }, {});\n}\n\nfunction handleRequestError({\n    errorHandler = {},\n    error,\n    response,\n    config\n}) {\n    // 跳过所有错误类型处理\n    if (config.skipErrorHandler === true) return;\n\n    const skipObj = skipErrorHandlerToObj(config.skipErrorHandler);\n    const resCode = getResponseCode(response);\n\n    let errorKey = 'default';\n    if (resCode && errorHandler[resCode]) {\n        errorKey = resCode;\n    } else if (error.type && errorHandler[error.type]) {\n        errorKey = error.type;\n    } else if (error.response && errorHandler[error.response.status]) {\n        errorKey = error.response.status;\n    }\n\n    if (!skipObj[errorKey] && errorHandler[errorKey]) {\n        return errorHandler[errorKey](error);\n    }\n}\n\nexport const request = (url, data, options = {}) => {\n    if (typeof options === 'string') {\n        options = {\n            method: options\n        };\n    }\n    if (!currentRequestInstance) {\n        currentRequestInstance = getRequestInstance();\n    }\n    const userConfig = userConfigHandler(url, data, options);\n    const context = createContext(userConfig);\n\n    return currentRequestInstance.request(context).then(async () => {\n        if (!context.error) {\n            return context.config.useResonse ? context.response : context.response.data;\n        }\n        await handleRequestError(context);\n        return Promise.reject(context.error);\n    });\n};\n\nfunction isPromiseLike(obj) {\n    return !!obj && typeof obj === 'object' && typeof obj.then === 'function';\n}\n\nexport const useRequest = (url, data, options = {}) => {\n    const loadingRef = ref(true);\n    const errorRef = ref(null);\n    const dataRef = ref(null);\n    let promise;\n    if (isPromiseLike(url)) {\n        promise = url;\n    } else {\n        promise = request(url, data, options);\n    }\n    promise.then((res) => {\n        dataRef.value = res;\n    }).catch((error) => {\n        errorRef.value = error;\n    }).finally(() => {\n        loadingRef.value = false;\n    });\n    return {\n        loading: loadingRef,\n        error: errorRef,\n        data: dataRef\n    };\n};"}},{"format":"javascript","foundDate":1638413756056,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-request/src/template/preventRepeatReq.js","start":{"line":1,"column":1,"position":0},"end":{"line":64,"column":2,"position":546},"range":[0,1644],"fragment":"const requestMap = new Map();\n\nconst mergeRequestMap = new Map();\nconst requestQueue = new Map();\n\nfunction handleCachingStart(ctx) {\n    const isRequesting = mergeRequestMap.get(ctx.key);\n    if (isRequesting) {\n        return new Promise((resolve) => {\n            const queue = requestQueue.get(ctx.key) || [];\n            requestQueue.set(ctx.key, queue.concat(resolve));\n        });\n    }\n    mergeRequestMap.set(ctx.key, true);\n}\n\nfunction handleRepeatRequest(ctx) {\n    const queue = requestQueue.get(ctx.key);\n    if (queue && queue.length > 0) {\n        queue.forEach((resolve) => {\n            if (ctx.error) {\n                resolve({\n                    error: ctx.error\n                });\n            } else {\n                resolve({\n                    response: ctx.response\n                });\n            }\n        });\n    }\n    requestQueue.delete(ctx.key);\n    mergeRequestMap.delete(ctx.key);\n}\n\nexport default async (ctx, next) => {\n    if (ctx.config.mergeRequest) {\n        const result = await handleCachingStart(ctx);\n        if (result) {\n            Object.keys(result).forEach((key) => {\n                ctx[key] = result[key];\n            });\n            return;\n        }\n    } else {\n        if (requestMap.get(ctx.key) && !ctx.config.mergeRequest) {\n            ctx.error = {\n                type: 'REPEAT',\n                msg: '重复请求',\n                config: ctx.config\n            };\n            return;\n        }\n        requestMap.set(ctx.key, true);\n    }\n\n    await next();\n\n    if (ctx.config.mergeRequest) {\n        handleRepeatRequest(ctx);\n    } else {\n        requestMap.delete(ctx.key);\n    }\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/preventRepeatReq.js","start":{"line":1,"column":1,"position":0},"end":{"line":64,"column":2,"position":546},"range":[0,1644],"fragment":"const requestMap = new Map();\n\nconst mergeRequestMap = new Map();\nconst requestQueue = new Map();\n\nfunction handleCachingStart(ctx) {\n    const isRequesting = mergeRequestMap.get(ctx.key);\n    if (isRequesting) {\n        return new Promise((resolve) => {\n            const queue = requestQueue.get(ctx.key) || [];\n            requestQueue.set(ctx.key, queue.concat(resolve));\n        });\n    }\n    mergeRequestMap.set(ctx.key, true);\n}\n\nfunction handleRepeatRequest(ctx) {\n    const queue = requestQueue.get(ctx.key);\n    if (queue && queue.length > 0) {\n        queue.forEach((resolve) => {\n            if (ctx.error) {\n                resolve({\n                    error: ctx.error\n                });\n            } else {\n                resolve({\n                    response: ctx.response\n                });\n            }\n        });\n    }\n    requestQueue.delete(ctx.key);\n    mergeRequestMap.delete(ctx.key);\n}\n\nexport default async (ctx, next) => {\n    if (ctx.config.mergeRequest) {\n        const result = await handleCachingStart(ctx);\n        if (result) {\n            Object.keys(result).forEach((key) => {\n                ctx[key] = result[key];\n            });\n            return;\n        }\n    } else {\n        if (requestMap.get(ctx.key) && !ctx.config.mergeRequest) {\n            ctx.error = {\n                type: 'REPEAT',\n                msg: '重复请求',\n                config: ctx.config\n            };\n            return;\n        }\n        requestMap.set(ctx.key, true);\n    }\n\n    await next();\n\n    if (ctx.config.mergeRequest) {\n        handleRepeatRequest(ctx);\n    } else {\n        requestMap.delete(ctx.key);\n    }\n};"}},{"format":"javascript","foundDate":1638413756058,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-request/src/template/paramsProcess.js","start":{"line":1,"column":1,"position":0},"end":{"line":11,"column":2,"position":97},"range":[0,283],"fragment":"import { checkHttpRequestHasBody, trimObj } from './helpers';\n\nexport default async (ctx, next) => {\n    const config = ctx.config;\n    if (checkHttpRequestHasBody(config.method)) {\n        trimObj(config.data);\n    } else {\n        trimObj(config.params);\n    }\n    await next();\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/paramsProcess.js","start":{"line":1,"column":1,"position":0},"end":{"line":11,"column":2,"position":97},"range":[0,283],"fragment":"import { checkHttpRequestHasBody, trimObj } from './helpers';\n\nexport default async (ctx, next) => {\n    const config = ctx.config;\n    if (checkHttpRequestHasBody(config.method)) {\n        trimObj(config.data);\n    } else {\n        trimObj(config.params);\n    }\n    await next();\n};"}},{"format":"javascript","foundDate":1638413756059,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-request/src/template/helpers.js","start":{"line":5,"column":1,"position":2},"end":{"line":90,"column":2,"position":596},"range":[41,2028],"fragment":"export function typeOf(obj) {\n    const map = {\n        '[object Boolean]': 'boolean',\n        '[object Number]': 'number',\n        '[object String]': 'string',\n        '[object Function]': 'function',\n        '[object Array]': 'array',\n        '[object Date]': 'date',\n        '[object RegExp]': 'regExp',\n        '[object Undefined]': 'undefined',\n        '[object Null]': 'null',\n        '[object Object]': 'object',\n        '[object URLSearchParams]': 'URLSearchParams'\n    };\n    return map[Object.prototype.toString.call(obj)];\n}\n\nexport function isFunction(obj) {\n    return typeOf(obj) === 'function';\n}\n\nexport function isDate(obj) {\n    return typeOf(obj) === 'date';\n}\n\nexport function isString(obj) {\n    return typeOf(obj) === 'string';\n}\n\nexport function isArray(obj) {\n    return typeOf(obj) === 'array';\n}\n\nexport function isObject(obj) {\n    return typeOf(obj) === 'object';\n}\n\nexport function isURLSearchParams(obj) {\n    return typeOf(obj) === 'URLSearchParams';\n}\n\n// eslint-disable-next-line\nexport const isUndefined = val => val === undefined;\n\nexport const isDefined = val => val != null;\n\n\nexport function checkHttpRequestHasBody(method) {\n    method = method.toUpperCase();\n    const HTTP_METHOD = {\n        GET: {\n            request_body: false\n        },\n        POST: {\n            request_body: true\n        },\n        PUT: {\n            request_body: true\n        },\n        DELETE: {\n            request_body: true\n        },\n        HEAD: {\n            request_body: false\n        },\n        OPTIONS: {\n            request_body: false\n        },\n        PATCH: {\n            request_body: true\n        }\n    };\n    return HTTP_METHOD[method].request_body;\n}\n\nexport function trimObj(obj) {\n    if (isObject(obj)) {\n        Object.entries(obj).forEach(([key, value]) => {\n            if (isString(value)) {\n                obj[key] = value.trim();\n            } else if (isObject(value)) {\n                trimObj(value);\n            }\n        });\n    }\n}"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/helpers.js","start":{"line":5,"column":1,"position":2},"end":{"line":90,"column":2,"position":596},"range":[41,2028],"fragment":"export function typeOf(obj) {\n    const map = {\n        '[object Boolean]': 'boolean',\n        '[object Number]': 'number',\n        '[object String]': 'string',\n        '[object Function]': 'function',\n        '[object Array]': 'array',\n        '[object Date]': 'date',\n        '[object RegExp]': 'regExp',\n        '[object Undefined]': 'undefined',\n        '[object Null]': 'null',\n        '[object Object]': 'object',\n        '[object URLSearchParams]': 'URLSearchParams'\n    };\n    return map[Object.prototype.toString.call(obj)];\n}\n\nexport function isFunction(obj) {\n    return typeOf(obj) === 'function';\n}\n\nexport function isDate(obj) {\n    return typeOf(obj) === 'date';\n}\n\nexport function isString(obj) {\n    return typeOf(obj) === 'string';\n}\n\nexport function isArray(obj) {\n    return typeOf(obj) === 'array';\n}\n\nexport function isObject(obj) {\n    return typeOf(obj) === 'object';\n}\n\nexport function isURLSearchParams(obj) {\n    return typeOf(obj) === 'URLSearchParams';\n}\n\n// eslint-disable-next-line\nexport const isUndefined = val => val === undefined;\n\nexport const isDefined = val => val != null;\n\n\nexport function checkHttpRequestHasBody(method) {\n    method = method.toUpperCase();\n    const HTTP_METHOD = {\n        GET: {\n            request_body: false\n        },\n        POST: {\n            request_body: true\n        },\n        PUT: {\n            request_body: true\n        },\n        DELETE: {\n            request_body: true\n        },\n        HEAD: {\n            request_body: false\n        },\n        OPTIONS: {\n            request_body: false\n        },\n        PATCH: {\n            request_body: true\n        }\n    };\n    return HTTP_METHOD[method].request_body;\n}\n\nexport function trimObj(obj) {\n    if (isObject(obj)) {\n        Object.entries(obj).forEach(([key, value]) => {\n            if (isString(value)) {\n                obj[key] = value.trim();\n            } else if (isObject(value)) {\n                trimObj(value);\n            }\n        });\n    }\n}"}},{"format":"javascript","foundDate":1638413756068,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-request/src/template/cacheControl.js","start":{"line":1,"column":1,"position":0},"end":{"line":209,"column":2,"position":1521},"range":[0,5546],"fragment":"import {\n    isObject, isString, isURLSearchParams, checkHttpRequestHasBody\n} from './helpers';\n/**\n * 缓存实现的功能\n * 1. 唯一定位一个请求（url, data | params, method）\n *      其中请求参数根据请求方法使用其中一个就够了\n *      一个请求同时包含 data | params 参数的设计本身不合理\n *      不对这种情况进行兼容\n * 2. 控制缓存内容的大小，localStorage 只有5M\n * 3. 控制缓存时间\n *      session(存在内存中)\n *      expireTime 存在localStoreage 中\n * 4. 成功的、且响应内容为json的请求进行缓存\n */\n\n/**\n * 配置数据\n * type: 'ram' | 'sessionStorage' | 'localStorage'\n * cacheTime: ''\n */\n\n\n/**\n * 缓存数据结构\n * cache: {\n *      url: 'url', // 缓存 url\n *      data: data, // 数据\n *      expire: '' // 缓存时间\n * }\n */\n\n/**\n * 请求参数可以为如下类型\n * - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n * - Browser only: FormData, File, Blob\n * 只缓存参数类型为: string、plain object、URLSearchParams 或者无参数的 请求\n */\n\nconst CACHE_KEY_PREFIX = '__FES_REQUEST_CACHE:';\nconst CACHE_TYPE = {\n    ram: 'ram',\n    session: 'sessionStorage',\n    local: 'localStorage'\n};\n\nconst CACHE_DATA_MAP = new Map();\n\nfunction genInnerKey(key, cacheType = 'ram') {\n    if (cacheType !== CACHE_TYPE.ram) {\n        return `${CACHE_KEY_PREFIX}${key}`;\n    }\n    return key;\n}\n\nfunction canCache(data) {\n    return !data || isObject(data) || isString(data) || Array.isArray(data) || isURLSearchParams(data);\n}\n\nfunction setCacheData({\n    key,\n    cacheType = 'ram',\n    data,\n    cacheTime = 1000 * 60 * 3\n}) {\n    const _key = genInnerKey(key, cacheType);\n\n    const currentCacheData = {\n        cacheType,\n        data,\n        cacheTime,\n        expire: Date.now() + cacheTime\n    };\n    if (cacheType !== CACHE_TYPE.ram) {\n        const cacheInstance = window[CACHE_TYPE[cacheType]];\n        try {\n            cacheInstance.setItem(_key, JSON.stringify(currentCacheData));\n        } catch (e) {\n            // setItem 出现异常，清理缓存\n            for (const item in cacheInstance) {\n                if (item.startsWith(CACHE_KEY_PREFIX) && Object.prototype.hasOwnProperty.call(cacheInstance, item)) {\n                    cacheInstance.removeItem(item);\n                }\n            }\n        }\n    } else {\n        CACHE_DATA_MAP.set(_key, currentCacheData);\n    }\n}\n\nfunction isExpire({ expire, cacheTime }) {\n    if (!cacheTime || expire >= Date.now()) {\n        return false;\n    }\n    return true;\n}\n\nfunction getCacheData({ key, cacheType = 'ram' }) {\n    const _key = genInnerKey(key, cacheType);\n    if (cacheType !== CACHE_TYPE.ram) {\n        const cacheInstance = window[CACHE_TYPE[cacheType]];\n        const text = cacheInstance.getItem(_key) || null;\n        try {\n            const currentCacheData = JSON.parse(text);\n            if (currentCacheData && !isExpire(currentCacheData)) {\n                return currentCacheData.data;\n            }\n            cacheInstance.removeItem(_key);\n            return null;\n        } catch (e) {\n            cacheInstance.removeItem(_key);\n            return null;\n        }\n    } else {\n        const currentCacheData = CACHE_DATA_MAP.get(_key);\n        if (currentCacheData && !isExpire(currentCacheData)) {\n            return currentCacheData.data;\n        }\n        CACHE_DATA_MAP.delete(_key);\n        return null;\n    }\n}\n\n// 存储缓存队列\nconst cacheStartFlag = new Map();\nconst cachingQueue = new Map();\n\n/**\n * 等上一次请求结果\n * 1. 如果上一次请求成功，直接使用上一次的请求结果\n * 2. 如果上一次请求失败，重启本次请求\n */\nfunction handleCachingStart(ctx, config) {\n    const _key = genInnerKey(ctx.key, config.cache.cacheType);\n    const caching = cacheStartFlag.get(_key);\n    if (caching) {\n        return new Promise((resolve) => {\n            const queue = cachingQueue.get(_key) || [];\n            cachingQueue.set(_key, queue.concat(resolve));\n        });\n    }\n    cacheStartFlag.set(_key, true);\n}\n\n// 有请求成功的\nfunction handleCachingQueueSuccess(ctx, config) {\n    // 移除首次缓存 flag\n    const _key = genInnerKey(ctx.key, config.cache.cacheType);\n    const queue = cachingQueue.get(_key);\n    if (queue && queue.length > 0) {\n        queue.forEach((resolve) => {\n            resolve({\n                response: ctx.response\n            });\n        });\n    }\n    cachingQueue.delete(_key);\n    cacheStartFlag.delete(_key);\n}\n\n// 处理请求失败\nfunction handleCachingQueueError(ctx, config) {\n    const _key = genInnerKey(ctx.key, config.cache.cacheType);\n    const queue = cachingQueue.get(_key);\n    if (queue && queue.length > 0) {\n        const firstResolve = queue.shift();\n        firstResolve();\n        cachingQueue.set(_key, queue);\n    } else {\n        cachingQueue.delete(_key);\n        cacheStartFlag.delete(_key);\n    }\n}\n\nexport default async (ctx, next) => {\n    const { config } = ctx;\n    if (config.cache) {\n        const cacheData = getCacheData({ key: ctx.key, cacheType: config.cache.cacheType });\n        if (cacheData) {\n            ctx.response = {\n                data: cacheData\n            };\n            return;\n        }\n        const result = await handleCachingStart(ctx, config);\n        if (result) {\n            Object.keys(result).forEach((key) => {\n                ctx[key] = result[key];\n            });\n            return;\n        }\n    }\n    await next();\n\n    if (config.cache) {\n        const requestdata = checkHttpRequestHasBody(config.method) ? config.data : config.params;\n        if (!ctx.error && ctx.response && canCache(requestdata) && canCache(ctx.response.data)) {\n            handleCachingQueueSuccess(ctx, config);\n\n            setCacheData({\n                key: ctx.key,\n                data: ctx.response.data,\n                ...config.cache\n            });\n        } else {\n            handleCachingQueueError(ctx, config);\n        }\n    }\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/src/.fes/plugin-request/cacheControl.js","start":{"line":1,"column":1,"position":0},"end":{"line":209,"column":2,"position":1521},"range":[0,5546],"fragment":"import {\n    isObject, isString, isURLSearchParams, checkHttpRequestHasBody\n} from './helpers';\n/**\n * 缓存实现的功能\n * 1. 唯一定位一个请求（url, data | params, method）\n *      其中请求参数根据请求方法使用其中一个就够了\n *      一个请求同时包含 data | params 参数的设计本身不合理\n *      不对这种情况进行兼容\n * 2. 控制缓存内容的大小，localStorage 只有5M\n * 3. 控制缓存时间\n *      session(存在内存中)\n *      expireTime 存在localStoreage 中\n * 4. 成功的、且响应内容为json的请求进行缓存\n */\n\n/**\n * 配置数据\n * type: 'ram' | 'sessionStorage' | 'localStorage'\n * cacheTime: ''\n */\n\n\n/**\n * 缓存数据结构\n * cache: {\n *      url: 'url', // 缓存 url\n *      data: data, // 数据\n *      expire: '' // 缓存时间\n * }\n */\n\n/**\n * 请求参数可以为如下类型\n * - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n * - Browser only: FormData, File, Blob\n * 只缓存参数类型为: string、plain object、URLSearchParams 或者无参数的 请求\n */\n\nconst CACHE_KEY_PREFIX = '__FES_REQUEST_CACHE:';\nconst CACHE_TYPE = {\n    ram: 'ram',\n    session: 'sessionStorage',\n    local: 'localStorage'\n};\n\nconst CACHE_DATA_MAP = new Map();\n\nfunction genInnerKey(key, cacheType = 'ram') {\n    if (cacheType !== CACHE_TYPE.ram) {\n        return `${CACHE_KEY_PREFIX}${key}`;\n    }\n    return key;\n}\n\nfunction canCache(data) {\n    return !data || isObject(data) || isString(data) || Array.isArray(data) || isURLSearchParams(data);\n}\n\nfunction setCacheData({\n    key,\n    cacheType = 'ram',\n    data,\n    cacheTime = 1000 * 60 * 3\n}) {\n    const _key = genInnerKey(key, cacheType);\n\n    const currentCacheData = {\n        cacheType,\n        data,\n        cacheTime,\n        expire: Date.now() + cacheTime\n    };\n    if (cacheType !== CACHE_TYPE.ram) {\n        const cacheInstance = window[CACHE_TYPE[cacheType]];\n        try {\n            cacheInstance.setItem(_key, JSON.stringify(currentCacheData));\n        } catch (e) {\n            // setItem 出现异常，清理缓存\n            for (const item in cacheInstance) {\n                if (item.startsWith(CACHE_KEY_PREFIX) && Object.prototype.hasOwnProperty.call(cacheInstance, item)) {\n                    cacheInstance.removeItem(item);\n                }\n            }\n        }\n    } else {\n        CACHE_DATA_MAP.set(_key, currentCacheData);\n    }\n}\n\nfunction isExpire({ expire, cacheTime }) {\n    if (!cacheTime || expire >= Date.now()) {\n        return false;\n    }\n    return true;\n}\n\nfunction getCacheData({ key, cacheType = 'ram' }) {\n    const _key = genInnerKey(key, cacheType);\n    if (cacheType !== CACHE_TYPE.ram) {\n        const cacheInstance = window[CACHE_TYPE[cacheType]];\n        const text = cacheInstance.getItem(_key) || null;\n        try {\n            const currentCacheData = JSON.parse(text);\n            if (currentCacheData && !isExpire(currentCacheData)) {\n                return currentCacheData.data;\n            }\n            cacheInstance.removeItem(_key);\n            return null;\n        } catch (e) {\n            cacheInstance.removeItem(_key);\n            return null;\n        }\n    } else {\n        const currentCacheData = CACHE_DATA_MAP.get(_key);\n        if (currentCacheData && !isExpire(currentCacheData)) {\n            return currentCacheData.data;\n        }\n        CACHE_DATA_MAP.delete(_key);\n        return null;\n    }\n}\n\n// 存储缓存队列\nconst cacheStartFlag = new Map();\nconst cachingQueue = new Map();\n\n/**\n * 等上一次请求结果\n * 1. 如果上一次请求成功，直接使用上一次的请求结果\n * 2. 如果上一次请求失败，重启本次请求\n */\nfunction handleCachingStart(ctx, config) {\n    const _key = genInnerKey(ctx.key, config.cache.cacheType);\n    const caching = cacheStartFlag.get(_key);\n    if (caching) {\n        return new Promise((resolve) => {\n            const queue = cachingQueue.get(_key) || [];\n            cachingQueue.set(_key, queue.concat(resolve));\n        });\n    }\n    cacheStartFlag.set(_key, true);\n}\n\n// 有请求成功的\nfunction handleCachingQueueSuccess(ctx, config) {\n    // 移除首次缓存 flag\n    const _key = genInnerKey(ctx.key, config.cache.cacheType);\n    const queue = cachingQueue.get(_key);\n    if (queue && queue.length > 0) {\n        queue.forEach((resolve) => {\n            resolve({\n                response: ctx.response\n            });\n        });\n    }\n    cachingQueue.delete(_key);\n    cacheStartFlag.delete(_key);\n}\n\n// 处理请求失败\nfunction handleCachingQueueError(ctx, config) {\n    const _key = genInnerKey(ctx.key, config.cache.cacheType);\n    const queue = cachingQueue.get(_key);\n    if (queue && queue.length > 0) {\n        const firstResolve = queue.shift();\n        firstResolve();\n        cachingQueue.set(_key, queue);\n    } else {\n        cachingQueue.delete(_key);\n        cacheStartFlag.delete(_key);\n    }\n}\n\nexport default async (ctx, next) => {\n    const { config } = ctx;\n    if (config.cache) {\n        const cacheData = getCacheData({ key: ctx.key, cacheType: config.cache.cacheType });\n        if (cacheData) {\n            ctx.response = {\n                data: cacheData\n            };\n            return;\n        }\n        const result = await handleCachingStart(ctx, config);\n        if (result) {\n            Object.keys(result).forEach((key) => {\n                ctx[key] = result[key];\n            });\n            return;\n        }\n    }\n    await next();\n\n    if (config.cache) {\n        const requestdata = checkHttpRequestHasBody(config.method) ? config.data : config.params;\n        if (!ctx.error && ctx.response && canCache(requestdata) && canCache(ctx.response.data)) {\n            handleCachingQueueSuccess(ctx, config);\n\n            setCacheData({\n                key: ctx.key,\n                data: ctx.response.data,\n                ...config.cache\n            });\n        } else {\n            handleCachingQueueError(ctx, config);\n        }\n    }\n};"}},{"format":"javascript","foundDate":1638413756178,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-locale/src/runtime/langUConfigMap.js","start":{"line":1,"column":1,"position":0},"end":{"line":314,"column":2,"position":1930},"range":[0,6101],"fragment":"export default {\n    'ar-EG': {\n        lang: 'ar-EG',\n        label: 'العربية',\n        icon: '🇪🇬',\n        title: 'لغة'\n    },\n    'az-AZ': {\n        lang: 'az-AZ',\n        label: 'Azərbaycan dili',\n        icon: '🇦🇿',\n        title: 'Dil'\n    },\n    'bg-BG': {\n        lang: 'bg-BG',\n        label: 'Български език',\n        icon: '🇧🇬',\n        title: 'език'\n    },\n    'ca-ES': {\n        lang: 'ca-ES',\n        label: 'Catalá',\n        icon: '🇨🇦',\n        title: 'llengua'\n    },\n    'cs-CZ': {\n        lang: 'cs-CZ',\n        label: 'Čeština',\n        icon: '🇨🇿',\n        title: 'Jazyk'\n    },\n    'da-DK': {\n        lang: 'da-DK',\n        label: 'Dansk',\n        icon: '🇩🇰',\n        title: 'Sprog'\n    },\n    'de-DE': {\n        lang: 'de-DE',\n        label: 'Deutsch',\n        icon: '🇩🇪',\n        title: 'Sprache'\n    },\n    'el-GR': {\n        lang: 'el-GR',\n        label: 'Ελληνικά',\n        icon: '🇬🇷',\n        title: 'Γλώσσα'\n    },\n    'en-GB': {\n        lang: 'en-GB',\n        label: 'English',\n        icon: '🇬🇧',\n        title: 'Language'\n    },\n    'en-US': {\n        lang: 'en-US',\n        label: 'English',\n        icon: '🇺🇸',\n        title: 'Language'\n    },\n    'es-ES': {\n        lang: 'es-ES',\n        label: 'Español',\n        icon: '🇪🇸',\n        title: 'Idioma'\n    },\n    'et-EE': {\n        lang: 'et-EE',\n        label: 'Eesti',\n        icon: '🇪🇪',\n        title: 'Keel'\n    },\n    'fa-IR': {\n        lang: 'fa-IR',\n        label: 'فارسی',\n        icon: '🇮🇷',\n        title: 'زبان'\n    },\n    'fi-FI': {\n        lang: 'fi-FI',\n        label: 'Suomi',\n        icon: '🇫🇮',\n        title: 'Kieli'\n    },\n    'fr-BE': {\n        lang: 'fr-BE',\n        label: 'Français',\n        icon: '🇧🇪',\n        title: 'Langue'\n    },\n    'fr-FR': {\n        lang: 'fr-FR',\n        label: 'Français',\n        icon: '🇫🇷',\n        title: 'Langue'\n    },\n    'ga-IE': {\n        lang: 'ga-IE',\n        label: 'Gaeilge',\n        icon: '🇮🇪',\n        title: 'Teanga'\n    },\n    'he-IL': {\n        lang: 'he-IL',\n        label: 'עברית',\n        icon: '🇮🇱',\n        title: 'שפה'\n    },\n    'hi-IN': {\n        lang: 'hi-IN',\n        label: 'हिन्दी, हिंदी',\n        icon: '🇮🇳',\n        title: 'भाषा: हिन्दी'\n    },\n    'hr-HR': {\n        lang: 'hr-HR',\n        label: 'Hrvatski jezik',\n        icon: '🇭🇷',\n        title: 'Jezik'\n    },\n    'hu-HU': {\n        lang: 'hu-HU',\n        label: 'Magyar',\n        icon: '🇭🇺',\n        title: 'Nyelv'\n    },\n    'hy-AM': {\n        lang: 'hu-HU',\n        label: 'Հայերեն',\n        icon: '🇦🇲',\n        title: 'Լեզու'\n    },\n    'id-ID': {\n        lang: 'id-ID',\n        label: 'Bahasa Indonesia',\n        icon: '🇮🇩',\n        title: 'Bahasa'\n    },\n    'it-IT': {\n        lang: 'it-IT',\n        label: 'Italiano',\n        icon: '🇮🇹',\n        title: 'Linguaggio'\n    },\n    'is-IS': {\n        lang: 'is-IS',\n        label: 'Íslenska',\n        icon: '🇮🇸',\n        title: 'Tungumál'\n    },\n    'ja-JP': {\n        lang: 'ja-JP',\n        label: '日本語',\n        icon: '🇯🇵',\n        title: '言語'\n    },\n    'ku-IQ': {\n        lang: 'ku-IQ',\n        label: 'کوردی',\n        icon: '🇮🇶',\n        title: 'Ziman'\n    },\n    'kn-IN': {\n        lang: 'zh-TW',\n        label: 'ಕನ್ನಡ',\n        icon: '🇮🇳',\n        title: 'ಭಾಷೆ'\n    },\n    'ko-KR': {\n        lang: 'ko-KR',\n        label: '한국어',\n        icon: '🇰🇷',\n        title: '언어'\n    },\n    'lv-LV': {\n        lang: 'lv-LV',\n        label: 'Latviešu valoda',\n        icon: '🇱🇮',\n        title: 'Kalba'\n    },\n    'mk-MK': {\n        lang: 'mk-MK',\n        label: 'македонски јазик',\n        icon: '🇲🇰',\n        title: 'Јазик'\n    },\n    'mn-MN': {\n        lang: 'mn-MN',\n        label: 'Монгол хэл',\n        icon: '🇲🇳',\n        title: 'Хэл'\n    },\n    'ms-MY': {\n        lang: 'ms-MY',\n        label: 'بهاس ملايو‎',\n        icon: '🇲🇾',\n        title: 'Bahasa'\n    },\n    'nb-NO': {\n        lang: 'nb-NO',\n        label: 'Norsk',\n        icon: '🇳🇴',\n        title: 'Språk'\n    },\n    'ne-NP': {\n        lang: 'ne-NP',\n        label: 'नेपाली',\n        icon: '🇳🇵',\n        title: 'भाषा'\n    },\n    'nl-BE': {\n        lang: 'nl-BE',\n        label: 'Vlaams',\n        icon: '🇧🇪',\n        title: 'Taal'\n    },\n    'nl-NL': {\n        lang: 'nl-NL',\n        label: 'Vlaams',\n        icon: '🇳🇱',\n        title: 'Taal'\n    },\n    'pt-BR': {\n        lang: 'pt-BR',\n        label: 'Português',\n        icon: '🇧🇷',\n        title: 'Idiomas'\n    },\n    'pt-PT': {\n        lang: 'pt-PT',\n        label: 'Português',\n        icon: '🇵🇹',\n        title: 'Idiomas'\n    },\n    'ro-RO': {\n        lang: 'ro-RO',\n        label: 'Română',\n        icon: '🇷🇴',\n        title: 'Limba'\n    },\n    'ru-RU': {\n        lang: 'ru-RU',\n        label: 'русский',\n        icon: '🇷🇺',\n        title: 'язык'\n    },\n    'sk-SK': {\n        lang: 'sk-SK',\n        label: 'Slovenčina',\n        icon: '🇸🇰',\n        title: 'Jazyk'\n    },\n    'sr-RS': {\n        lang: 'sr-RS',\n        label: 'српски језик',\n        icon: '🇸🇷',\n        title: 'Језик'\n    },\n    'sl-SI': {\n        lang: 'sl-SI',\n        label: 'Slovenščina',\n        icon: '🇸🇱',\n        title: 'Jezik'\n    },\n    'sv-SE': {\n        lang: 'sv-SE',\n        label: 'Svenska',\n        icon: '🇸🇪',\n        title: 'Språk'\n    },\n    'ta-IN': {\n        lang: 'ta-IN',\n        label: 'தமிழ்',\n        icon: '🇮🇳',\n        title: 'மொழி'\n    },\n    'th-TH': {\n        lang: 'th-TH',\n        label: 'ไทย',\n        icon: '🇹🇭',\n        title: 'ภาษา'\n    },\n    'tr-TR': {\n        lang: 'tr-TR',\n        label: 'Türkçe',\n        icon: '🇹🇷',\n        title: 'Dil'\n    },\n    'uk-UA': {\n        lang: 'uk-UA',\n        label: 'Українська',\n        icon: '🇺🇰',\n        title: 'Мова'\n    },\n    'vi-VN': {\n        lang: 'vi-VN',\n        label: 'Tiếng Việt',\n        icon: '🇻🇳',\n        title: 'Ngôn ngữ'\n    },\n    'zh-CN': {\n        lang: 'zh-CN',\n        label: '简体中文',\n        icon: '🇨🇳',\n        title: '语言'\n    },\n    'zh-TW': {\n        lang: 'zh-TW',\n        label: '繁体中文',\n        icon: '🇭🇰',\n        title: '語言'\n    }\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-locale/langUConfigMap.js","start":{"line":1,"column":1,"position":0},"end":{"line":314,"column":2,"position":1930},"range":[0,6101],"fragment":"export default {\n    'ar-EG': {\n        lang: 'ar-EG',\n        label: 'العربية',\n        icon: '🇪🇬',\n        title: 'لغة'\n    },\n    'az-AZ': {\n        lang: 'az-AZ',\n        label: 'Azərbaycan dili',\n        icon: '🇦🇿',\n        title: 'Dil'\n    },\n    'bg-BG': {\n        lang: 'bg-BG',\n        label: 'Български език',\n        icon: '🇧🇬',\n        title: 'език'\n    },\n    'ca-ES': {\n        lang: 'ca-ES',\n        label: 'Catalá',\n        icon: '🇨🇦',\n        title: 'llengua'\n    },\n    'cs-CZ': {\n        lang: 'cs-CZ',\n        label: 'Čeština',\n        icon: '🇨🇿',\n        title: 'Jazyk'\n    },\n    'da-DK': {\n        lang: 'da-DK',\n        label: 'Dansk',\n        icon: '🇩🇰',\n        title: 'Sprog'\n    },\n    'de-DE': {\n        lang: 'de-DE',\n        label: 'Deutsch',\n        icon: '🇩🇪',\n        title: 'Sprache'\n    },\n    'el-GR': {\n        lang: 'el-GR',\n        label: 'Ελληνικά',\n        icon: '🇬🇷',\n        title: 'Γλώσσα'\n    },\n    'en-GB': {\n        lang: 'en-GB',\n        label: 'English',\n        icon: '🇬🇧',\n        title: 'Language'\n    },\n    'en-US': {\n        lang: 'en-US',\n        label: 'English',\n        icon: '🇺🇸',\n        title: 'Language'\n    },\n    'es-ES': {\n        lang: 'es-ES',\n        label: 'Español',\n        icon: '🇪🇸',\n        title: 'Idioma'\n    },\n    'et-EE': {\n        lang: 'et-EE',\n        label: 'Eesti',\n        icon: '🇪🇪',\n        title: 'Keel'\n    },\n    'fa-IR': {\n        lang: 'fa-IR',\n        label: 'فارسی',\n        icon: '🇮🇷',\n        title: 'زبان'\n    },\n    'fi-FI': {\n        lang: 'fi-FI',\n        label: 'Suomi',\n        icon: '🇫🇮',\n        title: 'Kieli'\n    },\n    'fr-BE': {\n        lang: 'fr-BE',\n        label: 'Français',\n        icon: '🇧🇪',\n        title: 'Langue'\n    },\n    'fr-FR': {\n        lang: 'fr-FR',\n        label: 'Français',\n        icon: '🇫🇷',\n        title: 'Langue'\n    },\n    'ga-IE': {\n        lang: 'ga-IE',\n        label: 'Gaeilge',\n        icon: '🇮🇪',\n        title: 'Teanga'\n    },\n    'he-IL': {\n        lang: 'he-IL',\n        label: 'עברית',\n        icon: '🇮🇱',\n        title: 'שפה'\n    },\n    'hi-IN': {\n        lang: 'hi-IN',\n        label: 'हिन्दी, हिंदी',\n        icon: '🇮🇳',\n        title: 'भाषा: हिन्दी'\n    },\n    'hr-HR': {\n        lang: 'hr-HR',\n        label: 'Hrvatski jezik',\n        icon: '🇭🇷',\n        title: 'Jezik'\n    },\n    'hu-HU': {\n        lang: 'hu-HU',\n        label: 'Magyar',\n        icon: '🇭🇺',\n        title: 'Nyelv'\n    },\n    'hy-AM': {\n        lang: 'hu-HU',\n        label: 'Հայերեն',\n        icon: '🇦🇲',\n        title: 'Լեզու'\n    },\n    'id-ID': {\n        lang: 'id-ID',\n        label: 'Bahasa Indonesia',\n        icon: '🇮🇩',\n        title: 'Bahasa'\n    },\n    'it-IT': {\n        lang: 'it-IT',\n        label: 'Italiano',\n        icon: '🇮🇹',\n        title: 'Linguaggio'\n    },\n    'is-IS': {\n        lang: 'is-IS',\n        label: 'Íslenska',\n        icon: '🇮🇸',\n        title: 'Tungumál'\n    },\n    'ja-JP': {\n        lang: 'ja-JP',\n        label: '日本語',\n        icon: '🇯🇵',\n        title: '言語'\n    },\n    'ku-IQ': {\n        lang: 'ku-IQ',\n        label: 'کوردی',\n        icon: '🇮🇶',\n        title: 'Ziman'\n    },\n    'kn-IN': {\n        lang: 'zh-TW',\n        label: 'ಕನ್ನಡ',\n        icon: '🇮🇳',\n        title: 'ಭಾಷೆ'\n    },\n    'ko-KR': {\n        lang: 'ko-KR',\n        label: '한국어',\n        icon: '🇰🇷',\n        title: '언어'\n    },\n    'lv-LV': {\n        lang: 'lv-LV',\n        label: 'Latviešu valoda',\n        icon: '🇱🇮',\n        title: 'Kalba'\n    },\n    'mk-MK': {\n        lang: 'mk-MK',\n        label: 'македонски јазик',\n        icon: '🇲🇰',\n        title: 'Јазик'\n    },\n    'mn-MN': {\n        lang: 'mn-MN',\n        label: 'Монгол хэл',\n        icon: '🇲🇳',\n        title: 'Хэл'\n    },\n    'ms-MY': {\n        lang: 'ms-MY',\n        label: 'بهاس ملايو‎',\n        icon: '🇲🇾',\n        title: 'Bahasa'\n    },\n    'nb-NO': {\n        lang: 'nb-NO',\n        label: 'Norsk',\n        icon: '🇳🇴',\n        title: 'Språk'\n    },\n    'ne-NP': {\n        lang: 'ne-NP',\n        label: 'नेपाली',\n        icon: '🇳🇵',\n        title: 'भाषा'\n    },\n    'nl-BE': {\n        lang: 'nl-BE',\n        label: 'Vlaams',\n        icon: '🇧🇪',\n        title: 'Taal'\n    },\n    'nl-NL': {\n        lang: 'nl-NL',\n        label: 'Vlaams',\n        icon: '🇳🇱',\n        title: 'Taal'\n    },\n    'pt-BR': {\n        lang: 'pt-BR',\n        label: 'Português',\n        icon: '🇧🇷',\n        title: 'Idiomas'\n    },\n    'pt-PT': {\n        lang: 'pt-PT',\n        label: 'Português',\n        icon: '🇵🇹',\n        title: 'Idiomas'\n    },\n    'ro-RO': {\n        lang: 'ro-RO',\n        label: 'Română',\n        icon: '🇷🇴',\n        title: 'Limba'\n    },\n    'ru-RU': {\n        lang: 'ru-RU',\n        label: 'русский',\n        icon: '🇷🇺',\n        title: 'язык'\n    },\n    'sk-SK': {\n        lang: 'sk-SK',\n        label: 'Slovenčina',\n        icon: '🇸🇰',\n        title: 'Jazyk'\n    },\n    'sr-RS': {\n        lang: 'sr-RS',\n        label: 'српски језик',\n        icon: '🇸🇷',\n        title: 'Језик'\n    },\n    'sl-SI': {\n        lang: 'sl-SI',\n        label: 'Slovenščina',\n        icon: '🇸🇱',\n        title: 'Jezik'\n    },\n    'sv-SE': {\n        lang: 'sv-SE',\n        label: 'Svenska',\n        icon: '🇸🇪',\n        title: 'Språk'\n    },\n    'ta-IN': {\n        lang: 'ta-IN',\n        label: 'தமிழ்',\n        icon: '🇮🇳',\n        title: 'மொழி'\n    },\n    'th-TH': {\n        lang: 'th-TH',\n        label: 'ไทย',\n        icon: '🇹🇭',\n        title: 'ภาษา'\n    },\n    'tr-TR': {\n        lang: 'tr-TR',\n        label: 'Türkçe',\n        icon: '🇹🇷',\n        title: 'Dil'\n    },\n    'uk-UA': {\n        lang: 'uk-UA',\n        label: 'Українська',\n        icon: '🇺🇰',\n        title: 'Мова'\n    },\n    'vi-VN': {\n        lang: 'vi-VN',\n        label: 'Tiếng Việt',\n        icon: '🇻🇳',\n        title: 'Ngôn ngữ'\n    },\n    'zh-CN': {\n        lang: 'zh-CN',\n        label: '简体中文',\n        icon: '🇨🇳',\n        title: '语言'\n    },\n    'zh-TW': {\n        lang: 'zh-TW',\n        label: '繁体中文',\n        icon: '🇭🇰',\n        title: '語言'\n    }\n};"}},{"format":"javascript","foundDate":1638413756191,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-layout/src/runtime/runtime.js","start":{"line":1,"column":1,"position":0},"end":{"line":71,"column":2,"position":616},"range":[0,2111],"fragment":"import { plugin, ApplyPluginsType } from '@@/core/coreExports';\n// eslint-disable-next-line import/extensions\nimport { access as accessApi } from '../plugin-access/core';\nimport Exception404 from './views/404';\nimport Exception403 from './views/403';\n\nif (!accessApi) {\n    throw new Error(\n        '[plugin-layout]: pLugin-layout depends on plugin-access，please install plugin-access first！'\n    );\n}\n\nconst handle = (type, router) => {\n    const accesssIds = accessApi.getAccess();\n    const path = `/${type}`;\n    const name = `Exception${type}`;\n    const components = {\n        404: Exception404,\n        403: Exception403\n    };\n    if (!accesssIds.includes(path)) {\n        accessApi.setAccess(accesssIds.concat([path]));\n    }\n    if (!router.hasRoute(name)) {\n        router.addRoute({ path, name, component: components[type] });\n    }\n};\n\nexport const access = memo => ({\n    unAccessHandler({\n        router, to, from, next\n    }) {\n        const runtimeConfig = plugin.applyPlugins({\n            key: 'layout',\n            type: ApplyPluginsType.modify,\n            initialValue: {}\n        });\n        if (runtimeConfig.unAccessHandler && typeof runtimeConfig.unAccessHandler === 'function') {\n            return runtimeConfig.unAccessHandler({\n                router, to, from, next\n            });\n        }\n        if (to.path === '/404') {\n            handle(404, router);\n            return next('/404');\n        }\n        handle(403, router);\n        next('/403');\n    },\n    noFoundHandler({\n        router, to, from, next\n    }) {\n        const runtimeConfig = plugin.applyPlugins({\n            key: 'layout',\n            type: ApplyPluginsType.modify,\n            initialValue: {}\n        });\n        if (runtimeConfig.noFoundHandler && typeof runtimeConfig.noFoundHandler === 'function') {\n            return runtimeConfig.noFoundHandler({\n                router, to, from, next\n            });\n        }\n        if (to.path === '/403') {\n            handle(403, router);\n            return next('/403');\n        }\n        handle(404, router);\n        next('/404');\n    },\n    ...memo\n});"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-layout/runtime.js","start":{"line":1,"column":1,"position":0},"end":{"line":71,"column":2,"position":616},"range":[0,2111],"fragment":"import { plugin, ApplyPluginsType } from '@@/core/coreExports';\n// eslint-disable-next-line import/extensions\nimport { access as accessApi } from '../plugin-access/core';\nimport Exception404 from './views/404';\nimport Exception403 from './views/403';\n\nif (!accessApi) {\n    throw new Error(\n        '[plugin-layout]: pLugin-layout depends on plugin-access，please install plugin-access first！'\n    );\n}\n\nconst handle = (type, router) => {\n    const accesssIds = accessApi.getAccess();\n    const path = `/${type}`;\n    const name = `Exception${type}`;\n    const components = {\n        404: Exception404,\n        403: Exception403\n    };\n    if (!accesssIds.includes(path)) {\n        accessApi.setAccess(accesssIds.concat([path]));\n    }\n    if (!router.hasRoute(name)) {\n        router.addRoute({ path, name, component: components[type] });\n    }\n};\n\nexport const access = memo => ({\n    unAccessHandler({\n        router, to, from, next\n    }) {\n        const runtimeConfig = plugin.applyPlugins({\n            key: 'layout',\n            type: ApplyPluginsType.modify,\n            initialValue: {}\n        });\n        if (runtimeConfig.unAccessHandler && typeof runtimeConfig.unAccessHandler === 'function') {\n            return runtimeConfig.unAccessHandler({\n                router, to, from, next\n            });\n        }\n        if (to.path === '/404') {\n            handle(404, router);\n            return next('/404');\n        }\n        handle(403, router);\n        next('/403');\n    },\n    noFoundHandler({\n        router, to, from, next\n    }) {\n        const runtimeConfig = plugin.applyPlugins({\n            key: 'layout',\n            type: ApplyPluginsType.modify,\n            initialValue: {}\n        });\n        if (runtimeConfig.noFoundHandler && typeof runtimeConfig.noFoundHandler === 'function') {\n            return runtimeConfig.noFoundHandler({\n                router, to, from, next\n            });\n        }\n        if (to.path === '/403') {\n            handle(403, router);\n            return next('/403');\n        }\n        handle(404, router);\n        next('/404');\n    },\n    ...memo\n});"}},{"format":"javascript","foundDate":1638413756234,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-access/src/runtime/runtime.js","start":{"line":1,"column":1,"position":0},"end":{"line":39,"column":2,"position":366},"range":[0,1222],"fragment":"import { plugin, ApplyPluginsType } from '@@/core/coreExports';\nimport { access, install } from './core';\n\nexport function onRouterCreated({ router }) {\n    router.beforeEach(async (to, from, next) => {\n        const runtimeConfig = plugin.applyPlugins({\n            key: 'access',\n            type: ApplyPluginsType.modify,\n            initialValue: {}\n        });\n        if (to.matched.length === 0) {\n            if (runtimeConfig.noFoundHandler && typeof runtimeConfig.noFoundHandler === 'function') {\n                return runtimeConfig.noFoundHandler({\n                    router, to, from, next\n                });\n            }\n        }\n        let path;\n        if (to.matched.length === 1) {\n            path = to.matched[0].path;\n        } else {\n            path = to.path;\n        }\n        const canRoute = await access.hasAccess(path);\n        if (canRoute) {\n            return next();\n        }\n        if (runtimeConfig.unAccessHandler && typeof runtimeConfig.unAccessHandler === 'function') {\n            return runtimeConfig.unAccessHandler({\n                router, to, from, next\n            });\n        }\n        next(false);\n    });\n}\n\nexport function onAppCreated({ app }) {\n    install(app);\n}"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-access/runtime.js","start":{"line":1,"column":1,"position":0},"end":{"line":39,"column":2,"position":366},"range":[0,1222],"fragment":"import { plugin, ApplyPluginsType } from '@@/core/coreExports';\nimport { access, install } from './core';\n\nexport function onRouterCreated({ router }) {\n    router.beforeEach(async (to, from, next) => {\n        const runtimeConfig = plugin.applyPlugins({\n            key: 'access',\n            type: ApplyPluginsType.modify,\n            initialValue: {}\n        });\n        if (to.matched.length === 0) {\n            if (runtimeConfig.noFoundHandler && typeof runtimeConfig.noFoundHandler === 'function') {\n                return runtimeConfig.noFoundHandler({\n                    router, to, from, next\n                });\n            }\n        }\n        let path;\n        if (to.matched.length === 1) {\n            path = to.matched[0].path;\n        } else {\n            path = to.path;\n        }\n        const canRoute = await access.hasAccess(path);\n        if (canRoute) {\n            return next();\n        }\n        if (runtimeConfig.unAccessHandler && typeof runtimeConfig.unAccessHandler === 'function') {\n            return runtimeConfig.unAccessHandler({\n                router, to, from, next\n            });\n        }\n        next(false);\n    });\n}\n\nexport function onAppCreated({ app }) {\n    install(app);\n}"}},{"format":"javascript","foundDate":1638413756238,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-access/src/runtime/createDirective.js","start":{"line":1,"column":1,"position":0},"end":{"line":46,"column":2,"position":429},"range":[0,1270],"fragment":"import { watch } from 'vue';\n\nconst cache = new WeakMap();\nconst setDispaly = (el, access) => {\n    if (access.value) {\n        el.style.display = el._display;\n    } else {\n        el.style.display = 'none';\n    }\n};\nexport default function createDirective(useAccess) {\n    return {\n        beforeMount(el) {\n            const ctx = {};\n            ctx.watch = (path) => {\n                el._display = el._display || el.style.display;\n                const access = useAccess(path);\n                setDispaly(el, access);\n                return watch(access, () => {\n                    setDispaly(el, access);\n                });\n            };\n            cache.set(el, ctx);\n        },\n        mounted(el, binding) {\n            const ctx = cache.get(el);\n            if (ctx.unwatch) {\n                ctx.unwatch();\n            }\n            ctx.unwatch = ctx.watch(binding.value);\n        },\n        updated(el, binding) {\n            const ctx = cache.get(el);\n            if (ctx.unwatch) {\n                ctx.unwatch();\n            }\n            ctx.unwatch = ctx.watch(binding.value);\n        },\n        beforeUnmount(el) {\n            const ctx = cache.get(el);\n            if (ctx.unwatch) {\n                ctx.unwatch();\n            }\n        }\n    };\n}"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-access/createDirective.js","start":{"line":1,"column":1,"position":0},"end":{"line":46,"column":2,"position":429},"range":[0,1270],"fragment":"import { watch } from 'vue';\n\nconst cache = new WeakMap();\nconst setDispaly = (el, access) => {\n    if (access.value) {\n        el.style.display = el._display;\n    } else {\n        el.style.display = 'none';\n    }\n};\nexport default function createDirective(useAccess) {\n    return {\n        beforeMount(el) {\n            const ctx = {};\n            ctx.watch = (path) => {\n                el._display = el._display || el.style.display;\n                const access = useAccess(path);\n                setDispaly(el, access);\n                return watch(access, () => {\n                    setDispaly(el, access);\n                });\n            };\n            cache.set(el, ctx);\n        },\n        mounted(el, binding) {\n            const ctx = cache.get(el);\n            if (ctx.unwatch) {\n                ctx.unwatch();\n            }\n            ctx.unwatch = ctx.watch(binding.value);\n        },\n        updated(el, binding) {\n            const ctx = cache.get(el);\n            if (ctx.unwatch) {\n                ctx.unwatch();\n            }\n            ctx.unwatch = ctx.watch(binding.value);\n        },\n        beforeUnmount(el) {\n            const ctx = cache.get(el);\n            if (ctx.unwatch) {\n                ctx.unwatch();\n            }\n        }\n    };\n}"}},{"format":"javascript","foundDate":1638413756240,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-plugin-access/src/runtime/createComponent.js","start":{"line":1,"column":1,"position":0},"end":{"line":7,"column":2,"position":82},"range":[0,230],"fragment":"export default function createComponent(useAccess) {\n    return (props, { slots }) => {\n        const access = useAccess(props.id);\n        if (!access.value || !slots.default) return null;\n        return slots.default();\n    };\n}"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/src/.fes/plugin-access/createComponent.js","start":{"line":1,"column":1,"position":0},"end":{"line":7,"column":2,"position":82},"range":[0,230],"fragment":"export default function createComponent(useAccess) {\n    return (props, { slots }) => {\n        const access = useAccess(props.id);\n        if (!access.value || !slots.default) return null;\n        return slots.default();\n    };\n}"}},{"format":"markdown","foundDate":1638413756412,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/reference/plugin/plugins/request.md","start":{"line":3,"column":1,"position":2},"end":{"line":212,"column":7,"position":586},"range":[2,3271],"fragment":"@fesjs/plugin-request\n\n基于 axios 封装的 request，内置防止重复请求、请求节流、错误处理等功能。\n## 启用方式\n\n在 `package.json` 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-request\": \"^2.0.0\"\n    },\n}\n```\n## 配置\n\n### 构建时配置\n\n```js\nexport default {\n    request: {\n        dataField: 'result'\n    },\n}\n```\n\n#### dataField\n\n- 类型： `string`\n- 默认值： `''`\n- 详情：\n\n    `dataField` 对应接口统一格式中的数据字段，比如接口如果统一的规范是 `{ success: boolean, result: any}` ，那么就不需要配置，这样你通过 `useRequest` 消费的时候会生成一个默认的 `formatResult`，直接返回 `result` 中的数据，方便使用。如果你的后端接口不符合这个规范，可以自行配置 `dataField`。配置为 `''`（空字符串）的时候不做处理。\n\n\n#### base(即将废弃)\n\n- 类型： `string`\n- 默认值： `''`\n- 详情：\n\n    `base` 接口前缀。 \n\n::: warning 即将废弃\n这个字段将在下个版本废弃，推荐使用 [axios baseURL](https://github.com/axios/axios)。\n:::\n\n### 运行时配置\n\n在 `app.js` 中进行运行时配置。\n \n```js\nexport const request = {\n    // 格式化 response.data (只有 response.data 类型为 object 才会调用)\n    responseDataAdaptor: (data) => {\n\n    },\n    // 关闭 response data 校验（只判断 xhr status）\n    closeResDataCheck: false,\n    // 请求拦截器\n    requestInterceptors: [],\n    // 相应拦截器\n    responseInterceptors: [],\n    // 错误处理\n    // 内部以 reponse.data.code === '0' 判断请求是否成功\n    // 若使用其他字段判断，可以使用 responseDataAdaptor 对响应数据进行格式\n    errorHandler: {\n        11199(response) {\n            // 特殊 code 处理逻辑\n        },\n        404(error) {\n        },\n        default(error) {\n            // 异常统一处理\n        }\n    },\n    // 其他 axios 配置\n    ...otherConfigs\n}\n```\n\n#### skipErrorHandler\n\n- 类型： `boolean | string | number | array<string | number>`\n- 默认值： ``\n- 详情：\n\n    指定当前请求的某些错误状态不走 `errorHandler`，单独进行处理。如果设置为 `true`，当前请求的错误处理都不走 `errorHandler`。\n\n- 示列：\n\n```js\nimport {request} from '@fesjs/fes';\n\nrequest('/api/login', null, {\n    skipErrorHandler: '110'\n}).then((res) => {\n    // do something\n}).catch((err) => {\n    // \b这里处理 code 为 110 的异常\n    // 此时 errorHandler[110] 函数不会生效，也不会执行 errorHandler.default\n})\n```\n\n\n\n## 使用\n\n### 发起一个普通 post 请求\n\n```js\nimport {request} from '@fesjs/fes';\n\nrequest('/api/login', {\n    username: 'robby',\n    password: '123456'\n}).then((res) => {\n    // do something\n}).catch((err) => {\n    // 处理异常\n})\n```\n\n### merge 重复请求\n\n连续发送多个请求，会被合并成一个请求，不会报 `REPEAT` 接口错误。\n\n当发生 `REPEAT` 请求异常，并且确保自身代码合理的情况下，可以使用该配置。\n\n```js\nimport {request} from '@fesjs/fes';\n\nrequest('/api/login', {\n    username: 'robby',\n    password: '123456'\n}, {\n    mergeRequest: true, // 在一个请求没有回来前，重复发送的请求会合并成一个请求\n}).then((res) => {\n    // do something\n}).catch((err) => {\n    // 处理异常\n})\n```\n\n### 请求节流(即将废弃)\n\n\n::: warning 即将废弃\n因为 request 的请求总会有一个 promise 结果，要么成功，要么失败，和防抖、节流的语义不一致，防抖、节流只是函数的不执行\n:::\n\n### 请求缓存\n\n```js\nimport {request} from '@fesjs/fes';\n\nrequest('/api/login', {\n    username: 'robby',\n    password: '123456'\n}, {\n    cache: {\n        cacheType: 'ram', // ram: 内存，session: sessionStorage，local：localStorage\n        cacheTime: 1000 * 60 * 3 // 缓存时间：默认3min\n    },\n}).then((res) => {\n    // do something\n}).catch((err) => {\n    // 处理异常\n})\n```\n\n若 `cache` 传 `true`，则默认使用 `ram` 缓存类型，缓存时间 3min。\n\n\n### 结合 use 使用\n\n```js\nimport {useRequest} from '@fesjs/fes';\n\n\nexport default {\n    setup() {\n        const {loading, data, error} = useRequest('/api/login', {\n            username: 'robby',\n            password: '123456'\n        })\n\n        return {\n            loading,\n            data,\n            error\n        }\n    }\n}\n``"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/plugin/plugins/request.md","start":{"line":3,"column":1,"position":2},"end":{"line":213,"column":7,"position":587},"range":[2,3272],"fragment":"@fesjs/plugin-request\n\n基于 axios 封装的 request，内置防止重复请求、请求节流、错误处理等功能。\n## 启用方式\n\n在 `package.json` 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-request\": \"^2.0.0\"\n    },\n}\n```\n## 配置\n\n### 构建时配置\n\n```js\nexport default {\n    request: {\n        dataField: 'result'\n    },\n}\n```\n\n#### dataField\n\n- 类型： `string`\n- 默认值： `''`\n- 详情：\n\n    `dataField` 对应接口统一格式中的数据字段，比如接口如果统一的规范是 `{ success: boolean, result: any}` ，那么就不需要配置，这样你通过 `useRequest` 消费的时候会生成一个默认的 `formatResult`，直接返回 `result` 中的数据，方便使用。如果你的后端接口不符合这个规范，可以自行配置 `dataField`。配置为 `''`（空字符串）的时候不做处理。\n\n\n#### base(即将废弃)\n\n- 类型： `string`\n- 默认值： `''`\n- 详情：\n\n    `base` 接口前缀。 \n\n::: warning 即将废弃\n这个字段将在下个版本废弃，推荐使用 [axios baseURL](https://github.com/axios/axios)。\n:::\n\n### 运行时配置\n\n在 `app.js` 中进行运行时配置。\n \n```js\nexport const request = {\n    // 格式化 response.data (只有 response.data 类型为 object 才会调用)\n    responseDataAdaptor: (data) => {\n\n    },\n    // 关闭 response data 校验（只判断 xhr status）\n    closeResDataCheck: false,\n    // 请求拦截器\n    requestInterceptors: [],\n    // 相应拦截器\n    responseInterceptors: [],\n    // 错误处理\n    // 内部以 reponse.data.code === '0' 判断请求是否成功\n    // 若使用其他字段判断，可以使用 responseDataAdaptor 对响应数据进行格式\n    errorHandler: {\n        11199(response) {\n            // 特殊 code 处理逻辑\n        },\n        404(error) {\n        },\n        default(error) {\n            // 异常统一处理\n        }\n    },\n    // 其他 axios 配置\n    ...otherConfigs\n}\n```\n\n#### skipErrorHandler\n\n- 类型： `boolean | string | number | array<string | number>`\n- 默认值： ``\n- 详情：\n\n    指定当前请求的某些错误状态不走 `errorHandler`，单独进行处理。如果设置为 `true`，当前请求的错误处理都不走 `errorHandler`。\n\n- 示列：\n\n```js\nimport {request} from '@fesjs/fes';\n\nrequest('/api/login', null, {\n    skipErrorHandler: '110'\n}).then((res) => {\n    // do something\n}).catch((err) => {\n    // \b这里处理 code 为 110 的异常\n    // 此时 errorHandler[110] 函数不会生效，也不会执行 errorHandler.default\n})\n```\n\n\n\n## 使用\n\n### 发起一个普通 post 请求\n\n```js\nimport {request} from '@fesjs/fes';\n\nrequest('/api/login', {\n    username: 'robby',\n    password: '123456'\n}).then((res) => {\n    // do something\n}).catch((err) => {\n    // 处理异常\n})\n```\n\n### merge 重复请求\n\n连续发送多个请求，会被合并成一个请求，不会报 `REPEAT` 接口错误。\n\n当发生 `REPEAT` 请求异常，并且确保自身代码合理的情况下，可以使用该配置。\n\n```js\nimport {request} from '@fesjs/fes';\n\nrequest('/api/login', {\n    username: 'robby',\n    password: '123456'\n}, {\n    mergeRequest: true, // 在一个请求没有回来前，重复发送的请求会合并成一个请求\n}).then((res) => {\n    // do something\n}).catch((err) => {\n    // 处理异常\n})\n```\n\n### 请求节流(即将废弃)\n\n\n::: warning 即将废弃\n因为 request 的请求总会有一个 promise 结果，要么成功，要么失败，和防抖、节流的语义不一致，防抖、节流只是函数的不执行\n:::\n\n\n### 请求缓存\n\n```js\nimport {request} from '@fesjs/fes';\n\nrequest('/api/login', {\n    username: 'robby',\n    password: '123456'\n}, {\n    cache: {\n        cacheType: 'ram', // ram: 内存，session: sessionStorage，local：localStorage\n        cacheTime: 1000 * 60 * 3 // 缓存时间：默认3min\n    },\n}).then((res) => {\n    // do something\n}).catch((err) => {\n    // 处理异常\n})\n```\n\n若 `cache` 传 `true`，则默认使用 `ram` 缓存类型，缓存时间 3min。\n\n\n### 结合 use 使用\n\n```js\nimport {useRequest} from '@fesjs/fes';\n\n\nexport default {\n    setup() {\n        const {loading, data, error} = useRequest('/api/login', {\n            username: 'robby',\n            password: '123456'\n        })\n\n        return {\n            loading,\n            data,\n            error\n        }\n    }\n}\n``"}},{"format":"javascript","foundDate":1638413756415,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/reference/plugin/plugins/qiankun.md","start":{"line":124,"column":2,"position":305},"end":{"line":265,"column":1,"position":773},"range":[2666,5094],"fragment":"用加载了，但是页面没有渲染出来的情况。\n:::\n```vue\n<template>\n    <MicroApp :name=\"name\" />\n</template>\n<script>\nimport { MicroApp } from '@fesjs/fes';\n\nexport default {\n    components: { MicroApp },\n    setup(){\n        const name = \"app1\"\n        return {\n            name\n        }\n    }\n}\n</script>\n```\n\n####  使用 `<MicroAppWithMemoHistory />` 组件的方式\n如果我们的路由使用 `history` 模式，那么在使用乾坤时还算方便，主应用和子应用的路由根据base可以很方便的匹配起来，而且不存在冲突。但是当我们使用 `hash` 模式时，就问题很大，主应用和子应用的路由必须一样才可以匹配上，用起来贼不方便。而且不能在一个页面上同时加载多个子应用，路由存在冲突！这时候，`<MicroAppWithMemoHistory />` 出现了，完美解决上面的问题。\n\n\n`<MicroAppWithMemoHistory />` 相比 `<MicroApp />` ，需要多传入 `url` 参数，用于指定加载子应用什么路由页面。\n\n ```vue\n<template>\n    <MicroApp :name=\"name\" url=\"/\" />\n</template>\n<script>\nimport { MicroApp } from '@fesjs/fes';\n\nexport default {\n    components: { MicroApp },\n    setup(){\n        const name = \"app1\"\n        return {\n            name\n        }\n    }\n}\n</script>\n```\n\n## 子应用配置\n\n### 第一步：插件注册\n```js\nexport default {\n    qiankun: {\n        micro: {},\n    }\n};\n```\n\n### 第二步：配置运行时生命周期钩子（可选）\n插件会自动为你创建好 `qiankun` 子应用需要的生命周期钩子，但是如果你想在生命周期期间加一些自定义逻辑，可以在子应用的 `src/app.js` 里导出 `qiankun` 对象，并实现每一个生命周期钩子，其中钩子函数的入参 `props` 由主应用自动注入。\n```js\nexport const qiankun = {\n    // 应用加载之前\n    async bootstrap(props) {\n        console.log('app1 bootstrap', props);\n    },\n    // 应用 render 之前触发\n    async mount(props) {\n        console.log('app1 mount', props);\n    },\n    // 当 props 更新时触发\n    async update(props){\n        console.log('app1 update', props);\n    },\n    // 应用卸载之后触发\n    async unmount(props) {\n        console.log('app1 unmount', props);\n    },\n};\n\n```\n\n## 父子应用通讯\n\n有两种方式实现\n\n### 配合 [useModel](./model.md) 使用\n\n确保已经安装了 `@fesjs/plugin-model`：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-model\": \"^2.0.0\"\n    },\n}\n```\n\n#### 主应用传递 props\n\n- 如果使用 `MicroApp` 组件模式消费子应用，直接通过 props 传递即可：\n```vue\n<template>\n    <MicroApp :name=\"name\" :user=\"user\" />\n</template>\n<script>\nimport { MicroApp } from '@fesjs/fes';\n\nexport default {\n    components: { MicroApp },\n    setup(){\n        const name = \"app1\"\n        const user = ref(\"\")\n        return {\n            name,\n            user\n        }\n    }\n}\n</script>\n```\n\n- 如果使用路由绑定式消费子应用，那么约定`src/models/qiankunStateForMicro.js` 的模型数据将作为 `props` 船体给子应用，如：\n```js\nimport { reactive } from 'vue';\n\nexport default () => {\n    const state = reactive({ c: 1 });\n    return {\n        state\n    };\n};\n```\n\n#### 子应用消费 props\n\n子应用中会自动生成一个全局名为 `qiankunSta"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/plugin/plugins/qiankun.md","start":{"line":124,"column":2,"position":305},"end":{"line":265,"column":1,"position":773},"range":[2666,5094],"fragment":"用加载了，但是页面没有渲染出来的情况。\n:::\n```vue\n<template>\n    <MicroApp :name=\"name\" />\n</template>\n<script>\nimport { MicroApp } from '@fesjs/fes';\n\nexport default {\n    components: { MicroApp },\n    setup(){\n        const name = \"app1\"\n        return {\n            name\n        }\n    }\n}\n</script>\n```\n\n####  使用 `<MicroAppWithMemoHistory />` 组件的方式\n如果我们的路由使用 `history` 模式，那么在使用乾坤时还算方便，主应用和子应用的路由根据base可以很方便的匹配起来，而且不存在冲突。但是当我们使用 `hash` 模式时，就问题很大，主应用和子应用的路由必须一样才可以匹配上，用起来贼不方便。而且不能在一个页面上同时加载多个子应用，路由存在冲突！这时候，`<MicroAppWithMemoHistory />` 出现了，完美解决上面的问题。\n\n\n`<MicroAppWithMemoHistory />` 相比 `<MicroApp />` ，需要多传入 `url` 参数，用于指定加载子应用什么路由页面。\n\n ```vue\n<template>\n    <MicroApp :name=\"name\" url=\"/\" />\n</template>\n<script>\nimport { MicroApp } from '@fesjs/fes';\n\nexport default {\n    components: { MicroApp },\n    setup(){\n        const name = \"app1\"\n        return {\n            name\n        }\n    }\n}\n</script>\n```\n\n## 子应用配置\n\n### 第一步：插件注册\n```js\nexport default {\n    qiankun: {\n        micro: {},\n    }\n};\n```\n\n### 第二步：配置运行时生命周期钩子（可选）\n插件会自动为你创建好 `qiankun` 子应用需要的生命周期钩子，但是如果你想在生命周期期间加一些自定义逻辑，可以在子应用的 `src/app.js` 里导出 `qiankun` 对象，并实现每一个生命周期钩子，其中钩子函数的入参 `props` 由主应用自动注入。\n```js\nexport const qiankun = {\n    // 应用加载之前\n    async bootstrap(props) {\n        console.log('app1 bootstrap', props);\n    },\n    // 应用 render 之前触发\n    async mount(props) {\n        console.log('app1 mount', props);\n    },\n    // 当 props 更新时触发\n    async update(props){\n        console.log('app1 update', props);\n    },\n    // 应用卸载之后触发\n    async unmount(props) {\n        console.log('app1 unmount', props);\n    },\n};\n\n```\n\n## 父子应用通讯\n\n有两种方式实现\n\n### 配合 [useModel](./model.md) 使用\n\n确保已经安装了 `@fesjs/plugin-model`：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-model\": \"^2.0.0\"\n    },\n}\n```\n\n#### 主应用传递 props\n\n- 如果使用 `MicroApp` 组件模式消费子应用，直接通过 props 传递即可：\n```vue\n<template>\n    <MicroApp :name=\"name\" :user=\"user\" />\n</template>\n<script>\nimport { MicroApp } from '@fesjs/fes';\n\nexport default {\n    components: { MicroApp },\n    setup(){\n        const name = \"app1\"\n        const user = ref(\"\")\n        return {\n            name,\n            user\n        }\n    }\n}\n</script>\n```\n\n- 如果使用路由绑定式消费子应用，那么约定`src/models/qiankunStateForMicro.js` 的模型数据将作为 `props` 船体给子应用，如：\n```js\nimport { reactive } from 'vue';\n\nexport default () => {\n    const state = reactive({ c: 1 });\n    return {\n        state\n    };\n};\n```\n\n#### 子应用消费 props\n\n子应用中会自动生成一个全局名为 `qiankunSta"}},{"format":"markdown","foundDate":1638413756416,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/reference/plugin/plugins/qiankun.md","start":{"line":3,"column":1,"position":2},"end":{"line":271,"column":19,"position":796},"range":[2,5189],"fragment":"@fesjs/plugin-qiankun\n\nFes.js plugin for [qiankun](https://qiankun.umijs.org/)，参考[@umijs/plugin-qiankun](https://umijs.org/zh-CN/plugins/plugin-qiankun#MicroApp) 实现，喜欢 React 的同学推荐直接用 Umi。\n\n## 启用方式\n在 `package.json` 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-qiankun\": \"^2.0.0\"\n    },\n}\n```\n\n## 介绍\n有一种痛叫接手老项目，技术栈老旧，内容多，还要继续维护~\n\n可能目前迁移、升级老项目最好的解决方案就是微前端。`plugin-qiankun` 是基于 `qiankun` 实现的 Fes.js 微前端解决方案。\n\n## 主应用配置\n\n### 第一步：注册子应用\n```js\nexport default {\n    qiankun: {\n        main: {\n            // 注册子应用信息\n            apps: [\n                {\n                    name: 'app1', // 唯一 id\n                    entry: '//localhost:8001', // html entry\n                    props: {}  // 传递给子应用的数据\n                },\n                {\n                    name: 'app2', // 唯一 id\n                    entry: '//localhost:8002', // html entry\n                },\n            ],\n        },\n    },\n};\n```\n\n### 第二步：装载子应用\n\n#### 使用路由绑定的方式\n:::warning\n主应用和子应用需要自行适配路由路径！！！待完善...\n:::\n\n假设我们的系统之前有这样的一些路由：\n```js\nexport default {\n    router: {\n        routes: [{\n            \"path\": \"/\",\n            \"component\": () => import('@/src/.fes/plugin-layout/index.js'),\n            \"children\": [\n                {\n                    \"path\": \"/onepiece\",\n                    \"component\": () => import('@/pages/onepiece'),\n                    \"name\": \"onepiece\",\n                    \"meta\": {\n                        \"name\": \"onepiece\",\n                        \"title\": \"onepiece\"\n                    }\n                }\n            ]\n        }]\n    }\n}\n```\n我们现在想在 `/son` 加载子应用 `app1`，只需要增加这样一些配置即可：\n```js {16-23}\nexport default {\n    router: {\n        routes: [{\n            \"path\": \"/\",\n            \"component\": () => import('@/src/.fes/plugin-layout/index.js'),\n            \"children\": [\n                {\n                    \"path\": \"/onepiece\",\n                    \"component\": () => import('@/pages/onepiece'),\n                    \"name\": \"onepiece\",\n                    \"meta\": {\n                        \"name\": \"onepiece\",\n                        \"title\": \"onepiece\"\n                    }\n                },\n                {\n                    \"path\": \"/son\",\n                    \"meta\": {\n                        \"name\": \"son\",\n                        \"title\": \"子应用\",\n                        \"microApp\": \"app1\"\n                    }\n                }\n            ]\n        }]\n    }\n}\n```\n当前我们依然提倡约定路由的方式，在`src/pages` 目录新建 `son.vue`：\n```vue\n<config>\n{\n    \"name\": \"son\",\n    \"title\": \"子应用\",\n    \"microApp\": \"app1\"\n}\n</config>\n```\n\n\n####  使用 `<MicroApp />` 组件的方式\n:::tip\n建议使用这种方式来引入不带路由的子应用。 否则请自行关注子应用依赖的路由跟当前浏览器 url 是否能正确匹配上，否则很容易出现子应用加载了，但是页面没有渲染出来的情况。\n:::\n```vue\n<template>\n    <MicroApp :name=\"name\" />\n</template>\n<script>\nimport { MicroApp } from '@fesjs/fes';\n\nexport default {\n    components: { MicroApp },\n    setup(){\n        const name = \"app1\"\n        return {\n            name\n        }\n    }\n}\n</script>\n```\n\n####  使用 `<MicroAppWithMemoHistory />` 组件的方式\n如果我们的路由使用 `history` 模式，那么在使用乾坤时还算方便，主应用和子应用的路由根据base可以很方便的匹配起来，而且不存在冲突。但是当我们使用 `hash` 模式时，就问题很大，主应用和子应用的路由必须一样才可以匹配上，用起来贼不方便。而且不能在一个页面上同时加载多个子应用，路由存在冲突！这时候，`<MicroAppWithMemoHistory />` 出现了，完美解决上面的问题。\n\n\n`<MicroAppWithMemoHistory />` 相比 `<MicroApp />` ，需要多传入 `url` 参数，用于指定加载子应用什么路由页面。\n\n ```vue\n<template>\n    <MicroApp :name=\"name\" url=\"/\" />\n</template>\n<script>\nimport { MicroApp } from '@fesjs/fes';\n\nexport default {\n    components: { MicroApp },\n    setup(){\n        const name = \"app1\"\n        return {\n            name\n        }\n    }\n}\n</script>\n```\n\n## 子应用配置\n\n### 第一步：插件注册\n```js\nexport default {\n    qiankun: {\n        micro: {},\n    }\n};\n```\n\n### 第二步：配置运行时生命周期钩子（可选）\n插件会自动为你创建好 `qiankun` 子应用需要的生命周期钩子，但是如果你想在生命周期期间加一些自定义逻辑，可以在子应用的 `src/app.js` 里导出 `qiankun` 对象，并实现每一个生命周期钩子，其中钩子函数的入参 `props` 由主应用自动注入。\n```js\nexport const qiankun = {\n    // 应用加载之前\n    async bootstrap(props) {\n        console.log('app1 bootstrap', props);\n    },\n    // 应用 render 之前触发\n    async mount(props) {\n        console.log('app1 mount', props);\n    },\n    // 当 props 更新时触发\n    async update(props){\n        console.log('app1 update', props);\n    },\n    // 应用卸载之后触发\n    async unmount(props) {\n        console.log('app1 unmount', props);\n    },\n};\n\n```\n\n## 父子应用通讯\n\n有两种方式实现\n\n### 配合 [useModel](./model.md) 使用\n\n确保已经安装了 `@fesjs/plugin-model`：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-model\": \"^2.0.0\"\n    },\n}\n```\n\n#### 主应用传递 props\n\n- 如果使用 `MicroApp` 组件模式消费子应用，直接通过 props 传递即可：\n```vue\n<template>\n    <MicroApp :name=\"name\" :user=\"user\" />\n</template>\n<script>\nimport { MicroApp } from '@fesjs/fes';\n\nexport default {\n    components: { MicroApp },\n    setup(){\n        const name = \"app1\"\n        const user = ref(\"\")\n        return {\n            name,\n            user\n        }\n    }\n}\n</script>\n```\n\n- 如果使用路由绑定式消费子应用，那么约定`src/models/qiankunStateForMicro.js` 的模型数据将作为 `props` 船体给子应用，如：\n```js\nimport { reactive } from 'vue';\n\nexport default () => {\n    const state = reactive({ c: 1 });\n    return {\n        state\n    };\n};\n```\n\n#### 子应用消费 props\n\n子应用中会自动生成一个全局名为 `qiankunStateFromMain` 的 `model`， 可以在任意组件中获取主应用透传的 `props` 的值。\n\n```vue\n<script>\nexport default {\n    setup"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/plugin/plugins/qiankun.md","start":{"line":3,"column":1,"position":2},"end":{"line":271,"column":19,"position":796},"range":[2,5189],"fragment":"@fesjs/plugin-qiankun\n\nFes.js plugin for [qiankun](https://qiankun.umijs.org/)，参考[@umijs/plugin-qiankun](https://umijs.org/zh-CN/plugins/plugin-qiankun#MicroApp) 实现，喜欢 React 的同学推荐直接用 Umi。\n\n## 启用方式\n在 `package.json` 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-qiankun\": \"^2.0.0\"\n    },\n}\n```\n\n## 介绍\n有一种痛叫接手老项目，技术栈老旧，内容多，还要继续维护~\n\n可能目前迁移、升级老项目最好的解决方案就是微前端。`plugin-qiankun` 是基于 `qiankun` 实现的 Fes.js 微前端解决方案。\n\n## 主应用配置\n\n### 第一步：注册子应用\n```js\nexport default {\n    qiankun: {\n        main: {\n            // 注册子应用信息\n            apps: [\n                {\n                    name: 'app1', // 唯一 id\n                    entry: '//localhost:8001', // html entry\n                    props: {}  // 传递给子应用的数据\n                },\n                {\n                    name: 'app2', // 唯一 id\n                    entry: '//localhost:8002', // html entry\n                },\n            ],\n        },\n    },\n};\n```\n\n### 第二步：装载子应用\n\n#### 使用路由绑定的方式\n:::warning\n主应用和子应用需要自行适配路由路径！！！待完善...\n:::\n\n假设我们的系统之前有这样的一些路由：\n```js\nexport default {\n    router: {\n        routes: [{\n            \"path\": \"/\",\n            \"component\": () => import('@/src/.fes/plugin-layout/index.js'),\n            \"children\": [\n                {\n                    \"path\": \"/onepiece\",\n                    \"component\": () => import('@/pages/onepiece'),\n                    \"name\": \"onepiece\",\n                    \"meta\": {\n                        \"name\": \"onepiece\",\n                        \"title\": \"onepiece\"\n                    }\n                }\n            ]\n        }]\n    }\n}\n```\n我们现在想在 `/son` 加载子应用 `app1`，只需要增加这样一些配置即可：\n```js {16-23}\nexport default {\n    router: {\n        routes: [{\n            \"path\": \"/\",\n            \"component\": () => import('@/src/.fes/plugin-layout/index.js'),\n            \"children\": [\n                {\n                    \"path\": \"/onepiece\",\n                    \"component\": () => import('@/pages/onepiece'),\n                    \"name\": \"onepiece\",\n                    \"meta\": {\n                        \"name\": \"onepiece\",\n                        \"title\": \"onepiece\"\n                    }\n                },\n                {\n                    \"path\": \"/son\",\n                    \"meta\": {\n                        \"name\": \"son\",\n                        \"title\": \"子应用\",\n                        \"microApp\": \"app1\"\n                    }\n                }\n            ]\n        }]\n    }\n}\n```\n当前我们依然提倡约定路由的方式，在`src/pages` 目录新建 `son.vue`：\n```vue\n<config>\n{\n    \"name\": \"son\",\n    \"title\": \"子应用\",\n    \"microApp\": \"app1\"\n}\n</config>\n```\n\n\n####  使用 `<MicroApp />` 组件的方式\n:::tip\n建议使用这种方式来引入不带路由的子应用。 否则请自行关注子应用依赖的路由跟当前浏览器 url 是否能正确匹配上，否则很容易出现子应用加载了，但是页面没有渲染出来的情况。\n:::\n```vue\n<template>\n    <MicroApp :name=\"name\" />\n</template>\n<script>\nimport { MicroApp } from '@fesjs/fes';\n\nexport default {\n    components: { MicroApp },\n    setup(){\n        const name = \"app1\"\n        return {\n            name\n        }\n    }\n}\n</script>\n```\n\n####  使用 `<MicroAppWithMemoHistory />` 组件的方式\n如果我们的路由使用 `history` 模式，那么在使用乾坤时还算方便，主应用和子应用的路由根据base可以很方便的匹配起来，而且不存在冲突。但是当我们使用 `hash` 模式时，就问题很大，主应用和子应用的路由必须一样才可以匹配上，用起来贼不方便。而且不能在一个页面上同时加载多个子应用，路由存在冲突！这时候，`<MicroAppWithMemoHistory />` 出现了，完美解决上面的问题。\n\n\n`<MicroAppWithMemoHistory />` 相比 `<MicroApp />` ，需要多传入 `url` 参数，用于指定加载子应用什么路由页面。\n\n ```vue\n<template>\n    <MicroApp :name=\"name\" url=\"/\" />\n</template>\n<script>\nimport { MicroApp } from '@fesjs/fes';\n\nexport default {\n    components: { MicroApp },\n    setup(){\n        const name = \"app1\"\n        return {\n            name\n        }\n    }\n}\n</script>\n```\n\n## 子应用配置\n\n### 第一步：插件注册\n```js\nexport default {\n    qiankun: {\n        micro: {},\n    }\n};\n```\n\n### 第二步：配置运行时生命周期钩子（可选）\n插件会自动为你创建好 `qiankun` 子应用需要的生命周期钩子，但是如果你想在生命周期期间加一些自定义逻辑，可以在子应用的 `src/app.js` 里导出 `qiankun` 对象，并实现每一个生命周期钩子，其中钩子函数的入参 `props` 由主应用自动注入。\n```js\nexport const qiankun = {\n    // 应用加载之前\n    async bootstrap(props) {\n        console.log('app1 bootstrap', props);\n    },\n    // 应用 render 之前触发\n    async mount(props) {\n        console.log('app1 mount', props);\n    },\n    // 当 props 更新时触发\n    async update(props){\n        console.log('app1 update', props);\n    },\n    // 应用卸载之后触发\n    async unmount(props) {\n        console.log('app1 unmount', props);\n    },\n};\n\n```\n\n## 父子应用通讯\n\n有两种方式实现\n\n### 配合 [useModel](./model.md) 使用\n\n确保已经安装了 `@fesjs/plugin-model`：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-model\": \"^2.0.0\"\n    },\n}\n```\n\n#### 主应用传递 props\n\n- 如果使用 `MicroApp` 组件模式消费子应用，直接通过 props 传递即可：\n```vue\n<template>\n    <MicroApp :name=\"name\" :user=\"user\" />\n</template>\n<script>\nimport { MicroApp } from '@fesjs/fes';\n\nexport default {\n    components: { MicroApp },\n    setup(){\n        const name = \"app1\"\n        const user = ref(\"\")\n        return {\n            name,\n            user\n        }\n    }\n}\n</script>\n```\n\n- 如果使用路由绑定式消费子应用，那么约定`src/models/qiankunStateForMicro.js` 的模型数据将作为 `props` 船体给子应用，如：\n```js\nimport { reactive } from 'vue';\n\nexport default () => {\n    const state = reactive({ c: 1 });\n    return {\n        state\n    };\n};\n```\n\n#### 子应用消费 props\n\n子应用中会自动生成一个全局名为 `qiankunStateFromMain` 的 `model`， 可以在任意组件中获取主应用透传的 `props` 的值。\n\n```vue\n<script>\nexport default {\n    setup"}},{"format":"markdown","foundDate":1638413756418,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/reference/plugin/plugins/model.md","start":{"line":4,"column":1,"position":3},"end":{"line":66,"column":4,"position":266},"range":[3,962],"fragment":"fesjs/plugin-model\n\n## 启用方式\n在 package.json 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-model\": \"^2.0.0\"\n    },\n}\n```\n## 介绍\n一种简易的数据管理方案。我们知道 Vue 的理念是用响应式数据驱动UI更新，提供 `reactive` 、 `ref` 等API把数据变成响应式的。我们使用`Provide / Inject`特性，在应用实例中共享响应式数据。\n\n我们约定`src/models` 目录下的文件为项目定义的 `model` 文件。每个文件需要默认导出一个 `function`。\n\n文件名则对应最终 `model` 的 `name`，你可以通过插件提供的 `API` 来消费 `model` 中的数据。\n\n### Model 文件\n**src/models/useAuthModel.js**\n```js\nimport { reactive } from 'vue'\n\nexport default function useAuthModel() {\n  const user = reactive({});\n\n  const signin = ()=>{\n      // todo\n  }\n\n  const signout = ()=>{\n      // todo\n  }\n\n  return {\n    user,\n    signin,\n    signout\n  }\n}\n```\n\n### 在组件中使用 Model\n```vue\n<script>\nimport { useModel } from \"@fesjs/fes\"\nexport default {\n    setup(){\n        const { user, signin, signout } = useModel(\"useAuthModel\")\n    }\n}\n</script>\n```\n\n\n## API\n\n### useModel\n\n**useModel(name)**\n- **类型**：函数\n  \n"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/plugin/plugins/model.md","start":{"line":4,"column":1,"position":3},"end":{"line":66,"column":4,"position":266},"range":[3,962],"fragment":"fesjs/plugin-model\n\n## 启用方式\n在 package.json 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-model\": \"^2.0.0\"\n    },\n}\n```\n## 介绍\n一种简易的数据管理方案。我们知道 Vue 的理念是用响应式数据驱动UI更新，提供 `reactive` 、 `ref` 等API把数据变成响应式的。我们使用`Provide / Inject`特性，在应用实例中共享响应式数据。\n\n我们约定`src/models` 目录下的文件为项目定义的 `model` 文件。每个文件需要默认导出一个 `function`。\n\n文件名则对应最终 `model` 的 `name`，你可以通过插件提供的 `API` 来消费 `model` 中的数据。\n\n### Model 文件\n**src/models/useAuthModel.js**\n```js\nimport { reactive } from 'vue'\n\nexport default function useAuthModel() {\n  const user = reactive({});\n\n  const signin = ()=>{\n      // todo\n  }\n\n  const signout = ()=>{\n      // todo\n  }\n\n  return {\n    user,\n    signin,\n    signout\n  }\n}\n```\n\n### 在组件中使用 Model\n```vue\n<script>\nimport { useModel } from \"@fesjs/fes\"\nexport default {\n    setup(){\n        const { user, signin, signout } = useModel(\"useAuthModel\")\n    }\n}\n</script>\n```\n\n\n## API\n\n### useModel\n\n**useModel(name)**\n- **类型**：函数\n  \n"}},{"format":"markdown","foundDate":1638413756423,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/reference/plugin/plugins/locale.md","start":{"line":4,"column":1,"position":3},"end":{"line":48,"column":21,"position":138},"range":[3,692],"fragment":"fesjs/plugin-locale\n\n## 介绍\n国际化插件，基于 [Vue I18n](https://github.com/intlify/vue-i18n-next)，用于解决 i18n 问题。\n## 启用方式\n在 `package.json` 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-locale\": \"^2.0.0\"\n    },\n}\n```\n\n\n## 配置\n\n### 约定式配置\nFes.js 约定如下目录，项目就拥有了 `zh-CN` 与 `en-US` 国际化语言切换：\n```\nsrc\n  ├── locales\n  │    ├── zh-CN.js\n  │    └── en-US.js\n  └── pages\n  │    └── index.vue\n  └── app.js\n```\n多语言文件的命名规范：`<lang>-<COUNTRY>.js`\n\n多语言文件的内容规范：键值组成的字面量，如下：\n```js\n// src/locales/zh-CN.js\nexport default {\n    menu: {\n        interface: '接口'\n    },\n    overview: '概述',\n    i18n: {\n        internationalization: '国际化，基于',\n        achieve: '实现。',\n        ui: '"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/plugin/plugins/locale.md","start":{"line":4,"column":1,"position":3},"end":{"line":48,"column":21,"position":138},"range":[3,692],"fragment":"fesjs/plugin-locale\n\n## 介绍\n国际化插件，基于 [Vue I18n](https://github.com/intlify/vue-i18n-next)，用于解决 i18n 问题。\n## 启用方式\n在 `package.json` 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-locale\": \"^2.0.0\"\n    },\n}\n```\n\n\n## 配置\n\n### 约定式配置\nFes.js 约定如下目录，项目就拥有了 `zh-CN` 与 `en-US` 国际化语言切换：\n```\nsrc\n  ├── locales\n  │    ├── zh-CN.js\n  │    └── en-US.js\n  └── pages\n  │    └── index.vue\n  └── app.js\n```\n多语言文件的命名规范：`<lang>-<COUNTRY>.js`\n\n多语言文件的内容规范：键值组成的字面量，如下：\n```js\n// src/locales/zh-CN.js\nexport default {\n    menu: {\n        interface: '接口'\n    },\n    overview: '概述',\n    i18n: {\n        internationalization: '国际化，基于',\n        achieve: '实现。',\n        ui: '"}},{"format":"markdown","foundDate":1638413756423,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/reference/plugin/plugins/locale.md","start":{"line":49,"column":1,"position":140},"end":{"line":202,"column":14,"position":814},"range":[693,3288],"fragment":"I组件'\n    }\n};\n```\n```js\n// src/locales/zh-CN.js\nexport default {\n    menu: {\n        interface: 'interface'\n    },\n    overview: 'Overview',\n    i18n: {\n        internationalization: 'internationalization，base on',\n        achieve: 'to achieve.',\n        ui: 'UI components'\n    }\n};\n```\n想了解更多语言信息配置、匹配规则，请参考 [Vue I18n](https://vue-i18n.intlify.dev/guide/essentials/syntax.html) 文档。\n\n\n### 编译时配置\n在执行 `fes dev` 或者 `fes build` 时，通过此配置生成运行时的代码，在配置文件`.fes.js` 中配置：\n```js\nexport default {\n    locale: {\n    }\n}\n```\n默认配置为：\n```js\nexport default {\n    locale: {\n        locale: 'zh-CN', // default locale\n        fallbackLocale: 'zh-CN', // set fallback locale\n        baseNavigator: true, // 开启浏览器语言检测\n        share: true, // 用户是否需要手动改变语言\n    }\n} \n```\n所有配置项如下：\n\n#### locale\n- **类型**：`String`\n  \n- **默认值**：`zh-CN`\n\n- **详情**：当前的语言。\n\n#### fallbackLocale\n- **类型**：`String`\n  \n- **默认值**：`zh-CN`\n\n- **详情**：兜底的语言，如果当前语言找不到配置，则使用默认语言，需要保证默认语言配置文件存在。\n\n#### baseNavigator\n- **类型**：`Boolean`\n  \n- **默认值**：`true`\n\n- **详情**：开启浏览器语言检测。\n\n默认情况下，当前语言环境的识别按照：`localStorage` 中 `fes_locale` 值 > 浏览器检测 > `default` 设置的默认语言 > `zh-CN` 中文。\n\n#### share\n- **类型**：`Boolean`\n  \n- **默认值**：`true`\n\n- **详情**：是否共享API，共享语言选择器 `{ SelectLang } `，其他插件可以获取到共享内容。\n  \n比如：\n```js\nimport { plugin } from \"@@/core/coreExports\";\nconst localeShared = plugin.getShared(\"locale\");\n```\n\n\n### 运行时配置\n暂无。\n\n## API\n\n### locale\n插件 API 通过 `@fesjs/fes` 导出：\n```js\nimport { locale } from '@fesjs/fes'\n```\n\n#### locale.messages\n- **类型**：`Object`\n  \n- **详情**：当前的配置的语言信息。\n\n#### locale.setLocale\n- **类型**：`Function`\n  \n- **详情**：设置当前的语言。\n- **参数**：\n  - locale，语言的名称，应该是符合 `<lang>-<COUNTRY>` 规范的名称。\n- **返回值**：`null`\n```js\nimport { locale } from '@fesjs/fes';\nlocale.setLocale({ locale: 'en-US' });\n```\n\n#### locale.addLocale\n- **类型**：`Function`\n  \n- **详情**：手动添加语言配置。\n- **参数**：\n  - locale，语言的名称，符合 `<lang>-<COUNTRY>` 规范的名称。\n  - messages, 语言信息。\n- **返回值**：`null`\n```js\nimport { locale } from '@fesjs/fes'\nlocale.addLocale({ locale: 'ja-JP', messages: { test: 'テスト' } });\n```\n\n\n#### locale.getAllLocales\n- **类型**：`Function`\n  \n- **详情**：获取当前获得所有国际化文件的列表，默认会在 locales 文件夹下寻找类似 `en-US.js` 文件。\n- **参数**：null\n- **返回值**：`Array`\n```js\nimport { locale } from '@fesjs/fes';\nconsole.log(locale.getAllLocales());\n// [\"en-US\", \"id-ID\", \"ja-JP\", \"pt-BR\", \"zh-CN\", \"zh-TW\"]\n```\n\n\n### useI18n\nComposition API, 只能在 `setup` 函数中使用，更多细节参考 [Vue I18n](https://vue-i18n.intlify.dev/api/composition.html#usei18n)。\n\b举个 🌰：\n```vue\n<template>\n  <form>\n    <label>{{ t('language') }}</label>\n  </form>\n  <p>message: {{ t('hello') }}</p>\n</template>\n\n<script>\nimport { useI18n } from '@fesjs/fes'\n\nexp"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/plugin/plugins/locale.md","start":{"line":49,"column":1,"position":140},"end":{"line":202,"column":14,"position":814},"range":[693,3288],"fragment":"I组件'\n    }\n};\n```\n```js\n// src/locales/en-US.js\nexport default {\n    menu: {\n        interface: 'interface'\n    },\n    overview: 'Overview',\n    i18n: {\n        internationalization: 'internationalization，base on',\n        achieve: 'to achieve.',\n        ui: 'UI components'\n    }\n};\n```\n想了解更多语言信息配置、匹配规则，请参考 [Vue I18n](https://vue-i18n.intlify.dev/guide/essentials/syntax.html) 文档。\n\n\n### 编译时配置\n在执行 `fes dev` 或者 `fes build` 时，通过此配置生成运行时的代码，在配置文件`.fes.js` 中配置：\n```js\nexport default {\n    locale: {\n    }\n}\n```\n默认配置为：\n```js\nexport default {\n    locale: {\n        locale: 'zh-CN', // default locale\n        fallbackLocale: 'zh-CN', // set fallback locale\n        baseNavigator: true, // 开启浏览器语言检测\n        share: true, // 用户是否需要手动改变语言\n    }\n} \n```\n所有配置项如下：\n\n#### locale\n- **类型**：`String`\n  \n- **默认值**：`zh-CN`\n\n- **详情**：当前的语言。\n\n#### fallbackLocale\n- **类型**：`String`\n  \n- **默认值**：`zh-CN`\n\n- **详情**：兜底的语言，如果当前语言找不到配置，则使用默认语言，需要保证默认语言配置文件存在。\n\n#### baseNavigator\n- **类型**：`Boolean`\n  \n- **默认值**：`true`\n\n- **详情**：开启浏览器语言检测。\n\n默认情况下，当前语言环境的识别按照：`localStorage` 中 `fes_locale` 值 > 浏览器检测 > `default` 设置的默认语言 > `zh-CN` 中文。\n\n#### share\n- **类型**：`Boolean`\n  \n- **默认值**：`true`\n\n- **详情**：是否共享API，共享语言选择器 `{ SelectLang } `，其他插件可以获取到共享内容。\n  \n比如：\n```js\nimport { plugin } from \"@@/core/coreExports\";\nconst localeShared = plugin.getShared(\"locale\");\n```\n\n\n### 运行时配置\n暂无。\n\n## API\n\n### locale\n插件 API 通过 `@fesjs/fes` 导出：\n```js\nimport { locale } from '@fesjs/fes'\n```\n\n#### locale.messages\n- **类型**：`Object`\n  \n- **详情**：当前的配置的语言信息。\n\n#### locale.setLocale\n- **类型**：`Function`\n  \n- **详情**：设置当前的语言。\n- **参数**：\n  - locale，语言的名称，应该是符合 `<lang>-<COUNTRY>` 规范的名称。\n- **返回值**：`null`\n```js\nimport { locale } from '@fesjs/fes';\nlocale.setLocale({ locale: 'en-US' });\n```\n\n#### locale.addLocale\n- **类型**：`Function`\n  \n- **详情**：手动添加语言配置。\n- **参数**：\n  - locale，语言的名称，符合 `<lang>-<COUNTRY>` 规范的名称。\n  - messages, 语言信息。\n- **返回值**：`null`\n```js\nimport { locale } from '@fesjs/fes'\nlocale.addLocale({ locale: 'ja-JP', messages: { test: 'テスト' } });\n```\n\n\n#### locale.getAllLocales\n- **类型**：`Function`\n  \n- **详情**：获取当前获得所有国际化文件的列表，默认会在 locales 文件夹下寻找类似 `en-US.js` 文件。\n- **参数**：null\n- **返回值**：`Array`\n```js\nimport { locale } from '@fesjs/fes';\nconsole.log(locale.getAllLocales());\n// [\"en-US\", \"id-ID\", \"ja-JP\", \"pt-BR\", \"zh-CN\", \"zh-TW\"]\n```\n\n\n### useI18n\nComposition API, 只能在 `setup` 函数中使用，更多细节参考 [Vue I18n](https://vue-i18n.intlify.dev/api/composition.html#usei18n)。\n\b举个 🌰：\n```vue\n<template>\n  <form>\n    <label>{{ t('language') }}</label>\n  </form>\n  <p>message: {{ t('hello') }}</p>\n</template>\n\n<script>\nimport { useI18n } from '@fesjs/fes'\n\nexp"}},{"format":"markdown","foundDate":1638413756428,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/reference/plugin/plugins/layout.md","start":{"line":4,"column":1,"position":3},"end":{"line":279,"column":4,"position":1072},"range":[3,4695],"fragment":"fesjs/plugin-layout\n\n## 介绍\n为了进一步降低研发成本，我们尝试将布局通过 fes 插件的方式内置，只需通过简单的配置即可拥有布局，包括导航以及侧边栏。从而做到用户无需关心布局。\n- 侧边栏菜单数据根据路由中的配置自动生成。\n- 布局，提供 `side`、 `top`、`mixin` 三种布局。\n- 主题，提供 `light`、`dark` 两种主题。\n- 默认实现对路由的 404、403 处理。\n- 搭配 [@fesjs/plugin-access](./access.html) 插件使用，可以完成对路由的权限控制。\n- 搭配 [@fesjs/plugin-locale](./locale.html) 插件使用，提供切换语言的能力。\n- 支持自定义头部区域。\n- 菜单支持配置icon\n- 菜单标题支持国际化\n  \n- 可配置页面是否需要 layout。\n\n## 启用方式\n在 `package.json` 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-layout\": \"^2.0.0\"\n    },\n}\n```\n\n## 布局类型\n配置参数是 `navigation`, 布局有三种类型 `side`、`mixin` 和 `top`， 默认是 `side`：\n```js\nexport default {\n    layout: {\n        navigation: 'side'\n    }\n}\n```\n\n### side\n<!-- ![side](/side.png) -->\n<img :src=\"$withBase('side.png')\" alt=\"side\">\n\n### top\n<!-- ![top](/top.png) -->\n<img :src=\"$withBase('top.png')\" alt=\"top\">\n\n### mixin\n<!-- ![mixin](/mixin.png) -->\n<img :src=\"$withBase('mixin.png')\" alt=\"mixin\">\n\n### 页面禁用布局\n布局是默认开启的，但是可能某些页面不需要展示布局样式，比如登录页面。我们只需要在页面的`.vue`中添加如下配置：\n```vue\n<config lang=\"json\">\n{\n    \"layout\": false\n}\n</config>\n```\n如果只是不想展示`side`，则：\n```\n<config lang=\"json\">\n{\n    \"layout\": {\n        \"side\": false\n    }\n}\n</config>\n```\n`layout`的可选配置有：\n\n- **side**： 左侧区域\n  \n- **top**： 头部区域\n\n- **logo**：logo和标题区域。\n\n## 配置\n\n### 编译时配置\n在 `.fes.js` 中配置：\n```js\nexport default {\n    layout: {\n        // 标题\n        title: \"Fes.js\",\n        // 底部文字\n        footer: 'Created by MumbelFe',\n        // 主题light\n        theme: 'dark'\n        // 是否开启 tabs\n        multiTabs: false,\n        // 布局类型\n        navigation: 'side',\n        // 是否固定头部\n        fixedHeader: false,\n        // 是否固定sidebar\n        fixedSideBar: true,\n        // sidebar的宽度\n        sideWidth: 200,\n        menus: [{\n            name: 'index'\n        }, {\n            name: 'onepiece'\n        }, {\n            name: 'store'\n        }, {\n            name: 'simpleList'\n        }]\n    },\n```\n\n### footer\n- **类型**：`String`\n  \n- **默认值**：`null`\n\n- **详情**：页面底部的文字。\n\n### theme\n- **类型**：`String`\n  \n- **默认值**：`dark`\n\n- **详情**：主题，可选有 `dark`、`light`\n\n### navigation\n- **类型**：`String`\n  \n- **默认值**：`side`\n\n- **详情**：页面布局类型，可选有 `side`、 `top`、 `mixin` \n\n### fixedHeader\n- **类型**：`Boolean`\n  \n- **默认值**：`false`\n\n- **详情**：是否固定头部，不跟随页面滚动。\n\n### fixedSideBar\n- **类型**：`Boolean`\n  \n- **默认值**：`true`\n\n- **详情**：是否固定sidebar，不跟随页面滚动。\n\n#### title\n- **类型**：`String`\n  \n- **默认值**：`name` in package.json\n\n- **详情**：产品名，会显示在 Logo 旁边。   \n\n#### logo\n- **类型**：`String`\n  \n- **默认值**：默认提供 fes.js 的 Logo\n\n- **详情**：Logo，会显示在布局上。\n\n#### locale\n- **类型**：`boolean`\n  \n- **默认值**：`false`\n\n- **详情**：是否显示语言选择框。\n\n#### multiTabs\n- **类型**：`boolean`\n  \n- **默认值**：`false`\n\n- **详情**：是否开启多页。\n\n#### menus\n- **类型**：`Array`\n  \n- **默认值**：`[]`\n\n- **详情**：菜单配置，子项具体配置如下：\n  \n  - **name**：菜单的名称。通过匹配 `name` 和路由元信息 [meta](http://localhost:8080/zh/guide/route.html#%E6%89%A9%E5%B1%95%E8%B7%AF%E7%94%B1%E5%85%83%E4%BF%A1%E6%81%AF) 中的 `name`，把菜单和路由关联起来，\b然后使用路由元信息补充菜单配置，比如 `title`、`path` \b等。\n  \n  - **path**：菜单的路径，可配置第三方地址。\n  \n  - **title**：菜单的标题，如果同时使用[国际化插件](./locale.md)，而且在 `locales` 中配置了 `title` ，则菜单的名称会根据语言自动切换。\n\n  - **icon**: 菜单的图标，只有一级标题展示图标。\n    - 图标使用[antv icon](https://www.antdv.com/components/icon-cn/)，在这里使用组件type。\n```js\n{\n    icon: \"user\"\n}\n```\n    - 图标使用本地或者远程svg图片。\n```js\n{\n    icon: \"/wine-outline.svg\"\n}\n```\n  \n  - **children**：子菜单配置。\n  \n  \n### 运行时配置\n在 `app.js` 中配置：\n```js\nimport UserCenter from '@/components/UserCenter';\nexport const layout = {\n    customHeader: <UserCenter />\n};\n\n```\n#### customHeader\n- **类型**：Vue Component\n  \n- **默认值**：`null`\n\n- **详情**：top的区域部分位置提供组件自定义功能。\n\n#### unAccessHandler\n- **类型**：`Function`\n  \n- **默认值**：`null`\n\n- **详情**：     \n  \n  当进入某个路由时，如果路由对应的页面不属于可见资源列表，则会暂停进入，调用 `unAccessHandler` 函数。\n- **参数**\n  - router：createRouter 创建的路由实例\n  - to： 准备进入的路由\n  - from：离开的路由\n  - next： [next函数](https://next.router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%8F%AF%E9%80%89%E7%9A%84%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0-next)\n\n比如：\n```js\nexport const access = {\n    unAccessHandler({ to, next }) {\n        const accesssIds = accessApi.getAccess();\n        if (to.path === '/404') {\n            accessApi.setAccess(accesssIds.concat(['/404']));\n            return next('/404');\n        }\n        if (!accesssIds.includes('/403')) {\n            accessApi.setAccess(accesssIds.concat(['/403']));\n        }\n        next('/403');\n    }\n};\n\n```\n\n#### noFoundHandler\n- **类型**：函数\n  \n- **默认值**：null\n\n- **详情**：     \n  \n  当进入某个路由时，如果路由对应的页面不存在，则会调用 `noFoundHandler` 函数。\n- **参数**\n  - router：createRouter 创建的路由实例\n  - to： 准备进入的路由\n  - from：离开的路由\n  - next： [next函数](https://next.router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%8F%AF%E9%80%89%E7%9A%84%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0-n"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/plugin/plugins/layout.md","start":{"line":4,"column":1,"position":3},"end":{"line":279,"column":4,"position":1072},"range":[3,4695],"fragment":"fesjs/plugin-layout\n\n## 介绍\n为了进一步降低研发成本，我们尝试将布局通过 fes 插件的方式内置，只需通过简单的配置即可拥有布局，包括导航以及侧边栏。从而做到用户无需关心布局。\n- 侧边栏菜单数据根据路由中的配置自动生成。\n- 布局，提供 `side`、 `top`、`mixin` 三种布局。\n- 主题，提供 `light`、`dark` 两种主题。\n- 默认实现对路由的 404、403 处理。\n- 搭配 [@fesjs/plugin-access](./access.html) 插件使用，可以完成对路由的权限控制。\n- 搭配 [@fesjs/plugin-locale](./locale.html) 插件使用，提供切换语言的能力。\n- 支持自定义头部区域。\n- 菜单支持配置icon\n- 菜单标题支持国际化\n  \n- 可配置页面是否需要 layout。\n\n## 启用方式\n在 `package.json` 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-layout\": \"^2.0.0\"\n    },\n}\n```\n\n## 布局类型\n配置参数是 `navigation`, 布局有三种类型 `side`、`mixin` 和 `top`， 默认是 `side`：\n```js\nexport default {\n    layout: {\n        navigation: 'side'\n    }\n}\n```\n\n### side\n<!-- ![side](/side.png) -->\n<img :src=\"$withBase('side.png')\" alt=\"side\">\n\n### top\n<!-- ![top](/top.png) -->\n<img :src=\"$withBase('top.png')\" alt=\"top\">\n\n### mixin\n<!-- ![mixin](/mixin.png) -->\n<img :src=\"$withBase('mixin.png')\" alt=\"mixin\">\n\n### 页面禁用布局\n布局是默认开启的，但是可能某些页面不需要展示布局样式，比如登录页面。我们只需要在页面的`.vue`中添加如下配置：\n```vue\n<config lang=\"json\">\n{\n    \"layout\": false\n}\n</config>\n```\n如果只是不想展示`side`，则：\n```\n<config lang=\"json\">\n{\n    \"layout\": {\n        \"side\": false\n    }\n}\n</config>\n```\n`layout`的可选配置有：\n\n- **side**： 左侧区域\n  \n- **top**： 头部区域\n\n- **logo**：logo和标题区域。\n\n## 配置\n\n### 编译时配置\n在 `.fes.js` 中配置：\n```js\nexport default {\n    layout: {\n        // 标题\n        title: \"Fes.js\",\n        // 底部文字\n        footer: 'Created by MumbelFe',\n        // 主题light\n        theme: 'dark'\n        // 是否开启 tabs\n        multiTabs: false,\n        // 布局类型\n        navigation: 'side',\n        // 是否固定头部\n        fixedHeader: false,\n        // 是否固定sidebar\n        fixedSideBar: true,\n        // sidebar的宽度\n        sideWidth: 200,\n        menus: [{\n            name: 'index'\n        }, {\n            name: 'onepiece'\n        }, {\n            name: 'store'\n        }, {\n            name: 'simpleList'\n        }]\n    },\n```\n\n### footer\n- **类型**：`String`\n  \n- **默认值**：`null`\n\n- **详情**：页面底部的文字。\n\n### theme\n- **类型**：`String`\n  \n- **默认值**：`dark`\n\n- **详情**：主题，可选有 `dark`、`light`\n\n### navigation\n- **类型**：`String`\n  \n- **默认值**：`side`\n\n- **详情**：页面布局类型，可选有 `side`、 `top`、 `mixin` \n\n### fixedHeader\n- **类型**：`Boolean`\n  \n- **默认值**：`false`\n\n- **详情**：是否固定头部，不跟随页面滚动。\n\n### fixedSideBar\n- **类型**：`Boolean`\n  \n- **默认值**：`true`\n\n- **详情**：是否固定sidebar，不跟随页面滚动。\n\n#### title\n- **类型**：`String`\n  \n- **默认值**：`name` in package.json\n\n- **详情**：产品名，会显示在 Logo 旁边。   \n\n#### logo\n- **类型**：`String`\n  \n- **默认值**：默认提供 fes.js 的 Logo\n\n- **详情**：Logo，会显示在布局上。\n\n#### locale\n- **类型**：`boolean`\n  \n- **默认值**：`false`\n\n- **详情**：是否显示语言选择框。\n\n#### multiTabs\n- **类型**：`boolean`\n  \n- **默认值**：`false`\n\n- **详情**：是否开启多页。\n\n#### menus\n- **类型**：`Array`\n  \n- **默认值**：`[]`\n\n- **详情**：菜单配置，子项具体配置如下：\n  \n  - **name**：菜单的名称。通过匹配 `name` 和路由元信息 [meta](http://localhost:8080/zh/guide/route.html#%E6%89%A9%E5%B1%95%E8%B7%AF%E7%94%B1%E5%85%83%E4%BF%A1%E6%81%AF) 中的 `name`，把菜单和路由关联起来，\b然后使用路由元信息补充菜单配置，比如 `title`、`path` \b等。\n  \n  - **path**：菜单的路径，可配置第三方地址。\n  \n  - **title**：菜单的标题，如果同时使用[国际化插件](./locale.md)，而且在 `locales` 中配置了 `title` ，则菜单的名称会根据语言自动切换。\n\n  - **icon**: 菜单的图标，只有一级标题展示图标。\n    - 图标使用[antv icon](https://www.antdv.com/components/icon-cn/)，在这里使用组件type。\n```js\n{\n    icon: \"user\"\n}\n```\n    - 图标使用本地或者远程svg图片。\n```js\n{\n    icon: \"/wine-outline.svg\"\n}\n```\n  \n  - **children**：子菜单配置。\n  \n  \n### 运行时配置\n在 `app.js` 中配置：\n```js\nimport UserCenter from '@/components/UserCenter';\nexport const layout = {\n    customHeader: <UserCenter />\n};\n\n```\n#### customHeader\n- **类型**：Vue Component\n  \n- **默认值**：`null`\n\n- **详情**：top的区域部分位置提供组件自定义功能。\n\n#### unAccessHandler\n- **类型**：`Function`\n  \n- **默认值**：`null`\n\n- **详情**：     \n  \n  当进入某个路由时，如果路由对应的页面不属于可见资源列表，则会暂停进入，调用 `unAccessHandler` 函数。\n- **参数**\n  - router：createRouter 创建的路由实例\n  - to： 准备进入的路由\n  - from：离开的路由\n  - next： [next函数](https://next.router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%8F%AF%E9%80%89%E7%9A%84%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0-next)\n\n比如：\n```js\nexport const access = {\n    unAccessHandler({ to, next }) {\n        const accesssIds = accessApi.getAccess();\n        if (to.path === '/404') {\n            accessApi.setAccess(accesssIds.concat(['/404']));\n            return next('/404');\n        }\n        if (!accesssIds.includes('/403')) {\n            accessApi.setAccess(accesssIds.concat(['/403']));\n        }\n        next('/403');\n    }\n};\n\n```\n\n#### noFoundHandler\n- **类型**：函数\n  \n- **默认值**：null\n\n- **详情**：     \n  \n  当进入某个路由时，如果路由对应的页面不存在，则会调用 `noFoundHandler` 函数。\n- **参数**\n  - router：createRouter 创建的路由实例\n  - to： 准备进入的路由\n  - from：离开的路由\n  - next： [next函数](https://next.router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%8F%AF%E9%80%89%E7%9A%84%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0-n"}},{"format":"markdown","foundDate":1638413756443,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/reference/plugin/plugins/jest.md","start":{"line":3,"column":1,"position":2},"end":{"line":355,"column":5,"position":2533},"range":[2,20470],"fragment":"@fesjs/plugin-jest\n\n集成 [Jest](https://www.jestjs.cn/) 测试框架，目前只支持单元测试和覆盖测试。\n\n## 启用方式\n在 `package.json` 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-jest\": \"^2.0.0\"\n    },\n}\n```\n\n## 约定\n\n- 项目根目录下 `tests` 和 `__tests__` 文件夹中的 `js` 或者 `jsx` 文件为测试文件。\n- 需要覆盖测试的文件范围是`src/index.{js,jsx,ts,tsx,vue}`\n\n例如测试文件 `add.js`：\n```\nfes-template\n├── __tests__\n│   └── add.js\n└── src\n    ├── .fes\n    └── utils\n        └── sum.js\n```\n内容如下：\n```js\nimport sum from '@/utils/sum';\ntest('adds 1 + 2 to equal 3', () => {\n    expect(sum(1, 2)).toBe(3);\n});\n\n```\n\n## 命令 \n在 `fes` 上注册 `test` 命令：\n```bash\n$ fes test\n```\n\n## 配置\n插件实现 Jest 的全部配置，具体请查看 [文档-configuration](https://www.jestjs.cn/docs/configuration#reference)。 也可以使用 `-h` 打印配置帮助信息：\n\n### args 变量\n\n```bash\n$ fes test -h\n```\n打印配置帮助信息:\n```\n$ fes test -h\nUsage: fes test [options]\n\nrun unit tests with jest\n\nOptions:\n  --all                         The opposite of `onlyChanged`. If `onlyChanged`\n                                is set by default, running jest with `--all`\n                                will force Jest to run all tests instead of\n                                running only tests related to changed files.\n  --automock                    Automock all files by default.\n  -b --bail                     Exit the test suite immediately after `n`\n                                number of failing tests.\n  --browser                     Respect the \"browser\" field in package.json\n                                when resolving modules. Some packages export\n                                different versions based on whether they are\n                                operating in node.js or a browser.\n  --cache                       Whether to use the transform cache. Disable the\n                                cache using --no-cache.\n  --cacheDirectory              The directory where Jest should store its\n                                cached  dependency information.\n  --changedFilesWithAncestor    Runs tests related to the current changes and\n                                the changes made in the last commit. Behaves\n                                similarly to `--onlyChanged`.\n  --changedSince                Runs tests related to the changes since the\n                                provided branch. If the current branch has\n                                diverged from the given branch, then only\n                                changes made locally will be tested. Behaves\n                                similarly to `--onlyChanged`.\n  --ci                          Whether to run Jest in continuous integration\n                                (CI) mode. This option is on by default in most\n                                popular CI environments. It will prevent\n                                snapshots from being written unless explicitly\n                                requested.\n  --clearCache                  Clears the configured Jest cache directory and\n                                then exits. Default directory can be found by\n                                calling jest --showConfig\n  --clearMocks                  Automatically clear mock calls and instances\n                                between every test. Equivalent to calling\n                                jest.clearAllMocks() between each test.\n  --collectCoverage             Alias for --coverage.\n  --collectCoverageFrom         A glob pattern relative to <rootDir> matching\n                                the files that coverage info needs to be\n                                collected from.\n  --collectCoverageOnlyFrom     Explicit list of paths coverage will be\n                                restricted to.\n  --color                       Forces test results output color highlighting\n                                (even if stdout is not a TTY). Set to false if\n                                you would like to have no colors.\n  --colors                      Alias for `--color`.\n  -c --config                   The path to a jest config file specifying how\n                                to find and execute tests. If no rootDir is set\n                                in the config, the directory containing the\n                                config file is assumed to be the rootDir for\n                                the project.This can also be a JSON encoded\n                                value which Jest will use as configuration.\n  --coverage                    Indicates that test coverage information should\n                                be collected and reported in the output.\n  --coverageDirectory           The directory where Jest should output its\n                                coverage files.\n  --coveragePathIgnorePatterns  An array of regexp pattern strings that are\n                                matched against all file paths before executing\n                                the test. If the file pathmatches any of the\n                                patterns, coverage information will be skipped.\n  --coverageProvider            Select between Babel and V8 to collect coverage\n  --coverageReporters           A list of reporter names that Jest uses when\n                                writing coverage reports. Any istanbul reporter\n                                can be used.\n  --coverageThreshold           A JSON string with which will be used to\n                                configure minimum threshold enforcement for\n                                coverage results\n  --debug                       Print debugging info about your jest config.\n  --detectLeaks                 **EXPERIMENTAL**: Detect memory leaks in tests.\n                                After executing a test, it will try to garbage\n                                collect the global object used, and fail if it\n                                was leaked\n  --detectOpenHandles           Print out remaining open handles preventing\n                                Jest from exiting at the end of a test run.\n                                Implies `runInBand`.\n  --env                         The test environment used for all tests. This\n                                can point to any file or node module. Examples:\n                                `jsdom`, `node` or `path/to/my-environment.js`\n  --errorOnDeprecated           Make calling deprecated APIs throw helpful\n                                error messages.\n  -e --expand                   Use this flag to show full diffs instead of a\n                                patch.\n  --filter                      Path to a module exporting a filtering\n                                function. This method receives a list of tests\n                                which can be manipulated to exclude tests from\n                                running. Especially useful when used in\n                                conjunction with a testing infrastructure to\n                                filter known broken tests.\n  --findRelatedTests            Find related tests for a list of source files\n                                that were passed in as arguments. Useful for\n                                pre-commit hook integration to run the minimal\n                                amount of tests necessary.\n  --forceExit                   Force Jest to exit after all tests have\n                                completed running. This is useful when\n                                resources set up by test code cannot be\n                                adequately cleaned up.\n  --globalSetup                 The path to a module that runs before All\n                                Tests.\n  --globalTeardown              The path to a module that runs after All Tests.\n  --globals                     A JSON string with map of global variables that\n                                need to be available in all test environments.\n  --haste                       A JSON string with map of variables for the\n                                haste module system\n  --init                        Generate a basic configuration file\n  --injectGlobals               Should Jest inject global variables or not\n  --json                        Prints the test results in JSON. This mode will\n                                send all other test output and user messages to\n                                stderr.\n  --lastCommit                  Run all tests affected by file changes in the\n                                last commit made. Behaves similarly to\n                                `--onlyChanged`.\n  --listTests                   Lists all tests Jest will run given the\n                                arguments and exits. Most useful in a CI system\n                                together with `--findRelatedTests` to determine\n                                the tests Jest will run based on specific files\n  --logHeapUsage                Logs the heap usage after every test. Useful to\n                                debug memory leaks. Use together with\n                                `--runInBand` and `--expose-gc` in node.\n  --mapCoverage                 Maps code coverage reports against original source code when transformers supply source maps.\n\n  DEPRECATED\n  --maxConcurrency              Specifies the maximum number of tests that are\n                                allowed to runconcurrently. This only affects\n                                tests using `test.concurrent`.\n  -w --maxWorkers               Specifies the maximum number of workers the\n                                worker-pool will spawn for running tests. This\n                                defaults to the number of the cores available\n                                on your machine. (its usually best not to\n                                override this default)\n  --moduleDirectories           An array of directory names to be searched\n                                recursively up from the requiring module's\n                                location.\n  --moduleFileExtensions        An array of file extensions your modules use.\n                                If you require modules without specifying a\n                                file extension, these are the extensions Jest\n                                will look for.\n  --moduleNameMapper            A JSON string with a map from regular\n                                expressions to module names or to arrays of\n                                module names that allow to stub out resources,\n                                like images or styles with a single module\n  --modulePathIgnorePatterns    An array of regexp pattern strings that are\n                                matched against all module paths before those\n                                paths are to be considered \"visible\" to the\n                                module loader.\n  --modulePaths                 An alternative API to setting the NODE_PATH env\n                                variable, modulePaths is an array of absolute\n                                paths to additional locations to search when\n                                resolving modules.\n  --noStackTrace                Disables stack trace in test results output\n  --notify                      Activates notifications for test results.\n  --notifyMode                  Specifies when notifications will appear for\n                                test results.\n  -o --onlyChanged              Attempts to identify which tests to run based\n                                on which files have changed in the current\n                                repository. Only works if you're running tests\n                                in a git or hg repository at the moment.\n  -f --onlyFailures             Run tests that failed in the previous\n                                execution.\n  --outputFile                  Write test results to a file when the --json\n                                option is also specified.\n  --passWithNoTests             Will not fail if no tests are found (for\n                                example while using `--testPathPattern`.)\n  --preset                      A preset that is used as a base for Jest's\n                                configuration.\n  --prettierPath                The path to the \"prettier\" module used for\n                                inline snapshots.\n  --projects                    A list of projects that use Jest to run all\n                                tests of all projects in a single instance of\n                                Jest.\n  --reporters                   A list of custom reporters for the test suite.\n  --resetMocks                  Automatically reset mock state between every\n                                test. Equivalent to calling\n                                jest.resetAllMocks() between each test.\n  --resetModules                If enabled, the module registry for every test\n                                file will be reset before running each\n                                individual test.\n  --resolver                    A JSON string which allows the use of a custom\n                                resolver.\n  --restoreMocks                Automatically restore mock state and\n                                implementation between every test. Equivalent\n                                to calling jest.restoreAllMocks() between each\n                                test.\n  --rootDir                     The root directory that Jest should scan for\n                                tests and modules within.\n  --roots                       A list of paths to directories that Jest should\n                                use to search for files in.\n  -i --runInBand                Run all tests serially in the current process\n                                (rather than creating a worker pool of child\n                                processes that run tests). This is sometimes\n                                useful for debugging, but such use cases are\n                                pretty rare.\n  --runTestsByPath              Used when provided patterns are exact file\n                                paths. This avoids converting them into a\n                                regular expression and matching it against\n                                every single file.\n  --runner                      Allows to use a custom runner instead of Jest's\n                                default test runner.\n  --selectProjects              Run only the tests of the specified\n                                projects.Jest uses the attribute `displayName`\n                                in the configuration to identify each project.\n  --setupFiles                  A list of paths to modules that run some code\n                                to configure or set up the testing environment\n                                before each test.\n  --setupFilesAfterEnv          A list of paths to modules that run some code\n                                to configure or set up the testing framework\n                                before each test\n  --showConfig                  Print your jest config and then exits.\n  --silent                      Prevent tests from printing messages through\n                                the console.\n  --skipFilter                  Disables the filter provided by --filter.\n                                Useful for CI jobs, or local enforcement when\n                                fixing tests.\n  --snapshotSerializers         A list of paths to snapshot serializer modules\n                                Jest should use for snapshot testing.\n  --testEnvironment             Alias for --env\n  --testEnvironmentOptions      Test environment options that will be passed to\n                                the testEnvironment. The relevant options\n                                depend on the environment.\n  --testFailureExitCode         Exit code of `jest` command if the test run\n                                failed\n  --testLocationInResults       Add `location` information to the test results\n  --testMatch                   The glob patterns Jest uses to detect test\n                                files.\n  -t --testNamePattern          Run only tests with a name that matches the\n                                regex pattern.\n  --testPathIgnorePatterns      An array of regexp pattern strings that are\n                                matched against all test paths before executing\n                                the test. If the test path matches any of the\n                                patterns, it will be skipped.\n  --testPathPattern             A regexp pattern string that is matched against\n                                all tests paths before executing the test.\n  --testRegex                   A string or array of string regexp patterns\n                                that Jest uses to detect test files.\n  --testResultsProcessor        Allows the use of a custom results processor.\n                                This processor must be a node module that\n                                exports a function expecting as the first\n                                argument the result object.\n  --testRunner                  Allows to specify a custom test runner. The\n                                default is  `jasmine2`. A path to a custom test\n                                runner can be provided:\n                                `<rootDir>/path/to/testRunner.js`.\n  --testSequencer               Allows to specify a custom test sequencer. The\n                                default is `@jest/test-sequencer`. A path to a\n                                custom test sequencer can be provided:\n                                `<rootDir>/path/to/testSequencer.js`\n  --testTimeout                 This option sets the default timeouts of test\n                                cases.\n  --testURL                     This option sets the URL for the jsdom\n                                environment.\n  --timers                      Setting this value to fake allows the use of\n                                fake timers for functions such as setTimeout.\n  --transform                   A JSON string which maps from regular\n                                expressions to paths to transformers.\n  --transformIgnorePatterns     An array of regexp pattern strings that are\n                                matched against all source file paths before\n                                transformation.\n  --unmockedModulePathPatterns  An array of regexp pattern strings that are\n                                matched against all modules before the module\n                                loader will automatically return a mock for\n                                them.\n  -u --updateSnapshot           Use this flag to re-record snapshots. Can be\n                                used together with a test suite pattern or with\n                                `--testNamePattern` to re-record snapshot for\n                                test matching the pattern\n  --useStderr                   Divert all output to stderr.\n  --verbose                     Display individual test results with the test\n                                suite hierarchy.\n  --watch                       Watch files for changes and rerun tests related\n                                to changed files. If you want to re-run all\n                                tests when a file has changed, use the\n                                `--watchAll` option.\n  --watchAll                    Watch files for changes and rerun all tests. If\n                                you want to re-run only the tests related to\n                                the changed files, use the `--watch` option.\n  --watchPathIgnorePatterns     An array of regexp pattern strings that are\n                                matched against all paths before trigger test\n                                re-run in watch mode. If the test path matches\n                                any of the patterns, it will be skipped.\n  --watchman                    Whether to use watchman for file crawling.\n                                Disable using --no-watchman.\n  -h, --help                    display help for command\n\n```\n\n比如覆盖测试：\n```\nfes test --coverage\n```\n\n### 配置文件\n除了插件内置的默认配置之外，插件遵循 `Jest`的配置文件规范，约定项目根目录下的 `jest.config.js` 为用户配置文件，约定 `packages.json` 的 `jest` 属性内容也是配置。\n\n\n##"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/plugin/plugins/jest.md","start":{"line":3,"column":1,"position":2},"end":{"line":355,"column":5,"position":2533},"range":[2,20470],"fragment":"@fesjs/plugin-jest\n\n集成 [Jest](https://www.jestjs.cn/) 测试框架，目前只支持单元测试和覆盖测试。\n\n## 启用方式\n在 `package.json` 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-jest\": \"^2.0.0\"\n    },\n}\n```\n\n## 约定\n\n- 项目根目录下 `tests` 和 `__tests__` 文件夹中的 `js` 或者 `jsx` 文件为测试文件。\n- 需要覆盖测试的文件范围是`src/index.{js,jsx,ts,tsx,vue}`\n\n例如测试文件 `add.js`：\n```\nfes-template\n├── __tests__\n│   └── add.js\n└── src\n    ├── .fes\n    └── utils\n        └── sum.js\n```\n内容如下：\n```js\nimport sum from '@/utils/sum';\ntest('adds 1 + 2 to equal 3', () => {\n    expect(sum(1, 2)).toBe(3);\n});\n\n```\n\n## 命令 \n在 `fes` 上注册 `test` 命令：\n```bash\n$ fes test\n```\n\n## 配置\n插件实现 Jest 的全部配置，具体请查看 [文档-configuration](https://www.jestjs.cn/docs/configuration#reference)。 也可以使用 `-h` 打印配置帮助信息：\n\n### args 变量\n\n```bash\n$ fes test -h\n```\n打印配置帮助信息:\n```\n$ fes test -h\nUsage: fes test [options]\n\nrun unit tests with jest\n\nOptions:\n  --all                         The opposite of `onlyChanged`. If `onlyChanged`\n                                is set by default, running jest with `--all`\n                                will force Jest to run all tests instead of\n                                running only tests related to changed files.\n  --automock                    Automock all files by default.\n  -b --bail                     Exit the test suite immediately after `n`\n                                number of failing tests.\n  --browser                     Respect the \"browser\" field in package.json\n                                when resolving modules. Some packages export\n                                different versions based on whether they are\n                                operating in node.js or a browser.\n  --cache                       Whether to use the transform cache. Disable the\n                                cache using --no-cache.\n  --cacheDirectory              The directory where Jest should store its\n                                cached  dependency information.\n  --changedFilesWithAncestor    Runs tests related to the current changes and\n                                the changes made in the last commit. Behaves\n                                similarly to `--onlyChanged`.\n  --changedSince                Runs tests related to the changes since the\n                                provided branch. If the current branch has\n                                diverged from the given branch, then only\n                                changes made locally will be tested. Behaves\n                                similarly to `--onlyChanged`.\n  --ci                          Whether to run Jest in continuous integration\n                                (CI) mode. This option is on by default in most\n                                popular CI environments. It will prevent\n                                snapshots from being written unless explicitly\n                                requested.\n  --clearCache                  Clears the configured Jest cache directory and\n                                then exits. Default directory can be found by\n                                calling jest --showConfig\n  --clearMocks                  Automatically clear mock calls and instances\n                                between every test. Equivalent to calling\n                                jest.clearAllMocks() between each test.\n  --collectCoverage             Alias for --coverage.\n  --collectCoverageFrom         A glob pattern relative to <rootDir> matching\n                                the files that coverage info needs to be\n                                collected from.\n  --collectCoverageOnlyFrom     Explicit list of paths coverage will be\n                                restricted to.\n  --color                       Forces test results output color highlighting\n                                (even if stdout is not a TTY). Set to false if\n                                you would like to have no colors.\n  --colors                      Alias for `--color`.\n  -c --config                   The path to a jest config file specifying how\n                                to find and execute tests. If no rootDir is set\n                                in the config, the directory containing the\n                                config file is assumed to be the rootDir for\n                                the project.This can also be a JSON encoded\n                                value which Jest will use as configuration.\n  --coverage                    Indicates that test coverage information should\n                                be collected and reported in the output.\n  --coverageDirectory           The directory where Jest should output its\n                                coverage files.\n  --coveragePathIgnorePatterns  An array of regexp pattern strings that are\n                                matched against all file paths before executing\n                                the test. If the file pathmatches any of the\n                                patterns, coverage information will be skipped.\n  --coverageProvider            Select between Babel and V8 to collect coverage\n  --coverageReporters           A list of reporter names that Jest uses when\n                                writing coverage reports. Any istanbul reporter\n                                can be used.\n  --coverageThreshold           A JSON string with which will be used to\n                                configure minimum threshold enforcement for\n                                coverage results\n  --debug                       Print debugging info about your jest config.\n  --detectLeaks                 **EXPERIMENTAL**: Detect memory leaks in tests.\n                                After executing a test, it will try to garbage\n                                collect the global object used, and fail if it\n                                was leaked\n  --detectOpenHandles           Print out remaining open handles preventing\n                                Jest from exiting at the end of a test run.\n                                Implies `runInBand`.\n  --env                         The test environment used for all tests. This\n                                can point to any file or node module. Examples:\n                                `jsdom`, `node` or `path/to/my-environment.js`\n  --errorOnDeprecated           Make calling deprecated APIs throw helpful\n                                error messages.\n  -e --expand                   Use this flag to show full diffs instead of a\n                                patch.\n  --filter                      Path to a module exporting a filtering\n                                function. This method receives a list of tests\n                                which can be manipulated to exclude tests from\n                                running. Especially useful when used in\n                                conjunction with a testing infrastructure to\n                                filter known broken tests.\n  --findRelatedTests            Find related tests for a list of source files\n                                that were passed in as arguments. Useful for\n                                pre-commit hook integration to run the minimal\n                                amount of tests necessary.\n  --forceExit                   Force Jest to exit after all tests have\n                                completed running. This is useful when\n                                resources set up by test code cannot be\n                                adequately cleaned up.\n  --globalSetup                 The path to a module that runs before All\n                                Tests.\n  --globalTeardown              The path to a module that runs after All Tests.\n  --globals                     A JSON string with map of global variables that\n                                need to be available in all test environments.\n  --haste                       A JSON string with map of variables for the\n                                haste module system\n  --init                        Generate a basic configuration file\n  --injectGlobals               Should Jest inject global variables or not\n  --json                        Prints the test results in JSON. This mode will\n                                send all other test output and user messages to\n                                stderr.\n  --lastCommit                  Run all tests affected by file changes in the\n                                last commit made. Behaves similarly to\n                                `--onlyChanged`.\n  --listTests                   Lists all tests Jest will run given the\n                                arguments and exits. Most useful in a CI system\n                                together with `--findRelatedTests` to determine\n                                the tests Jest will run based on specific files\n  --logHeapUsage                Logs the heap usage after every test. Useful to\n                                debug memory leaks. Use together with\n                                `--runInBand` and `--expose-gc` in node.\n  --mapCoverage                 Maps code coverage reports against original source code when transformers supply source maps.\n\n  DEPRECATED\n  --maxConcurrency              Specifies the maximum number of tests that are\n                                allowed to runconcurrently. This only affects\n                                tests using `test.concurrent`.\n  -w --maxWorkers               Specifies the maximum number of workers the\n                                worker-pool will spawn for running tests. This\n                                defaults to the number of the cores available\n                                on your machine. (its usually best not to\n                                override this default)\n  --moduleDirectories           An array of directory names to be searched\n                                recursively up from the requiring module's\n                                location.\n  --moduleFileExtensions        An array of file extensions your modules use.\n                                If you require modules without specifying a\n                                file extension, these are the extensions Jest\n                                will look for.\n  --moduleNameMapper            A JSON string with a map from regular\n                                expressions to module names or to arrays of\n                                module names that allow to stub out resources,\n                                like images or styles with a single module\n  --modulePathIgnorePatterns    An array of regexp pattern strings that are\n                                matched against all module paths before those\n                                paths are to be considered \"visible\" to the\n                                module loader.\n  --modulePaths                 An alternative API to setting the NODE_PATH env\n                                variable, modulePaths is an array of absolute\n                                paths to additional locations to search when\n                                resolving modules.\n  --noStackTrace                Disables stack trace in test results output\n  --notify                      Activates notifications for test results.\n  --notifyMode                  Specifies when notifications will appear for\n                                test results.\n  -o --onlyChanged              Attempts to identify which tests to run based\n                                on which files have changed in the current\n                                repository. Only works if you're running tests\n                                in a git or hg repository at the moment.\n  -f --onlyFailures             Run tests that failed in the previous\n                                execution.\n  --outputFile                  Write test results to a file when the --json\n                                option is also specified.\n  --passWithNoTests             Will not fail if no tests are found (for\n                                example while using `--testPathPattern`.)\n  --preset                      A preset that is used as a base for Jest's\n                                configuration.\n  --prettierPath                The path to the \"prettier\" module used for\n                                inline snapshots.\n  --projects                    A list of projects that use Jest to run all\n                                tests of all projects in a single instance of\n                                Jest.\n  --reporters                   A list of custom reporters for the test suite.\n  --resetMocks                  Automatically reset mock state between every\n                                test. Equivalent to calling\n                                jest.resetAllMocks() between each test.\n  --resetModules                If enabled, the module registry for every test\n                                file will be reset before running each\n                                individual test.\n  --resolver                    A JSON string which allows the use of a custom\n                                resolver.\n  --restoreMocks                Automatically restore mock state and\n                                implementation between every test. Equivalent\n                                to calling jest.restoreAllMocks() between each\n                                test.\n  --rootDir                     The root directory that Jest should scan for\n                                tests and modules within.\n  --roots                       A list of paths to directories that Jest should\n                                use to search for files in.\n  -i --runInBand                Run all tests serially in the current process\n                                (rather than creating a worker pool of child\n                                processes that run tests). This is sometimes\n                                useful for debugging, but such use cases are\n                                pretty rare.\n  --runTestsByPath              Used when provided patterns are exact file\n                                paths. This avoids converting them into a\n                                regular expression and matching it against\n                                every single file.\n  --runner                      Allows to use a custom runner instead of Jest's\n                                default test runner.\n  --selectProjects              Run only the tests of the specified\n                                projects.Jest uses the attribute `displayName`\n                                in the configuration to identify each project.\n  --setupFiles                  A list of paths to modules that run some code\n                                to configure or set up the testing environment\n                                before each test.\n  --setupFilesAfterEnv          A list of paths to modules that run some code\n                                to configure or set up the testing framework\n                                before each test\n  --showConfig                  Print your jest config and then exits.\n  --silent                      Prevent tests from printing messages through\n                                the console.\n  --skipFilter                  Disables the filter provided by --filter.\n                                Useful for CI jobs, or local enforcement when\n                                fixing tests.\n  --snapshotSerializers         A list of paths to snapshot serializer modules\n                                Jest should use for snapshot testing.\n  --testEnvironment             Alias for --env\n  --testEnvironmentOptions      Test environment options that will be passed to\n                                the testEnvironment. The relevant options\n                                depend on the environment.\n  --testFailureExitCode         Exit code of `jest` command if the test run\n                                failed\n  --testLocationInResults       Add `location` information to the test results\n  --testMatch                   The glob patterns Jest uses to detect test\n                                files.\n  -t --testNamePattern          Run only tests with a name that matches the\n                                regex pattern.\n  --testPathIgnorePatterns      An array of regexp pattern strings that are\n                                matched against all test paths before executing\n                                the test. If the test path matches any of the\n                                patterns, it will be skipped.\n  --testPathPattern             A regexp pattern string that is matched against\n                                all tests paths before executing the test.\n  --testRegex                   A string or array of string regexp patterns\n                                that Jest uses to detect test files.\n  --testResultsProcessor        Allows the use of a custom results processor.\n                                This processor must be a node module that\n                                exports a function expecting as the first\n                                argument the result object.\n  --testRunner                  Allows to specify a custom test runner. The\n                                default is  `jasmine2`. A path to a custom test\n                                runner can be provided:\n                                `<rootDir>/path/to/testRunner.js`.\n  --testSequencer               Allows to specify a custom test sequencer. The\n                                default is `@jest/test-sequencer`. A path to a\n                                custom test sequencer can be provided:\n                                `<rootDir>/path/to/testSequencer.js`\n  --testTimeout                 This option sets the default timeouts of test\n                                cases.\n  --testURL                     This option sets the URL for the jsdom\n                                environment.\n  --timers                      Setting this value to fake allows the use of\n                                fake timers for functions such as setTimeout.\n  --transform                   A JSON string which maps from regular\n                                expressions to paths to transformers.\n  --transformIgnorePatterns     An array of regexp pattern strings that are\n                                matched against all source file paths before\n                                transformation.\n  --unmockedModulePathPatterns  An array of regexp pattern strings that are\n                                matched against all modules before the module\n                                loader will automatically return a mock for\n                                them.\n  -u --updateSnapshot           Use this flag to re-record snapshots. Can be\n                                used together with a test suite pattern or with\n                                `--testNamePattern` to re-record snapshot for\n                                test matching the pattern\n  --useStderr                   Divert all output to stderr.\n  --verbose                     Display individual test results with the test\n                                suite hierarchy.\n  --watch                       Watch files for changes and rerun tests related\n                                to changed files. If you want to re-run all\n                                tests when a file has changed, use the\n                                `--watchAll` option.\n  --watchAll                    Watch files for changes and rerun all tests. If\n                                you want to re-run only the tests related to\n                                the changed files, use the `--watch` option.\n  --watchPathIgnorePatterns     An array of regexp pattern strings that are\n                                matched against all paths before trigger test\n                                re-run in watch mode. If the test path matches\n                                any of the patterns, it will be skipped.\n  --watchman                    Whether to use watchman for file crawling.\n                                Disable using --no-watchman.\n  -h, --help                    display help for command\n\n```\n\n比如覆盖测试：\n```\nfes test --coverage\n```\n\n### 配置文件\n除了插件内置的默认配置之外，插件遵循 `Jest`的配置文件规范，约定项目根目录下的 `jest.config.js` 为用户配置文件，约定 `packages.json` 的 `jest` 属性内容也是配置。\n\n\n##"}},{"format":"markdown","foundDate":1638413756448,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/reference/plugin/plugins/icon.md","start":{"line":5,"column":1,"position":4},"end":{"line":32,"column":2,"position":144},"range":[4,413],"fragment":"esjs/plugin-icon\n\n## 介绍\n\n提供以 `component` 的方式，直接使用 svg icon 的能力。\n## 启用方式\n\n在 `package.json` 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-icon\": \"^2.0.0\"\n    },\n}\n```\n\n## 使用\n\n新建 `src/icons` 目录，将 svg 文件放入其中，在 `component` 中引用：\n\n```jsx\n<fes-icon type=\"iconName\" />\n```\n\n### 属性\n\n| 属性 | 说明 | 类型 |\n| :-----| :---- | :---- |\n| type | svg 文件名 | `string` |\n| spin | 是否无限旋转"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/plugin/plugins/icon.md","start":{"line":5,"column":1,"position":4},"end":{"line":32,"column":2,"position":144},"range":[4,413],"fragment":"esjs/plugin-icon\n\n## 介绍\n\n提供以 `component` 的方式，直接使用 svg icon 的能力。\n## 启用方式\n\n在 `package.json` 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-icon\": \"^2.0.0\"\n    },\n}\n```\n\n## 使用\n\n新建 `src/icons` 目录，将 svg 文件放入其中，在 `component` 中引用：\n\n```jsx\n<fes-icon type=\"iconName\" />\n```\n\n### 属性\n\n| 属性 | 说明 | 类型 |\n| :-----| :---- | :---- |\n| type | svg 文件名 | `string` |\n| spin | 是否无限旋转"}},{"format":"javascript","foundDate":1638413756452,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/reference/plugin/plugins/enums.md","start":{"line":62,"column":2,"position":169},"end":{"line":110,"column":1,"position":398},"range":[1041,2296],"fragment":"2', { dir: 'eName' })}}</div>\n    </div>\n</template>\n<script>\nimport { enums } from '@fesjs/fes';\n\nexport default {\n    setup() {\n        // 动态添加枚举，枚举项是对象，并指定key的属性名为id\n        enums.push('roles', [\n            {\n                id: '1',\n                cName: '系统管理员',\n                eName: 'System',\n                perm: ['1', '2', '3']\n            },\n            {\n                id: '2',\n                cName: '业务管理员',\n                eName: 'Business',\n                perm: ['1', '2']\n            },\n            {\n                id: '3',\n                cName: '普通用户',\n                eName: 'User',\n                perm: ['1']\n            }\n        ], { keyName: 'id' });\n        // 导出定制格式的roles，扩展枚举项新的属性name、disabled\n        const roles = enums.get('roles', {\n            extend: [\n                {\n                    key: 'name',\n                    dir: 'cName' // 指定取值路径，取属性cName的值\n                },\n                {\n                    key: 'disabled',\n                    // 传入函数，获取结果值\n                    transfer: item => item.value.perm.some(i => i >= 2)\n                }\n            ]\n        });\n        console.log(roles);\n        // [{key: '1', name: '系统管理员', disabled: true, value: {...}}, ....]\n        return {\n          "},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/plugin/plugins/enums.md","start":{"line":62,"column":2,"position":169},"end":{"line":110,"column":1,"position":398},"range":[1041,2296],"fragment":"2', { dir: 'eName' })}}</div>\n    </div>\n</template>\n<script>\nimport { enums } from '@fesjs/fes';\n\nexport default {\n    setup() {\n        // 动态添加枚举，枚举项是对象，并指定key的属性名为id\n        enums.push('roles', [\n            {\n                id: '1',\n                cName: '系统管理员',\n                eName: 'System',\n                perm: ['1', '2', '3']\n            },\n            {\n                id: '2',\n                cName: '业务管理员',\n                eName: 'Business',\n                perm: ['1', '2']\n            },\n            {\n                id: '3',\n                cName: '普通用户',\n                eName: 'User',\n                perm: ['1']\n            }\n        ], { keyName: 'id' });\n        // 导出定制格式的roles，扩展枚举项新的属性name、disabled\n        const roles = enums.get('roles', {\n            extend: [\n                {\n                    key: 'name',\n                    dir: 'cName' // 指定取值路径，取属性cName的值\n                },\n                {\n                    key: 'disabled',\n                    // 传入函数，获取结果值\n                    transfer: item => item.value.perm.some(i => i >= 2)\n                }\n            ]\n        });\n        console.log(roles);\n        // [{key: '1', name: '系统管理员', disabled: true, value: {...}}, ....]\n        return {\n          "}},{"format":"markdown","foundDate":1638413756452,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/reference/plugin/plugins/enums.md","start":{"line":3,"column":1,"position":2},"end":{"line":226,"column":4,"position":713},"range":[2,4515],"fragment":"@fesjs/plugin-enums\n## 介绍\n日常业务开发中，有很多场景会使用到枚举值，比如select-options、table-column。\n\n该插件提供统一的枚举存取及丰富的函数来处理枚举。\n## 启用方式\n在 `package.json` 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-enums\": \"^2.0.0\"\n    }\n}\n```\n\n## 配置\n\n### 静态配置\n在 `.fes.js` 中配置：\n```js\n// 配置格式：[[key, value], ...]\nexport default {\n    enums: {\n        status: [['0', '无效的'], ['1', '有效的']]\n    }\n}\n```\n\n### 动态配置\n在业务代码中\n```js\nimport { enums } from '@fesjs/fes';\n// 动态添加\nenums.push('status', [['0', '无效的'], ['1', '有效的']]\nenums.get('status', '1') // 有效的\n```\n\n## 场景使用\n- 动态添加的枚举项支持数组和对象\n\n- 枚举项为对象时，可以指定keyName和valueName属性名\n\n- 导出枚举值，可指定取值的路径\n\n- 导出枚举可扩展属性\n```vue\n<template>\n    <div>\n        <!-- 遍历枚举status -->\n        <div v-for=\"item in enumsGet('status')\" :key=\"item.key\">\n            {{item.value}}：{{item.key}}\n        </div>\n        <!-- 遍历枚举扩展后的roles -->\n        <div v-for=\"item in roles\" :key=\"item.key\">\n            {{item.name}}：{{item.disabled}}\n        </div>\n        <!-- 获取枚举roles为2的英文名 -->\n        <div>{{enumsGet('roles', '2', { dir: 'eName' })}}</div>\n    </div>\n</template>\n<script>\nimport { enums } from '@fesjs/fes';\n\nexport default {\n    setup() {\n        // 动态添加枚举，枚举项是对象，并指定key的属性名为id\n        enums.push('roles', [\n            {\n                id: '1',\n                cName: '系统管理员',\n                eName: 'System',\n                perm: ['1', '2', '3']\n            },\n            {\n                id: '2',\n                cName: '业务管理员',\n                eName: 'Business',\n                perm: ['1', '2']\n            },\n            {\n                id: '3',\n                cName: '普通用户',\n                eName: 'User',\n                perm: ['1']\n            }\n        ], { keyName: 'id' });\n        // 导出定制格式的roles，扩展枚举项新的属性name、disabled\n        const roles = enums.get('roles', {\n            extend: [\n                {\n                    key: 'name',\n                    dir: 'cName' // 指定取值路径，取属性cName的值\n                },\n                {\n                    key: 'disabled',\n                    // 传入函数，获取结果值\n                    transfer: item => item.value.perm.some(i => i >= 2)\n                }\n            ]\n        });\n        console.log(roles);\n        // [{key: '1', name: '系统管理员', disabled: true, value: {...}}, ....]\n        return {\n            enumsGet: enums.get,\n            roles\n        };\n    }\n};\n</script>\n\n```\n## API\n### get\n* `get(name: string)` 获取指定名字的枚举\n\n* `get(name: string, key: string)` 获取指定名字及键枚举默认值\n\n* `get(name: string, opt: {extend: Array<Object>})` 获取指定名字的自定义格式枚举，[查看extend配置](#extend配置)\n\n* `get(name: string, key: string, opt: {dir: string})` 获取指定名字及键枚举[dir规则](#dir规则)的值\n\n```js\nget('status')\nget('status', '1')\nget('status', {\n    extend: [\n        {\n            key: 'name',\n            dir: 'value',\n        },\n        {\n            key: 'disabled',\n            transfer: item => item === '0'\n        }\n    ]\n})\nget('status', '1', {dir: 'value'})\n```\n\n### push\n动态添加枚举，重复添加会覆盖\n* `push(name: string, _enum: Array<Array>)`\n* `push(name: string, _enum: Array<Object>, opt?: Object)`\n    * opt.keyName 指定key的取值属性，默认是key\n    * opt.valueName 指定value的取值属性\n\n枚举项为数组，枚举项的[0]解析为key，枚举项的[1]解析为value\n\n枚举项为对象时，根据opt配置keyName、valueName取枚举项属性值分别作为key和value，`如果valueName未设置则value就是枚举项`\n\n### remove\n* remove(name: string)\n\n移除指定的枚举\n### concat\n基于现有的枚举，连接上新的枚举后返回新的枚举\n* `concat(name: string, _enum: Array<Array|Object>, opt?: Object))`\n    * opt.keyName 指定key的取值属性，默认是key\n    * opt.valueName 指定value的取值属性\n    * opt.before 是否添加在现有的之前，默认是false\n    * opt.extend：返回的枚举[extend配置](#extend配置)\n\n### convert\n将传入的枚举格式转换为{key, value}的形式\n* `convert(name: string, _enum: Array<Array|Object>, opt?: Object))`\n    * opt.keyName 指定key的取值属性，默认是key\n    * opt.valueName 指定value的取值属性\n\n### extend配置\n扩展枚举项属性的配置\n* `extend: Array<Object>`\n    * `key` 指定扩展的属性名\n    * `dir` 指定该属性的取值路径\n    * `transfer(item: {key: any, value: any})` 转换函数，参数未枚举项，返回就是该属性的值\n::: tip\n同时设置[dir](#dir规则)和transfer，transfer优先\n:::\n\n```js\nget('status', {\n    extend: [\n        {\n            key: 'name',\n            dir: 'value',\n        },\n        {\n            key: 'disabled',\n            transfer: item => item.key === '0'\n        }\n    ]\n})\n```\n\n\n### dir规则\ndir是指定枚举项value的取值方式，规则如下：\n* 对象属性 `A`、`A.B`\n* 数组 `[0]`、`[0][1]`\n* 混合 `A[0]`、`[0].A`、`A[0].B`\n\n```js\n// 假如枚举项value的结构如下\nconst user = {\n    age: 18,\n    name: 'aring',\n    role: [\n        {\n            id: 1,\n            name: '管理员'\n        },\n                    {\n            id: 2,\n            name: '业务操作员'\n        }\n    ]\n}\n// 那么规则解析是：\ndir            "},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/plugin/plugins/enums.md","start":{"line":3,"column":1,"position":2},"end":{"line":226,"column":4,"position":713},"range":[2,4515],"fragment":"@fesjs/plugin-enums\n## 介绍\n日常业务开发中，有很多场景会使用到枚举值，比如select-options、table-column。\n\n该插件提供统一的枚举存取及丰富的函数来处理枚举。\n## 启用方式\n在 `package.json` 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-enums\": \"^2.0.0\"\n    }\n}\n```\n\n## 配置\n\n### 静态配置\n在 `.fes.js` 中配置：\n```js\n// 配置格式：[[key, value], ...]\nexport default {\n    enums: {\n        status: [['0', '无效的'], ['1', '有效的']]\n    }\n}\n```\n\n### 动态配置\n在业务代码中\n```js\nimport { enums } from '@fesjs/fes';\n// 动态添加\nenums.push('status', [['0', '无效的'], ['1', '有效的']]\nenums.get('status', '1') // 有效的\n```\n\n## 场景使用\n- 动态添加的枚举项支持数组和对象\n\n- 枚举项为对象时，可以指定keyName和valueName属性名\n\n- 导出枚举值，可指定取值的路径\n\n- 导出枚举可扩展属性\n```vue\n<template>\n    <div>\n        <!-- 遍历枚举status -->\n        <div v-for=\"item in enumsGet('status')\" :key=\"item.key\">\n            {{item.value}}：{{item.key}}\n        </div>\n        <!-- 遍历枚举扩展后的roles -->\n        <div v-for=\"item in roles\" :key=\"item.key\">\n            {{item.name}}：{{item.disabled}}\n        </div>\n        <!-- 获取枚举roles为2的英文名 -->\n        <div>{{enumsGet('roles', '2', { dir: 'eName' })}}</div>\n    </div>\n</template>\n<script>\nimport { enums } from '@fesjs/fes';\n\nexport default {\n    setup() {\n        // 动态添加枚举，枚举项是对象，并指定key的属性名为id\n        enums.push('roles', [\n            {\n                id: '1',\n                cName: '系统管理员',\n                eName: 'System',\n                perm: ['1', '2', '3']\n            },\n            {\n                id: '2',\n                cName: '业务管理员',\n                eName: 'Business',\n                perm: ['1', '2']\n            },\n            {\n                id: '3',\n                cName: '普通用户',\n                eName: 'User',\n                perm: ['1']\n            }\n        ], { keyName: 'id' });\n        // 导出定制格式的roles，扩展枚举项新的属性name、disabled\n        const roles = enums.get('roles', {\n            extend: [\n                {\n                    key: 'name',\n                    dir: 'cName' // 指定取值路径，取属性cName的值\n                },\n                {\n                    key: 'disabled',\n                    // 传入函数，获取结果值\n                    transfer: item => item.value.perm.some(i => i >= 2)\n                }\n            ]\n        });\n        console.log(roles);\n        // [{key: '1', name: '系统管理员', disabled: true, value: {...}}, ....]\n        return {\n            enumsGet: enums.get,\n            roles\n        };\n    }\n};\n</script>\n\n```\n## API\n### get\n* `get(name: string)` 获取指定名字的枚举\n\n* `get(name: string, key: string)` 获取指定名字及键枚举默认值\n\n* `get(name: string, opt: {extend: Array<Object>})` 获取指定名字的自定义格式枚举，[查看extend配置](#extend配置)\n\n* `get(name: string, key: string, opt: {dir: string})` 获取指定名字及键枚举[dir规则](#dir规则)的值\n\n```js\nget('status')\nget('status', '1')\nget('status', {\n    extend: [\n        {\n            key: 'name',\n            dir: 'value',\n        },\n        {\n            key: 'disabled',\n            transfer: item => item === '0'\n        }\n    ]\n})\nget('status', '1', {dir: 'value'})\n```\n\n### push\n动态添加枚举，重复添加会覆盖\n* `push(name: string, _enum: Array<Array>)`\n* `push(name: string, _enum: Array<Object>, opt?: Object)`\n    * opt.keyName 指定key的取值属性，默认是key\n    * opt.valueName 指定value的取值属性\n\n枚举项为数组，枚举项的[0]解析为key，枚举项的[1]解析为value\n\n枚举项为对象时，根据opt配置keyName、valueName取枚举项属性值分别作为key和value，`如果valueName未设置则value就是枚举项`\n\n### remove\n* remove(name: string)\n\n移除指定的枚举\n### concat\n基于现有的枚举，连接上新的枚举后返回新的枚举\n* `concat(name: string, _enum: Array<Array|Object>, opt?: Object))`\n    * opt.keyName 指定key的取值属性，默认是key\n    * opt.valueName 指定value的取值属性\n    * opt.before 是否添加在现有的之前，默认是false\n    * opt.extend：返回的枚举[extend配置](#extend配置)\n\n### convert\n将传入的枚举格式转换为{key, value}的形式\n* `convert(name: string, _enum: Array<Array|Object>, opt?: Object))`\n    * opt.keyName 指定key的取值属性，默认是key\n    * opt.valueName 指定value的取值属性\n\n### extend配置\n扩展枚举项属性的配置\n* `extend: Array<Object>`\n    * `key` 指定扩展的属性名\n    * `dir` 指定该属性的取值路径\n    * `transfer(item: {key: any, value: any})` 转换函数，参数未枚举项，返回就是该属性的值\n::: tip\n同时设置[dir](#dir规则)和transfer，transfer优先\n:::\n\n```js\nget('status', {\n    extend: [\n        {\n            key: 'name',\n            dir: 'value',\n        },\n        {\n            key: 'disabled',\n            transfer: item => item.key === '0'\n        }\n    ]\n})\n```\n\n\n### dir规则\ndir是指定枚举项value的取值方式，规则如下：\n* 对象属性 `A`、`A.B`\n* 数组 `[0]`、`[0][1]`\n* 混合 `A[0]`、`[0].A`、`A[0].B`\n\n```js\n// 假如枚举项value的结构如下\nconst user = {\n    age: 18,\n    name: 'aring',\n    role: [\n        {\n            id: 1,\n            name: '管理员'\n        },\n                    {\n            id: 2,\n            name: '业务操作员'\n        }\n    ]\n}\n// 那么规则解析是：\ndir            "}},{"format":"javascript","foundDate":1638413756455,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/reference/plugin/plugins/editor.md","start":{"line":87,"column":2,"position":268},"end":{"line":100,"column":1,"position":318},"range":[2407,2610],"fragment":"ditor \n        v-model=\"json\"\n        language=\"json\"\n        height=\"400px\"\n        check>\n    </MonacoEditor>\n</template>\n<script>\nimport { MonacoEditor } from '@fesjs/fes';\nexport default {\n    compon"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/plugin/plugins/editor.md","start":{"line":87,"column":2,"position":268},"end":{"line":100,"column":1,"position":318},"range":[2407,2610],"fragment":"ditor \n        v-model=\"json\"\n        language=\"json\"\n        height=\"400px\"\n        check>\n    </MonacoEditor>\n</template>\n<script>\nimport { MonacoEditor } from '@fesjs/fes';\nexport default {\n    compon"}},{"format":"markdown","foundDate":1638413756455,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/reference/plugin/plugins/editor.md","start":{"line":5,"column":1,"position":4},"end":{"line":120,"column":2,"position":578},"range":[4,3290],"fragment":"esjs/plugin-monaco-editor\n\n\n## 介绍\n我们会遇到需要编辑代码的场景，比如编辑`json`、`javascript`、`python`等等，[Monaco Editor](https://github.com/Microsoft/monaco-editor) 是\b一个好用而且强大的的代码编辑器库，引入`Monaco Editor`有一定的成本，插件实现了胶水代码，提供轻松引入的能力。目前内置的 `Monaco Editor` 版本是 `1.9.1`。\n\n## 启用方式\n在 `package.json` 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-monaco-editor\": \"^2.0.0\"\n    },\n}\n```\n\n## 配置\n\n### 编译时配置\n在执行 `fes dev` 或者 `fes build` 时，通过此配置生成运行时的代码，在配置文件`.fes.js` 中配置：\n```js\nexport default {\n    monacoEditor: {\n        languages: ['javascript', 'typescript', 'html', 'json']\n    }\n}\n```\n我们通过 `monaco-editor-webpack-plugin` 集成 `Monaco Editor` 的 `ESM`版本，所以编辑时其实就是 `monaco-editor-webpack-plugin` 的配置，具体配置项参考[文档](https://github.com/Microsoft/monaco-editor-webpack-plugin)。\n\n\n#### filename\n- **类型**：自定义worker脚本名称\n  \n- **默认值**：`'[name].worker.js'`\n\n#### publicPath\n- **类型**：自定义worker脚本的路径\n  \n- **默认值**：`''`\n\n#### languages\n- **类型**：需要支持的语言类型\n  \n- **默认值**：`['abap', 'apex', 'azcli', 'bat', 'bicep', 'cameligo', 'clojure', 'coffee', 'cpp', 'csharp', 'csp', 'css', 'dart', 'dockerfile', 'ecl', 'elixir', 'fsharp', 'go', 'graphql', 'handlebars', 'hcl', 'html', 'ini', 'java', 'javascript', 'json', 'julia', 'kotlin', 'less', 'lexon', 'liquid', 'lua', 'm3', 'markdown', 'mips', 'msdax', 'mysql', 'objective-c', 'pascal', 'pascaligo', 'perl', 'pgsql', 'php', 'postiats', 'powerquery', 'powershell', 'pug', 'python', 'qsharp', 'r', 'razor', 'redis', 'redshift', 'restructuredtext', 'ruby', 'rust', 'sb', 'scala', 'scheme', 'scss', 'shell', 'solidity', 'sophia', 'sparql', 'sql', 'st', 'swift', 'systemverilog', 'tcl', 'twig', 'typescript', 'vb', 'xml', 'yaml']`\n\n- **详情**：默认是全部，但是编译后包体积会非常大，建议用到什么语言则配置什么语言。特别某些语言依赖其他语言，例如`javascript`依赖`typescript`，需要使用`javascript`时需要配置为：\n```js\nexport default {\n    monacoEditor: {\n        languages: ['javascript', 'typescript']\n    }\n}\n```\n\n## API\n\n### monaco\n编辑器的全局对象，提供扩展语言，自定义主题等等API，具体用法请查看[monaco](https://microsoft.github.io/monaco-editor/)官方文档。\n```js\nimport { monaco } from '@fesjs/fes';\n\nmonaco.editor.defineTheme('myCoolTheme', {\n\tbase: 'vs',\n\tinherit: false,\n\trules: [\n\t\t{ token: 'custom-info', foreground: '808080' },\n\t\t{ token: 'custom-error', foreground: 'ff0000', fontStyle: 'bold' },\n\t\t{ token: 'custom-notice', foreground: 'FFA500' },\n\t\t{ token: 'custom-date', foreground: '008800' },\n\t]\n});\n\n```\n\n### 组件 MonacoEditor\n\n```vue\n<template>\n    <MonacoEditor \n        v-model=\"json\"\n        language=\"json\"\n        height=\"400px\"\n        check>\n    </MonacoEditor>\n</template>\n<script>\nimport { MonacoEditor } from '@fesjs/fes';\nexport default {\n    components: {\n        MonacoEditor\n    },\n    setup(){\n        const json = ref('');\n        return {\n            json\n        };\n    }\n}\n</script>\n```\n\n#### props\n| 属性 | 说明 | 类型 | 默认值  |\n| ------------- | ------------- | ------------- | ------------- |\n| theme  | 编辑器的主题，使用其他主题需要先使用`monaco.editor.defineTheme`定义主题 | string | `defaultTheme` |\n| language | 编辑器的语言 | string | - |\n| height  | 编辑器的高度 | string | `100%` |\n| width  | 编辑器的宽度 | string | `100%` |\n| modelValue(v-model)  | 编辑器的代码 | string | - |\n| readOnly  | 是否只读 | boolean | `false` |\n| options  | 编辑器的配置对象 | object | `{}` |\n| check  | 是否检查代码，如果检查不通过则不更新数据，目前只支持`json` | boolean | `false` |\n\n#### events\n\n| 事件名称 | 说明 | 回调参数 |\n| "},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/plugin/plugins/editor.md","start":{"line":5,"column":1,"position":4},"end":{"line":120,"column":2,"position":578},"range":[4,3290],"fragment":"esjs/plugin-monaco-editor\n\n\n## 介绍\n我们会遇到需要编辑代码的场景，比如编辑`json`、`javascript`、`python`等等，[Monaco Editor](https://github.com/Microsoft/monaco-editor) 是\b一个好用而且强大的的代码编辑器库，引入`Monaco Editor`有一定的成本，插件实现了胶水代码，提供轻松引入的能力。目前内置的 `Monaco Editor` 版本是 `1.9.1`。\n\n## 启用方式\n在 `package.json` 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-monaco-editor\": \"^2.0.0\"\n    },\n}\n```\n\n## 配置\n\n### 编译时配置\n在执行 `fes dev` 或者 `fes build` 时，通过此配置生成运行时的代码，在配置文件`.fes.js` 中配置：\n```js\nexport default {\n    monacoEditor: {\n        languages: ['javascript', 'typescript', 'html', 'json']\n    }\n}\n```\n我们通过 `monaco-editor-webpack-plugin` 集成 `Monaco Editor` 的 `ESM`版本，所以编辑时其实就是 `monaco-editor-webpack-plugin` 的配置，具体配置项参考[文档](https://github.com/Microsoft/monaco-editor-webpack-plugin)。\n\n\n#### filename\n- **类型**：自定义worker脚本名称\n  \n- **默认值**：`'[name].worker.js'`\n\n#### publicPath\n- **类型**：自定义worker脚本的路径\n  \n- **默认值**：`''`\n\n#### languages\n- **类型**：需要支持的语言类型\n  \n- **默认值**：`['abap', 'apex', 'azcli', 'bat', 'bicep', 'cameligo', 'clojure', 'coffee', 'cpp', 'csharp', 'csp', 'css', 'dart', 'dockerfile', 'ecl', 'elixir', 'fsharp', 'go', 'graphql', 'handlebars', 'hcl', 'html', 'ini', 'java', 'javascript', 'json', 'julia', 'kotlin', 'less', 'lexon', 'liquid', 'lua', 'm3', 'markdown', 'mips', 'msdax', 'mysql', 'objective-c', 'pascal', 'pascaligo', 'perl', 'pgsql', 'php', 'postiats', 'powerquery', 'powershell', 'pug', 'python', 'qsharp', 'r', 'razor', 'redis', 'redshift', 'restructuredtext', 'ruby', 'rust', 'sb', 'scala', 'scheme', 'scss', 'shell', 'solidity', 'sophia', 'sparql', 'sql', 'st', 'swift', 'systemverilog', 'tcl', 'twig', 'typescript', 'vb', 'xml', 'yaml']`\n\n- **详情**：默认是全部，但是编译后包体积会非常大，建议用到什么语言则配置什么语言。特别某些语言依赖其他语言，例如`javascript`依赖`typescript`，需要使用`javascript`时需要配置为：\n```js\nexport default {\n    monacoEditor: {\n        languages: ['javascript', 'typescript']\n    }\n}\n```\n\n## API\n\n### monaco\n编辑器的全局对象，提供扩展语言，自定义主题等等API，具体用法请查看[monaco](https://microsoft.github.io/monaco-editor/)官方文档。\n```js\nimport { monaco } from '@fesjs/fes';\n\nmonaco.editor.defineTheme('myCoolTheme', {\n\tbase: 'vs',\n\tinherit: false,\n\trules: [\n\t\t{ token: 'custom-info', foreground: '808080' },\n\t\t{ token: 'custom-error', foreground: 'ff0000', fontStyle: 'bold' },\n\t\t{ token: 'custom-notice', foreground: 'FFA500' },\n\t\t{ token: 'custom-date', foreground: '008800' },\n\t]\n});\n\n```\n\n### 组件 MonacoEditor\n\n```vue\n<template>\n    <MonacoEditor \n        v-model=\"json\"\n        language=\"json\"\n        height=\"400px\"\n        check>\n    </MonacoEditor>\n</template>\n<script>\nimport { MonacoEditor } from '@fesjs/fes';\nexport default {\n    components: {\n        MonacoEditor\n    },\n    setup(){\n        const json = ref('');\n        return {\n            json\n        };\n    }\n}\n</script>\n```\n\n#### props\n| 属性 | 说明 | 类型 | 默认值  |\n| ------------- | ------------- | ------------- | ------------- |\n| theme  | 编辑器的主题，使用其他主题需要先使用`monaco.editor.defineTheme`定义主题 | string | `defaultTheme` |\n| language | 编辑器的语言 | string | - |\n| height  | 编辑器的高度 | string | `100%` |\n| width  | 编辑器的宽度 | string | `100%` |\n| modelValue(v-model)  | 编辑器的代码 | string | - |\n| readOnly  | 是否只读 | boolean | `false` |\n| options  | 编辑器的配置对象 | object | `{}` |\n| check  | 是否检查代码，如果检查不通过则不更新数据，目前只支持`json` | boolean | `false` |\n\n#### events\n\n| 事件名称 | 说明 | 回调参数 |\n| "}},{"format":"javascript","foundDate":1638413756459,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/reference/plugin/plugins/access.md","start":{"line":18,"column":2,"position":76},"end":{"line":280,"column":1,"position":1042},"range":[382,4871],"fragment":"cess2 </div>\n</template>\n<script>\nexport default {\n    setup(){\n        return {\n            accessId: 'accessOnepicess'\n        }\n    }\n}\n</script>\n```\n\n\n### 匹配规则\n\n#### 全等匹配\n资源的匹配规则默认是使用全等匹配，比如页面 `pages/a.vue` 对应路由 `path` 是 `/a`，则 `/a` 就是页面的资源ID。如果我们设置：\n```js\naccess.setAccess(['/a'])\n```\n由于权限列表中包含`/a`，则表示拥有此页面权限。\n\n#### 模糊匹配\n页面`@id.vue`会映射为动态路由`/:id`，想匹配此页面有两种办法：\n- **access.setAccess(['/:id'])**\n- **access.setAccess(['/*'])**\n\n第二种是模糊匹配，`*`表示任意路径。比如角色`admin`需要全部权限，则可以：\n```js\nexport default {\n    access: {\n        roles: {\n            admin: [\"*\"]\n        }\n    }\n}\n```\n\n\n### 角色\n通常我们会用角色来控制权限，相应的Fes.js 用角色定义一组资源。当访问 Fes.js 应用时，使用插件提供的 API 设置用户的角色，角色对应的资源才可见，非角色对应的资源不可见。\n\n\n当然有时候业务比较复杂，角色对应的权限是动态的。不要怕！插件提供粒度更细的 API 来设置当前用户能访问的资源。\n\n\n## 启用方式\n在 `package.json` 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-access\": \"^2.0.0\"\n    },\n}\n```\n\n## 配置\n\n### 编译时配置\n在执行 `fes dev` 或者 `fes build` 时，通过此配置生成运行时的代码，在配置文件`.fes.js` 中配置：\n```js\nexport default {\n    access: {\n        roles: {\n            admin: [\"/\", \"/onepiece\", '/store']\n        }\n    }\n}\n```\n\n#### roles\n- **类型**：对象\n  \n- **默认值**：`{}`\n\n- **详情**：     \n  \n  角色预定义列表。`key` 是角色 Id ，`value`是角色 Id 对应的资源列表。\n\n\n### 运行时配置\n在 `app.js` 中配置\n\n#### unAccessHandler\n- **类型**：`Function`\n  \n- **默认值**：`null`\n\n- **详情**：     \n  \n  当进入某个路由时，如果路由对应的页面不属于可见资源列表，则会暂停进入，调用 `unAccessHandler` 函数。\n- **参数**\n  - router：createRouter 创建的路由实例\n  - to： 准备进入的路由\n  - from：离开的路由\n  - next： [next函数](https://next.router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%8F%AF%E9%80%89%E7%9A%84%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0-next)\n\n比如：\n```js\nexport const access = {\n    unAccessHandler({ to, next }) {\n        const accesssIds = accessApi.getAccess();\n        if (to.path === '/404') {\n            accessApi.setAccess(accesssIds.concat(['/404']));\n            return next('/404');\n        }\n        if (!accesssIds.includes('/403')) {\n            accessApi.setAccess(accesssIds.concat(['/403']));\n        }\n        next('/403');\n    }\n};\n\n```\n\n#### noFoundHandler\n- **类型**：`Function`\n  \n- **默认值**：`null`\n\n- **详情**：     \n  \n  当进入某个路由时，如果路由对应的页面不存在，则会调用 `noFoundHandler` 函数。\n- **参数**\n  - router：createRouter 创建的路由实例\n  - to： 准备进入的路由\n  - from：离开的路由\n  - next： [next函数](https://next.router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%8F%AF%E9%80%89%E7%9A%84%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0-next)\n\n比如：\n```js\nexport const access = {\n    noFoundHandler({ next }) {\n        const accesssIds = accessApi.getAccess();\n        if (!accesssIds.includes('/404')) {\n            accessApi.setAccess(accesssIds.concat(['/404']));\n        }\n        next('/404');\n    }\n};\n\n```\n\n## API\n\n### access\n插件 API 通过 `@fesjs/fes` 导出：\n```js\nimport { access } from '@fesjs/fes'\n```\n\n#### access.hasAccess\n- **类型**：函数\n  \n- **详情**: 判断某个资源是否可见。\n- **参数**：\n  - accessId，资源Id\n- **返回值**：Boolean\n\n#### access.isDataReady\n- **类型**：函数\n  \n- **详情**：可以用异步数据来设置权限，`isDataReady` 用来判断异步数据是否已经加载完毕。\n- **参数**：null\n- **返回值**：Boolean\n```js\nimport { access } from '@fesjs/fes';\nconsole.log(access.isDataReady())\n```\n\n#### access.setRole\n- **类型**：函数\n  \n- **详情**：设置当前的角色。\n- **参数**：\n  - roleId，角色Id，有两种类型：\n    - String，对应着 `roles` 配置对象中的 `key`。\n    - Promise，Promise resolve 的结果应对应着 `roles` 配置对象中的 `key`。\n```js\nimport { access } from '@fesjs/fes';\naccess.setRole(['admin'])\n```\n\n#### access.setAccess\n- **类型**：函数\n  \n- **详情**：设置当前的角色。\n- **参数**：\n  - accessIds，资源Id数组，有两种类型：\n    - Array，数组项对应着 `roles` 配置对象中的 `key`。\n    - Promise，Promise resolve 的结果应该是`Array<accessId>`。\n```js\nimport { access } from '@fesjs/fes';\naccess.setAccess(['/a', '/b', '/c'])\n```\n\n#### access.getAccess\n- **类型**：函数\n  \n- **详情**：返回当前可见的资源列表。\n- **参数**：null\n\n```js\nimport { access } from '@fesjs/fes';\naccess.getAccess();\n```\n\n### useAccess\n- **类型**：[composition]((https://v3.cn.vuejs.org/guide/composition-api-introduction.html)) 函数\n  \n- **详情**：判断某个资源是否可见。\n- **参数**：\n  - accessId，资源Id\n- **返回值**：`ref`\n  \n```vue\n<template>\n    <div v-if=\"accessOnepicess\">accessOnepicess</div>\n</template>\n<script>\nimport { useAccess } from '@fesjs/fes';\nexport default {\n    setup(){\n        const accessOnepicess = useAccess('/onepiece1');\n        return {\n            accessOnepicess\n        }\n    }\n}\n</script>\n```\n### v-access\n在指令 `v-access` 中传入 `accessId`，则当 `accessId` 拥有权限时显示DOM，当没有权限时隐藏此DOM。\n```vue\n<template>\n    <div v-access=\"accessId\"> accessOnepicess </div>\n</template>\n<script>\nexport default {\n    setup(){\n        return {\n            accessId: 'accessOnepicess'\n       "},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/plugin/plugins/access.md","start":{"line":18,"column":2,"position":76},"end":{"line":280,"column":1,"position":1042},"range":[382,4871],"fragment":"cess2 </div>\n</template>\n<script>\nexport default {\n    setup(){\n        return {\n            accessId: 'accessOnepicess'\n        }\n    }\n}\n</script>\n```\n\n\n### 匹配规则\n\n#### 全等匹配\n资源的匹配规则默认是使用全等匹配，比如页面 `pages/a.vue` 对应路由 `path` 是 `/a`，则 `/a` 就是页面的资源ID。如果我们设置：\n```js\naccess.setAccess(['/a'])\n```\n由于权限列表中包含`/a`，则表示拥有此页面权限。\n\n#### 模糊匹配\n页面`@id.vue`会映射为动态路由`/:id`，想匹配此页面有两种办法：\n- **access.setAccess(['/:id'])**\n- **access.setAccess(['/*'])**\n\n第二种是模糊匹配，`*`表示任意路径。比如角色`admin`需要全部权限，则可以：\n```js\nexport default {\n    access: {\n        roles: {\n            admin: [\"*\"]\n        }\n    }\n}\n```\n\n\n### 角色\n通常我们会用角色来控制权限，相应的Fes.js 用角色定义一组资源。当访问 Fes.js 应用时，使用插件提供的 API 设置用户的角色，角色对应的资源才可见，非角色对应的资源不可见。\n\n\n当然有时候业务比较复杂，角色对应的权限是动态的。不要怕！插件提供粒度更细的 API 来设置当前用户能访问的资源。\n\n\n## 启用方式\n在 `package.json` 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-access\": \"^2.0.0\"\n    },\n}\n```\n\n## 配置\n\n### 编译时配置\n在执行 `fes dev` 或者 `fes build` 时，通过此配置生成运行时的代码，在配置文件`.fes.js` 中配置：\n```js\nexport default {\n    access: {\n        roles: {\n            admin: [\"/\", \"/onepiece\", '/store']\n        }\n    }\n}\n```\n\n#### roles\n- **类型**：对象\n  \n- **默认值**：`{}`\n\n- **详情**：     \n  \n  角色预定义列表。`key` 是角色 Id ，`value`是角色 Id 对应的资源列表。\n\n\n### 运行时配置\n在 `app.js` 中配置\n\n#### unAccessHandler\n- **类型**：`Function`\n  \n- **默认值**：`null`\n\n- **详情**：     \n  \n  当进入某个路由时，如果路由对应的页面不属于可见资源列表，则会暂停进入，调用 `unAccessHandler` 函数。\n- **参数**\n  - router：createRouter 创建的路由实例\n  - to： 准备进入的路由\n  - from：离开的路由\n  - next： [next函数](https://next.router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%8F%AF%E9%80%89%E7%9A%84%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0-next)\n\n比如：\n```js\nexport const access = {\n    unAccessHandler({ to, next }) {\n        const accesssIds = accessApi.getAccess();\n        if (to.path === '/404') {\n            accessApi.setAccess(accesssIds.concat(['/404']));\n            return next('/404');\n        }\n        if (!accesssIds.includes('/403')) {\n            accessApi.setAccess(accesssIds.concat(['/403']));\n        }\n        next('/403');\n    }\n};\n\n```\n\n#### noFoundHandler\n- **类型**：`Function`\n  \n- **默认值**：`null`\n\n- **详情**：     \n  \n  当进入某个路由时，如果路由对应的页面不存在，则会调用 `noFoundHandler` 函数。\n- **参数**\n  - router：createRouter 创建的路由实例\n  - to： 准备进入的路由\n  - from：离开的路由\n  - next： [next函数](https://next.router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%8F%AF%E9%80%89%E7%9A%84%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0-next)\n\n比如：\n```js\nexport const access = {\n    noFoundHandler({ next }) {\n        const accesssIds = accessApi.getAccess();\n        if (!accesssIds.includes('/404')) {\n            accessApi.setAccess(accesssIds.concat(['/404']));\n        }\n        next('/404');\n    }\n};\n\n```\n\n## API\n\n### access\n插件 API 通过 `@fesjs/fes` 导出：\n```js\nimport { access } from '@fesjs/fes'\n```\n\n#### access.hasAccess\n- **类型**：函数\n  \n- **详情**: 判断某个资源是否可见。\n- **参数**：\n  - accessId，资源Id\n- **返回值**：Boolean\n\n#### access.isDataReady\n- **类型**：函数\n  \n- **详情**：可以用异步数据来设置权限，`isDataReady` 用来判断异步数据是否已经加载完毕。\n- **参数**：null\n- **返回值**：Boolean\n```js\nimport { access } from '@fesjs/fes';\nconsole.log(access.isDataReady())\n```\n\n#### access.setRole\n- **类型**：函数\n  \n- **详情**：设置当前的角色。\n- **参数**：\n  - roleId，角色Id，有两种类型：\n    - String，对应着 `roles` 配置对象中的 `key`。\n    - Promise，Promise resolve 的结果应对应着 `roles` 配置对象中的 `key`。\n```js\nimport { access } from '@fesjs/fes';\naccess.setRole(['admin'])\n```\n\n#### access.setAccess\n- **类型**：函数\n  \n- **详情**：设置当前的角色。\n- **参数**：\n  - accessIds，资源Id数组，有两种类型：\n    - Array，数组项对应着 `roles` 配置对象中的 `key`。\n    - Promise，Promise resolve 的结果应该是`Array<accessId>`。\n```js\nimport { access } from '@fesjs/fes';\naccess.setAccess(['/a', '/b', '/c'])\n```\n\n#### access.getAccess\n- **类型**：函数\n  \n- **详情**：返回当前可见的资源列表。\n- **参数**：null\n\n```js\nimport { access } from '@fesjs/fes';\naccess.getAccess();\n```\n\n### useAccess\n- **类型**：[composition]((https://v3.cn.vuejs.org/guide/composition-api-introduction.html)) 函数\n  \n- **详情**：判断某个资源是否可见。\n- **参数**：\n  - accessId，资源Id\n- **返回值**：`ref`\n  \n```vue\n<template>\n    <div v-if=\"accessOnepicess\">accessOnepicess</div>\n</template>\n<script>\nimport { useAccess } from '@fesjs/fes';\nexport default {\n    setup(){\n        const accessOnepicess = useAccess('/onepiece1');\n        return {\n            accessOnepicess\n        }\n    }\n}\n</script>\n```\n### v-access\n在指令 `v-access` 中传入 `accessId`，则当 `accessId` 拥有权限时显示DOM，当没有权限时隐藏此DOM。\n```vue\n<template>\n    <div v-access=\"accessId\"> accessOnepicess </div>\n</template>\n<script>\nexport default {\n    setup(){\n        return {\n            accessId: 'accessOnepicess'\n       "}},{"format":"markdown","foundDate":1638413756460,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/reference/plugin/plugins/access.md","start":{"line":6,"column":1,"position":5},"end":{"line":281,"column":4,"position":1047},"range":[5,4884],"fragment":"sjs/plugin-access\n\n\n\n## 介绍\n对于前端应用来说，权限就是页面、页面元素是否可见。\n\n### 资源\nFes.js 把页面、页面元素统一叫做资源，每个资源都有 `accessId`：\n- 页面的 `accessId` 默认是页面的路由 `path` 。比如页面 `pages/a.vue` 的路由 `path` 是 `/a`。当页面访问 `/a` 时会渲染当前页面，`/a` 也就是页面的 `accessId`。\n  \n- 页面元素的 `accessId` 没有默认值，由我们自定义。\n```vue\n<template>\n    <access :id=\"accessId\"> accessOnepicess1 <input /> </access>\n    <div v-access=\"accessId\"> accessOnepicess2 </div>\n</template>\n<script>\nexport default {\n    setup(){\n        return {\n            accessId: 'accessOnepicess'\n        }\n    }\n}\n</script>\n```\n\n\n### 匹配规则\n\n#### 全等匹配\n资源的匹配规则默认是使用全等匹配，比如页面 `pages/a.vue` 对应路由 `path` 是 `/a`，则 `/a` 就是页面的资源ID。如果我们设置：\n```js\naccess.setAccess(['/a'])\n```\n由于权限列表中包含`/a`，则表示拥有此页面权限。\n\n#### 模糊匹配\n页面`@id.vue`会映射为动态路由`/:id`，想匹配此页面有两种办法：\n- **access.setAccess(['/:id'])**\n- **access.setAccess(['/*'])**\n\n第二种是模糊匹配，`*`表示任意路径。比如角色`admin`需要全部权限，则可以：\n```js\nexport default {\n    access: {\n        roles: {\n            admin: [\"*\"]\n        }\n    }\n}\n```\n\n\n### 角色\n通常我们会用角色来控制权限，相应的Fes.js 用角色定义一组资源。当访问 Fes.js 应用时，使用插件提供的 API 设置用户的角色，角色对应的资源才可见，非角色对应的资源不可见。\n\n\n当然有时候业务比较复杂，角色对应的权限是动态的。不要怕！插件提供粒度更细的 API 来设置当前用户能访问的资源。\n\n\n## 启用方式\n在 `package.json` 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-access\": \"^2.0.0\"\n    },\n}\n```\n\n## 配置\n\n### 编译时配置\n在执行 `fes dev` 或者 `fes build` 时，通过此配置生成运行时的代码，在配置文件`.fes.js` 中配置：\n```js\nexport default {\n    access: {\n        roles: {\n            admin: [\"/\", \"/onepiece\", '/store']\n        }\n    }\n}\n```\n\n#### roles\n- **类型**：对象\n  \n- **默认值**：`{}`\n\n- **详情**：     \n  \n  角色预定义列表。`key` 是角色 Id ，`value`是角色 Id 对应的资源列表。\n\n\n### 运行时配置\n在 `app.js` 中配置\n\n#### unAccessHandler\n- **类型**：`Function`\n  \n- **默认值**：`null`\n\n- **详情**：     \n  \n  当进入某个路由时，如果路由对应的页面不属于可见资源列表，则会暂停进入，调用 `unAccessHandler` 函数。\n- **参数**\n  - router：createRouter 创建的路由实例\n  - to： 准备进入的路由\n  - from：离开的路由\n  - next： [next函数](https://next.router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%8F%AF%E9%80%89%E7%9A%84%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0-next)\n\n比如：\n```js\nexport const access = {\n    unAccessHandler({ to, next }) {\n        const accesssIds = accessApi.getAccess();\n        if (to.path === '/404') {\n            accessApi.setAccess(accesssIds.concat(['/404']));\n            return next('/404');\n        }\n        if (!accesssIds.includes('/403')) {\n            accessApi.setAccess(accesssIds.concat(['/403']));\n        }\n        next('/403');\n    }\n};\n\n```\n\n#### noFoundHandler\n- **类型**：`Function`\n  \n- **默认值**：`null`\n\n- **详情**：     \n  \n  当进入某个路由时，如果路由对应的页面不存在，则会调用 `noFoundHandler` 函数。\n- **参数**\n  - router：createRouter 创建的路由实例\n  - to： 准备进入的路由\n  - from：离开的路由\n  - next： [next函数](https://next.router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%8F%AF%E9%80%89%E7%9A%84%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0-next)\n\n比如：\n```js\nexport const access = {\n    noFoundHandler({ next }) {\n        const accesssIds = accessApi.getAccess();\n        if (!accesssIds.includes('/404')) {\n            accessApi.setAccess(accesssIds.concat(['/404']));\n        }\n        next('/404');\n    }\n};\n\n```\n\n## API\n\n### access\n插件 API 通过 `@fesjs/fes` 导出：\n```js\nimport { access } from '@fesjs/fes'\n```\n\n#### access.hasAccess\n- **类型**：函数\n  \n- **详情**: 判断某个资源是否可见。\n- **参数**：\n  - accessId，资源Id\n- **返回值**：Boolean\n\n#### access.isDataReady\n- **类型**：函数\n  \n- **详情**：可以用异步数据来设置权限，`isDataReady` 用来判断异步数据是否已经加载完毕。\n- **参数**：null\n- **返回值**：Boolean\n```js\nimport { access } from '@fesjs/fes';\nconsole.log(access.isDataReady())\n```\n\n#### access.setRole\n- **类型**：函数\n  \n- **详情**：设置当前的角色。\n- **参数**：\n  - roleId，角色Id，有两种类型：\n    - String，对应着 `roles` 配置对象中的 `key`。\n    - Promise，Promise resolve 的结果应对应着 `roles` 配置对象中的 `key`。\n```js\nimport { access } from '@fesjs/fes';\naccess.setRole(['admin'])\n```\n\n#### access.setAccess\n- **类型**：函数\n  \n- **详情**：设置当前的角色。\n- **参数**：\n  - accessIds，资源Id数组，有两种类型：\n    - Array，数组项对应着 `roles` 配置对象中的 `key`。\n    - Promise，Promise resolve 的结果应该是`Array<accessId>`。\n```js\nimport { access } from '@fesjs/fes';\naccess.setAccess(['/a', '/b', '/c'])\n```\n\n#### access.getAccess\n- **类型**：函数\n  \n- **详情**：返回当前可见的资源列表。\n- **参数**：null\n\n```js\nimport { access } from '@fesjs/fes';\naccess.getAccess();\n```\n\n### useAccess\n- **类型**：[composition]((https://v3.cn.vuejs.org/guide/composition-api-introduction.html)) 函数\n  \n- **详情**：判断某个资源是否可见。\n- **参数**：\n  - accessId，资源Id\n- **返回值**：`ref`\n  \n```vue\n<template>\n    <div v-if=\"accessOnepicess\">accessOnepicess</div>\n</template>\n<script>\nimport { useAccess } from '@fesjs/fes';\nexport default {\n    setup(){\n        const accessOnepicess = useAccess('/onepiece1');\n        return {\n            accessOnepicess\n        }\n    }\n}\n</script>\n```\n### v-access\n在指令 `v-access` 中传入 `accessId`，则当 `accessId` 拥有权限时显示DOM，当没有权限时隐藏此DOM。\n```vue\n<template>\n    <div v-access=\"accessId\"> accessOnepicess </div>\n</template>\n<script>\nexport default {\n    setup(){\n        return {\n            accessId: 'accessOnepicess'\n        }\n    }\n}\n</"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/plugin/plugins/access.md","start":{"line":6,"column":1,"position":5},"end":{"line":281,"column":4,"position":1047},"range":[5,4884],"fragment":"sjs/plugin-access\n\n\n\n## 介绍\n对于前端应用来说，权限就是页面、页面元素是否可见。\n\n### 资源\nFes.js 把页面、页面元素统一叫做资源，每个资源都有 `accessId`：\n- 页面的 `accessId` 默认是页面的路由 `path` 。比如页面 `pages/a.vue` 的路由 `path` 是 `/a`。当页面访问 `/a` 时会渲染当前页面，`/a` 也就是页面的 `accessId`。\n  \n- 页面元素的 `accessId` 没有默认值，由我们自定义。\n```vue\n<template>\n    <access :id=\"accessId\"> accessOnepicess1 <input /> </access>\n    <div v-access=\"accessId\"> accessOnepicess2 </div>\n</template>\n<script>\nexport default {\n    setup(){\n        return {\n            accessId: 'accessOnepicess'\n        }\n    }\n}\n</script>\n```\n\n\n### 匹配规则\n\n#### 全等匹配\n资源的匹配规则默认是使用全等匹配，比如页面 `pages/a.vue` 对应路由 `path` 是 `/a`，则 `/a` 就是页面的资源ID。如果我们设置：\n```js\naccess.setAccess(['/a'])\n```\n由于权限列表中包含`/a`，则表示拥有此页面权限。\n\n#### 模糊匹配\n页面`@id.vue`会映射为动态路由`/:id`，想匹配此页面有两种办法：\n- **access.setAccess(['/:id'])**\n- **access.setAccess(['/*'])**\n\n第二种是模糊匹配，`*`表示任意路径。比如角色`admin`需要全部权限，则可以：\n```js\nexport default {\n    access: {\n        roles: {\n            admin: [\"*\"]\n        }\n    }\n}\n```\n\n\n### 角色\n通常我们会用角色来控制权限，相应的Fes.js 用角色定义一组资源。当访问 Fes.js 应用时，使用插件提供的 API 设置用户的角色，角色对应的资源才可见，非角色对应的资源不可见。\n\n\n当然有时候业务比较复杂，角色对应的权限是动态的。不要怕！插件提供粒度更细的 API 来设置当前用户能访问的资源。\n\n\n## 启用方式\n在 `package.json` 中引入依赖：\n```json\n{\n    \"dependencies\": {\n        \"@fesjs/fes\": \"^2.0.0\",\n        \"@fesjs/plugin-access\": \"^2.0.0\"\n    },\n}\n```\n\n## 配置\n\n### 编译时配置\n在执行 `fes dev` 或者 `fes build` 时，通过此配置生成运行时的代码，在配置文件`.fes.js` 中配置：\n```js\nexport default {\n    access: {\n        roles: {\n            admin: [\"/\", \"/onepiece\", '/store']\n        }\n    }\n}\n```\n\n#### roles\n- **类型**：对象\n  \n- **默认值**：`{}`\n\n- **详情**：     \n  \n  角色预定义列表。`key` 是角色 Id ，`value`是角色 Id 对应的资源列表。\n\n\n### 运行时配置\n在 `app.js` 中配置\n\n#### unAccessHandler\n- **类型**：`Function`\n  \n- **默认值**：`null`\n\n- **详情**：     \n  \n  当进入某个路由时，如果路由对应的页面不属于可见资源列表，则会暂停进入，调用 `unAccessHandler` 函数。\n- **参数**\n  - router：createRouter 创建的路由实例\n  - to： 准备进入的路由\n  - from：离开的路由\n  - next： [next函数](https://next.router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%8F%AF%E9%80%89%E7%9A%84%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0-next)\n\n比如：\n```js\nexport const access = {\n    unAccessHandler({ to, next }) {\n        const accesssIds = accessApi.getAccess();\n        if (to.path === '/404') {\n            accessApi.setAccess(accesssIds.concat(['/404']));\n            return next('/404');\n        }\n        if (!accesssIds.includes('/403')) {\n            accessApi.setAccess(accesssIds.concat(['/403']));\n        }\n        next('/403');\n    }\n};\n\n```\n\n#### noFoundHandler\n- **类型**：`Function`\n  \n- **默认值**：`null`\n\n- **详情**：     \n  \n  当进入某个路由时，如果路由对应的页面不存在，则会调用 `noFoundHandler` 函数。\n- **参数**\n  - router：createRouter 创建的路由实例\n  - to： 准备进入的路由\n  - from：离开的路由\n  - next： [next函数](https://next.router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%8F%AF%E9%80%89%E7%9A%84%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0-next)\n\n比如：\n```js\nexport const access = {\n    noFoundHandler({ next }) {\n        const accesssIds = accessApi.getAccess();\n        if (!accesssIds.includes('/404')) {\n            accessApi.setAccess(accesssIds.concat(['/404']));\n        }\n        next('/404');\n    }\n};\n\n```\n\n## API\n\n### access\n插件 API 通过 `@fesjs/fes` 导出：\n```js\nimport { access } from '@fesjs/fes'\n```\n\n#### access.hasAccess\n- **类型**：函数\n  \n- **详情**: 判断某个资源是否可见。\n- **参数**：\n  - accessId，资源Id\n- **返回值**：Boolean\n\n#### access.isDataReady\n- **类型**：函数\n  \n- **详情**：可以用异步数据来设置权限，`isDataReady` 用来判断异步数据是否已经加载完毕。\n- **参数**：null\n- **返回值**：Boolean\n```js\nimport { access } from '@fesjs/fes';\nconsole.log(access.isDataReady())\n```\n\n#### access.setRole\n- **类型**：函数\n  \n- **详情**：设置当前的角色。\n- **参数**：\n  - roleId，角色Id，有两种类型：\n    - String，对应着 `roles` 配置对象中的 `key`。\n    - Promise，Promise resolve 的结果应对应着 `roles` 配置对象中的 `key`。\n```js\nimport { access } from '@fesjs/fes';\naccess.setRole(['admin'])\n```\n\n#### access.setAccess\n- **类型**：函数\n  \n- **详情**：设置当前的角色。\n- **参数**：\n  - accessIds，资源Id数组，有两种类型：\n    - Array，数组项对应着 `roles` 配置对象中的 `key`。\n    - Promise，Promise resolve 的结果应该是`Array<accessId>`。\n```js\nimport { access } from '@fesjs/fes';\naccess.setAccess(['/a', '/b', '/c'])\n```\n\n#### access.getAccess\n- **类型**：函数\n  \n- **详情**：返回当前可见的资源列表。\n- **参数**：null\n\n```js\nimport { access } from '@fesjs/fes';\naccess.getAccess();\n```\n\n### useAccess\n- **类型**：[composition]((https://v3.cn.vuejs.org/guide/composition-api-introduction.html)) 函数\n  \n- **详情**：判断某个资源是否可见。\n- **参数**：\n  - accessId，资源Id\n- **返回值**：`ref`\n  \n```vue\n<template>\n    <div v-if=\"accessOnepicess\">accessOnepicess</div>\n</template>\n<script>\nimport { useAccess } from '@fesjs/fes';\nexport default {\n    setup(){\n        const accessOnepicess = useAccess('/onepiece1');\n        return {\n            accessOnepicess\n        }\n    }\n}\n</script>\n```\n### v-access\n在指令 `v-access` 中传入 `accessId`，则当 `accessId` 拥有权限时显示DOM，当没有权限时隐藏此DOM。\n```vue\n<template>\n    <div v-access=\"accessId\"> accessOnepicess </div>\n</template>\n<script>\nexport default {\n    setup(){\n        return {\n            accessId: 'accessOnepicess'\n        }\n    }\n}\n</"}},{"format":"markdown","foundDate":1638413756467,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/reference/plugin/dev/api.md","start":{"line":7,"column":1,"position":6},"end":{"line":494,"column":4,"position":1275},"range":[6,7663],"fragment":"PI\n\n## 属性\n\n### api.paths\n\n一些关键的路径：\n- cwd，执行命令的绝对路径\n- absNodeModulesPath，nodeModule的绝对路径\n- absOutputPath，输出 `build` 产物的绝对路径\n- absSrcPath，`src` 目录的绝对路径\n- absPagesPath，`pages`目录的绝对路径\n- absTmpPath，`.fes`临时文件目录的绝对路径\n\n### api.cwd\n执行命令的绝对路径\n\n### api.pkg\n`package.json`的内容\n\n### api.configInstance\n`config`实例\n\n### userConfig\n用户配置\n                        \n### config\n插件配置可被修改，此为最终的配置\n\n### env\nprocess.env\n\n### args\n环境变量\n\n## 核心方法\n\n### describe\n注册阶段执行，用于描述插件或插件集的 id、key、配置信息、启用方式等。\n\n用法：**describe({ id?: string, key?: string, config?: { default, schema, onChange } }, enableBy?)**\n\n例如：\n```js\n api.describe({\n    key: 'esbuild',\n    config: {\n        schema(joi) {\n            return joi.object();\n        },\n        default: {}\n    },\n    enableBy: api.EnableBy.config,\n});\n```\n注：\n\n- `config.default` 为配置的默认值，用户没有配置时取这个\n- `config.schema` 用于声明配置的类型，基于 [joi](https://hapi.dev/module/joi)，如果你希望用户进行配置，这个是必须的，否则用户的配置无效\n- `config.onChange` 是 `dev` 阶段配置被修改后的处理机制，默认会重启 dev 进程，也可以修改为 api.ConfigChangeType.regenerateTmpFiles 只重新生成临时文件，还可以通过函数的格式自定义\n- `enableBy` 为启用方式，默认是注册启用，可更改为 `api.EnableBy.config`，还可以用自定义函数的方式决定其启用时机（动态生效）\n\n\n\n### applyPlugins\n\n取得 register 注册的 hooks 执行后的数据。\n\n用法：**applyPlugins({ key: string, type: api.ApplyPluginsType, initialValue?: any, args?: any })**\n\n参数：\n- key\n- type， hook的类型。\n- initialValue， 初始值。\n- args，参数，hook函数执行时，args会作为参数传入。\n\n例如：\n```js\nconst foo = await api.applyPlugins({\n  key: 'foo',\n  type: api.ApplyPluginsType.add,\n  initialValue: [],\n});\nconsole.log(foo); // ['a', 'b']\n```\n\n#### api.ApplyPluginsType\n\n编译时插件hook执行类型，enum 类型，包含三个属性：\n\n- compose，用于合并执行多个函数，函数可决定前序函数的执行时机\n- modify，用于修改值\n- event，用于执行事件，前面没有依赖关系\n\n### registerCommand\n\n注册命令，基于 [commander](https://github.com/tj/commander.js/) 实现的机制。\n\n用法：**registerCommand({ command: string, description: string, fn: Function, options?: Object })**\n\n参数：\n- command\n- description，描述文字，输入 `--help` 会打印\n- fn，命令执行的函数，参数有：\n  - rawArgv，原始参数\n  - args，参数\n  - options，执行命令时附带的的参数配置\n  - program，commander对象\n- options，参数配置，基于 [commander](https://github.com/tj/commander.js/) 。\n\n例如：\n```js\napi.registerCommand({\n    command: 'webpack',\n    description: 'inspect webpack configurations',\n    options: [{\n        name: '--rule <ruleName>',\n        description: 'inspect a specific module rule'\n    }, {\n        name: '--plugin <pluginName>',\n        description: 'inspect a specific plugin'\n    }, {\n        name: '--rules',\n        description: 'list all module rule names'\n    }, {\n        name: '--plugins',\n        description: 'list all plugin names'\n    }, {\n        name: '--verbose',\n        description: 'show full function definitions in output'\n    }],\n    async fn({ rawArgv, args, options, program}) {\n    }\n})\n```\n当项目引入此插件后，使用：\n```bash\nfes webpack\n```\n\n### registerMethod\n\n往 `api` 上注册方法。可以是 `api.register()` 的快捷使用方式，便于调用；也可以不是，如果有提供 `fn`，则执行 `fn` 定义的函数。\n\n用法：**registerMethod({ name: string, fn?: Function, exitsError?: boolean })**\n\n例如：\n```js\n api.registerMethod({\n    name: 'writeTmpFile',\n    fn({\n        path,\n        content\n    }) {\n        assert(\n            api.stage >= api.ServiceStage.pluginReady,\n            'api.writeTmpFile() should not execute in register stage.'\n        );\n        const absPath = join(api.paths.absTmpPath, path);\n        api.utils.mkdirp.sync(dirname(absPath));\n        if (!existsSync(absPath) || readFileSync(absPath, 'utf-8') !== content) {\n            writeFileSync(absPath, content, 'utf-8');\n        }\n    }\n});\n```\n\n### registerPresets\n\n注册插件集，参数为路径数组。\n\n用法：**registerPresets(presets: string[])**\n\n例如：\n```js\napi.registerPresets([\n    { id: 'preset_2', key: 'preset2', apply: () => () => {} },\n    require.resolve('./preset_3'),\n]);\n```\n\n### registerPlugins\n\n注册插件，参数为路径数组。\n\n用法：**registerPlugins(plugins: string[])**\n\n例如：\n```js\napi.registerPlugins([\n    { id: 'preset_2', key: 'preset2', apply: () => () => {} },\n    require.resolve('./preset_3'),\n]);\n```\n\n### hasPlugins\n判断是否有注册某个插件，插件的 id 规则：\n- id 默认为包名\n- 内置插件以 `@@` 为前缀，比如 `@@/registerMethod`\n\n用法：**hasPlugins(pluginIds: string[])**\n\n例如\n```js\n// 判断是否有注册 @fesjs/plugin-locale\napi.hasPlugins(['@fesjs/plugin-locale']);\n```\n\n::: tip\n如果在注册阶段使用，只能判断在他之前是否有注册某个插件。\n:::\n\n### hasPresets\n判断是否有注册某个插件集。\n\n用法：**hasPresets(presetIds: string[])**\n\n例如\n```js\n// 判断是否有注册\napi.hasPlugins(['@fesjs/preset-xxx']);\n```\n\n::: tip\n如果在注册阶段使用，只能判断在他之前是否有注册某个插件集。\n:::\n\n## 扩展方法\n\n通过 api.registerMethod() 扩展的方法。\n\n### onStart\n在命令注册函数执行前触发。可以使用 config 和 paths。\n\n### onExit\ndev 退出时触发。\n\n### onGenerateFiles\n生成临时文件，触发时机在 webpack 编译之前。\n\n### addPluginExports\n把插件需要导出的运行时 API 写入`@fesjs/fes`。\n```js\napi.addPluginExports(() => [\n    {\n        specifiers: ['access', 'useAccess'],\n        source: absoluteFilePath\n    }\n]);\n```\n这样用户使用时：\n```js\nimport { access, useAccess } from '@fesjs/fes';\n```\n\n### addRuntimePlugin\n添加运行时插件，返回值格式为表示文件路径的字符串。Fes.js 会把\n\n例如：\n```js\napi.addRuntimePlugin(() => join(__dirname, './runtime'));\n```\n\n### addRuntimePluginKey\n添加运行时插件的 key，返回值格式为字符串。\n\n例如：\n```js\napi.addRuntimePluginKey(() => 'some');\n```\n\n### addEntryImportsAhead\n在入口文件现有 import 的前面添加 import。\n\n例如：\n```js\napi.addEntryImportsAhead(() => [{ source: 'anypackage' }]);\n```\n\n### addEntryImports\n在入口文件现有 import 的后面添加 import。\n\n例如：\n```js\napi.addEntryImport(() => {\n  return [\n    {\n      source: '/modulePath/xxx.js',\n      specifier: 'moduleName',\n    }\n  ]\n});\n```\n\n### addEntryCodeAhead\n在入口文件最前面（import 之后）添加代码。\n\n例如：\n```js\napi.addEntryCodeAhead(\n    () => `${globalCSSFile\n        .map(file => `require('${winPath(relative(absTmpPath, file))}');`)\n        .join('')}`\n\n```\n    \n### addEntryCode\n在入口文件最后添加代码。\n\n例如：\n```js\napi.addEntryCode(() => {\n  return `console.log('works!')`\n})\n```\n\n### addBeforeMiddlewares\n添加在 `webpack compiler` 中间件之前的中间件，返回值格式为 `express` 中间件。\n\n例如：\n```js\napi.addBeforeMiddlewares(() => {\n  return (req, res, next) => {\n    if (false) {\n      res.end('end');\n    } else {\n      next();\n    }\n  };\n});\n```\n\n### addMiddlewares\n添加在 `webpack compiler` 中间件之后的中间件，返回值格式为 `express` 中间件。\n\n### modifyRoutes\n\n修改路由。\n\n例如：\n```js\n// 把BaseLayout插入到路由配置中，作为根路由\napi.modifyRoutes(routes => [\n    {\n        path: '/',\n        component: winPath(\n            join(api.paths.absTmpPath || '', absFilePath)\n        ),\n        children: routes\n    }\n]);\n```\n\n### modifyBundleConfigOpts\n修改获取 bundleConfig 的函数参数。\n\n例如：\n```js\napi.modifyBundleConfigOpts(memo => {\n    memo.miniCSSExtractPluginPath = require.resolve('mini-css-extract-plugin');\n    memo.miniCSSExtractPluginLoaderPath = require.resolve(\n    'mini-css-extract-plugin/dist/loader',\n    );\n    return memo;\n});\n\n```\n\n### modifyBundleConfig\n修改 bundle 配置。\n\n```js\napi.modifyBundleConfig((bundleConfig) => {\n    // do something\n    return bundleConfig;\n});\n```\n\n### modifyBabelOpts\n修改 babel 配置项。\n\n例如：\n```js\napi.modifyBabelOpts((babelOpts) => {\n    if (api.config.babelPluginImport) {\n        api.config.babelPluginImport.forEach((config) => {\n            babelOpts.plugins.push(['import', config]);\n        });\n    }\n    return babelOpts;\n});\n```    \n\n### modifyBabelPresetOpts\n修改 babel 插件的配置。\n\n例如：\n```js\napi.modifyBabelPresetOpts(opts => {\n    return {\n      ...opts,\n      import: (opts.import || []).concat([\n        { libraryName: 'ant-design-vue', libraryDirectory: 'es', style: true },\n      ]),\n    };\n});\n```\n\n### modifyPaths\n修改 paths 对象。\n\n\n### modifyConfig\n修改最终配置。\n\n例如：\n```js\napi.modifyConfig((memo) => {\n  return {\n    ...memo,\n    ...defaultOptions,\n  };\n});\n\n```\n\n### chainWebpack\n通过 [webpack-chain] 的方式修改 webpack 配置。\n\n例如：\n```js\napi.chainWebpack((memo) => {\n    memo.resolve.alias.set('vue-i18n', 'vue-i18n/dist/vue-i18n.esm-bundler.js');\n});\n```\n\n### addTmpGenerateWatcherPaths\n添加重新临时文件生成的监听路径。\n\n例如：\n```js\napi.addTmpGenerateWatcherPaths(() => [\n    './app.js',\n]);\n```\n\n### writeTmpFile\n写临时文件。\n"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/plugin/dev/api.md","start":{"line":7,"column":1,"position":6},"end":{"line":494,"column":4,"position":1275},"range":[6,7663],"fragment":"PI\n\n## 属性\n\n### api.paths\n\n一些关键的路径：\n- cwd，执行命令的绝对路径\n- absNodeModulesPath，nodeModule的绝对路径\n- absOutputPath，输出 `build` 产物的绝对路径\n- absSrcPath，`src` 目录的绝对路径\n- absPagesPath，`pages`目录的绝对路径\n- absTmpPath，`.fes`临时文件目录的绝对路径\n\n### api.cwd\n执行命令的绝对路径\n\n### api.pkg\n`package.json`的内容\n\n### api.configInstance\n`config`实例\n\n### userConfig\n用户配置\n                        \n### config\n插件配置可被修改，此为最终的配置\n\n### env\nprocess.env\n\n### args\n环境变量\n\n## 核心方法\n\n### describe\n注册阶段执行，用于描述插件或插件集的 id、key、配置信息、启用方式等。\n\n用法：**describe({ id?: string, key?: string, config?: { default, schema, onChange } }, enableBy?)**\n\n例如：\n```js\n api.describe({\n    key: 'esbuild',\n    config: {\n        schema(joi) {\n            return joi.object();\n        },\n        default: {}\n    },\n    enableBy: api.EnableBy.config,\n});\n```\n注：\n\n- `config.default` 为配置的默认值，用户没有配置时取这个\n- `config.schema` 用于声明配置的类型，基于 [joi](https://hapi.dev/module/joi)，如果你希望用户进行配置，这个是必须的，否则用户的配置无效\n- `config.onChange` 是 `dev` 阶段配置被修改后的处理机制，默认会重启 dev 进程，也可以修改为 api.ConfigChangeType.regenerateTmpFiles 只重新生成临时文件，还可以通过函数的格式自定义\n- `enableBy` 为启用方式，默认是注册启用，可更改为 `api.EnableBy.config`，还可以用自定义函数的方式决定其启用时机（动态生效）\n\n\n\n### applyPlugins\n\n取得 register 注册的 hooks 执行后的数据。\n\n用法：**applyPlugins({ key: string, type: api.ApplyPluginsType, initialValue?: any, args?: any })**\n\n参数：\n- key\n- type， hook的类型。\n- initialValue， 初始值。\n- args，参数，hook函数执行时，args会作为参数传入。\n\n例如：\n```js\nconst foo = await api.applyPlugins({\n  key: 'foo',\n  type: api.ApplyPluginsType.add,\n  initialValue: [],\n});\nconsole.log(foo); // ['a', 'b']\n```\n\n#### api.ApplyPluginsType\n\n编译时插件hook执行类型，enum 类型，包含三个属性：\n\n- compose，用于合并执行多个函数，函数可决定前序函数的执行时机\n- modify，用于修改值\n- event，用于执行事件，前面没有依赖关系\n\n### registerCommand\n\n注册命令，基于 [commander](https://github.com/tj/commander.js/) 实现的机制。\n\n用法：**registerCommand({ command: string, description: string, fn: Function, options?: Object })**\n\n参数：\n- command\n- description，描述文字，输入 `--help` 会打印\n- fn，命令执行的函数，参数有：\n  - rawArgv，原始参数\n  - args，参数\n  - options，执行命令时附带的的参数配置\n  - program，commander对象\n- options，参数配置，基于 [commander](https://github.com/tj/commander.js/) 。\n\n例如：\n```js\napi.registerCommand({\n    command: 'webpack',\n    description: 'inspect webpack configurations',\n    options: [{\n        name: '--rule <ruleName>',\n        description: 'inspect a specific module rule'\n    }, {\n        name: '--plugin <pluginName>',\n        description: 'inspect a specific plugin'\n    }, {\n        name: '--rules',\n        description: 'list all module rule names'\n    }, {\n        name: '--plugins',\n        description: 'list all plugin names'\n    }, {\n        name: '--verbose',\n        description: 'show full function definitions in output'\n    }],\n    async fn({ rawArgv, args, options, program}) {\n    }\n})\n```\n当项目引入此插件后，使用：\n```bash\nfes webpack\n```\n\n### registerMethod\n\n往 `api` 上注册方法。可以是 `api.register()` 的快捷使用方式，便于调用；也可以不是，如果有提供 `fn`，则执行 `fn` 定义的函数。\n\n用法：**registerMethod({ name: string, fn?: Function, exitsError?: boolean })**\n\n例如：\n```js\n api.registerMethod({\n    name: 'writeTmpFile',\n    fn({\n        path,\n        content\n    }) {\n        assert(\n            api.stage >= api.ServiceStage.pluginReady,\n            'api.writeTmpFile() should not execute in register stage.'\n        );\n        const absPath = join(api.paths.absTmpPath, path);\n        api.utils.mkdirp.sync(dirname(absPath));\n        if (!existsSync(absPath) || readFileSync(absPath, 'utf-8') !== content) {\n            writeFileSync(absPath, content, 'utf-8');\n        }\n    }\n});\n```\n\n### registerPresets\n\n注册插件集，参数为路径数组。\n\n用法：**registerPresets(presets: string[])**\n\n例如：\n```js\napi.registerPresets([\n    { id: 'preset_2', key: 'preset2', apply: () => () => {} },\n    require.resolve('./preset_3'),\n]);\n```\n\n### registerPlugins\n\n注册插件，参数为路径数组。\n\n用法：**registerPlugins(plugins: string[])**\n\n例如：\n```js\napi.registerPlugins([\n    { id: 'preset_2', key: 'preset2', apply: () => () => {} },\n    require.resolve('./preset_3'),\n]);\n```\n\n### hasPlugins\n判断是否有注册某个插件，插件的 id 规则：\n- id 默认为包名\n- 内置插件以 `@@` 为前缀，比如 `@@/registerMethod`\n\n用法：**hasPlugins(pluginIds: string[])**\n\n例如\n```js\n// 判断是否有注册 @fesjs/plugin-locale\napi.hasPlugins(['@fesjs/plugin-locale']);\n```\n\n::: tip\n如果在注册阶段使用，只能判断在他之前是否有注册某个插件。\n:::\n\n### hasPresets\n判断是否有注册某个插件集。\n\n用法：**hasPresets(presetIds: string[])**\n\n例如\n```js\n// 判断是否有注册\napi.hasPlugins(['@fesjs/preset-xxx']);\n```\n\n::: tip\n如果在注册阶段使用，只能判断在他之前是否有注册某个插件集。\n:::\n\n## 扩展方法\n\n通过 api.registerMethod() 扩展的方法。\n\n### onStart\n在命令注册函数执行前触发。可以使用 config 和 paths。\n\n### onExit\ndev 退出时触发。\n\n### onGenerateFiles\n生成临时文件，触发时机在 webpack 编译之前。\n\n### addPluginExports\n把插件需要导出的运行时 API 写入`@fesjs/fes`。\n```js\napi.addPluginExports(() => [\n    {\n        specifiers: ['access', 'useAccess'],\n        source: absoluteFilePath\n    }\n]);\n```\n这样用户使用时：\n```js\nimport { access, useAccess } from '@fesjs/fes';\n```\n\n### addRuntimePlugin\n添加运行时插件，返回值格式为表示文件路径的字符串。Fes.js 会把\n\n例如：\n```js\napi.addRuntimePlugin(() => join(__dirname, './runtime'));\n```\n\n### addRuntimePluginKey\n添加运行时插件的 key，返回值格式为字符串。\n\n例如：\n```js\napi.addRuntimePluginKey(() => 'some');\n```\n\n### addEntryImportsAhead\n在入口文件现有 import 的前面添加 import。\n\n例如：\n```js\napi.addEntryImportsAhead(() => [{ source: 'anypackage' }]);\n```\n\n### addEntryImports\n在入口文件现有 import 的后面添加 import。\n\n例如：\n```js\napi.addEntryImport(() => {\n  return [\n    {\n      source: '/modulePath/xxx.js',\n      specifier: 'moduleName',\n    }\n  ]\n});\n```\n\n### addEntryCodeAhead\n在入口文件最前面（import 之后）添加代码。\n\n例如：\n```js\napi.addEntryCodeAhead(\n    () => `${globalCSSFile\n        .map(file => `require('${winPath(relative(absTmpPath, file))}');`)\n        .join('')}`\n\n```\n    \n### addEntryCode\n在入口文件最后添加代码。\n\n例如：\n```js\napi.addEntryCode(() => {\n  return `console.log('works!')`\n})\n```\n\n### addBeforeMiddlewares\n添加在 `webpack compiler` 中间件之前的中间件，返回值格式为 `express` 中间件。\n\n例如：\n```js\napi.addBeforeMiddlewares(() => {\n  return (req, res, next) => {\n    if (false) {\n      res.end('end');\n    } else {\n      next();\n    }\n  };\n});\n```\n\n### addMiddlewares\n添加在 `webpack compiler` 中间件之后的中间件，返回值格式为 `express` 中间件。\n\n### modifyRoutes\n\n修改路由。\n\n例如：\n```js\n// 把BaseLayout插入到路由配置中，作为根路由\napi.modifyRoutes(routes => [\n    {\n        path: '/',\n        component: winPath(\n            join(api.paths.absTmpPath || '', absFilePath)\n        ),\n        children: routes\n    }\n]);\n```\n\n### modifyBundleConfigOpts\n修改获取 bundleConfig 的函数参数。\n\n例如：\n```js\napi.modifyBundleConfigOpts(memo => {\n    memo.miniCSSExtractPluginPath = require.resolve('mini-css-extract-plugin');\n    memo.miniCSSExtractPluginLoaderPath = require.resolve(\n    'mini-css-extract-plugin/dist/loader',\n    );\n    return memo;\n});\n\n```\n\n### modifyBundleConfig\n修改 bundle 配置。\n\n```js\napi.modifyBundleConfig((bundleConfig) => {\n    // do something\n    return bundleConfig;\n});\n```\n\n### modifyBabelOpts\n修改 babel 配置项。\n\n例如：\n```js\napi.modifyBabelOpts((babelOpts) => {\n    if (api.config.babelPluginImport) {\n        api.config.babelPluginImport.forEach((config) => {\n            babelOpts.plugins.push(['import', config]);\n        });\n    }\n    return babelOpts;\n});\n```    \n\n### modifyBabelPresetOpts\n修改 babel 插件的配置。\n\n例如：\n```js\napi.modifyBabelPresetOpts(opts => {\n    return {\n      ...opts,\n      import: (opts.import || []).concat([\n        { libraryName: 'ant-design-vue', libraryDirectory: 'es', style: true },\n      ]),\n    };\n});\n```\n\n### modifyPaths\n修改 paths 对象。\n\n\n### modifyConfig\n修改最终配置。\n\n例如：\n```js\napi.modifyConfig((memo) => {\n  return {\n    ...memo,\n    ...defaultOptions,\n  };\n});\n\n```\n\n### chainWebpack\n通过 [webpack-chain] 的方式修改 webpack 配置。\n\n例如：\n```js\napi.chainWebpack((memo) => {\n    memo.resolve.alias.set('vue-i18n', 'vue-i18n/dist/vue-i18n.esm-bundler.js');\n});\n```\n\n### addTmpGenerateWatcherPaths\n添加重新临时文件生成的监听路径。\n\n例如：\n```js\napi.addTmpGenerateWatcherPaths(() => [\n    './app.js',\n]);\n```\n\n### writeTmpFile\n写临时文件。\n"}},{"format":"markdown","foundDate":1638413756470,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/reference/plugin/dev/README.md","start":{"line":4,"column":1,"position":3},"end":{"line":43,"column":4,"position":212},"range":[3,923],"fragment":"件介绍\n\n## 开始\n一个插件是一个 `npm` 包，它能够为 Fes.js 创建的项目添加额外的功能，这些功能包括：\n\n- 项目的 webpack 配置。\n- 修改项目的 babel 配置。\n- 添加新的 fes 命令 - 例如 `@fes/plugin-jest` 添加了 `fes test` 命令，允许开发者运行单元测试。\n- 集成 Vue 的插件。\n- 修改路由配置\n- 提供运行时 API\n- ...\n\n插件的入口是一个函数，函数会以 API 对象作为第一个参数：\n```js\nexport default (api)=>{\n    api.describe({\n        key: 'esbuild',\n        config: {\n            schema(joi) {\n                return joi.object();\n            },\n            default: {}\n        },\n        enableBy: api.EnableBy.config,\n    });\n}\n```\nAPI 对象是构建流程管理 Service 类的实例，api 提供一些有用的方法帮助你开发插件。\n\n`api.describe`用来描述插件：\n- **key**， 插件的 `key`，可以理解为插件的名称，在 `.fes.js` 中用 `key` 配置此插件。\n- **config**，插件的配置信息：\n  - schema，定义配置的类型\n  - default，默认配置\n- **enableBy**， 是否开启插件，可配置某些场景下禁用插件。\n\n\n## 发布到 npm\n \n以 `@fesjs/preset-`、`@fesjs/plugin-`、`@webank/fes-preset-`、`@webank/fes-plugin-`、`fes-preset-` 和 `fes-plugin-` 开头的依赖会被 Fes.js 自动注册为插件或插件集。 \n\n所以编写好的插件想发布到 npm 供其他人使用，包名必须是 `fes-preset-"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/plugin/dev/README.md","start":{"line":4,"column":1,"position":3},"end":{"line":43,"column":4,"position":212},"range":[3,923],"fragment":"件介绍\n\n## 开始\n一个插件是一个 `npm` 包，它能够为 Fes.js 创建的项目添加额外的功能，这些功能包括：\n\n- 项目的 webpack 配置。\n- 修改项目的 babel 配置。\n- 添加新的 fes 命令 - 例如 `@fes/plugin-jest` 添加了 `fes test` 命令，允许开发者运行单元测试。\n- 集成 Vue 的插件。\n- 修改路由配置\n- 提供运行时 API\n- ...\n\n插件的入口是一个函数，函数会以 API 对象作为第一个参数：\n```js\nexport default (api)=>{\n    api.describe({\n        key: 'esbuild',\n        config: {\n            schema(joi) {\n                return joi.object();\n            },\n            default: {}\n        },\n        enableBy: api.EnableBy.config,\n    });\n}\n```\nAPI 对象是构建流程管理 Service 类的实例，api 提供一些有用的方法帮助你开发插件。\n\n`api.describe`用来描述插件：\n- **key**， 插件的 `key`，可以理解为插件的名称，在 `.fes.js` 中用 `key` 配置此插件。\n- **config**，插件的配置信息：\n  - schema，定义配置的类型\n  - default，默认配置\n- **enableBy**， 是否开启插件，可配置某些场景下禁用插件。\n\n\n## 发布到 npm\n \n以 `@fesjs/preset-`、`@fesjs/plugin-`、`@webank/fes-preset-`、`@webank/fes-plugin-`、`fes-preset-` 和 `fes-plugin-` 开头的依赖会被 Fes.js 自动注册为插件或插件集。 \n\n所以编写好的插件想发布到 npm 供其他人使用，包名必须是 `fes-preset-"}},{"format":"javascript","foundDate":1638413756658,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/create-fes-app/src/utils.js","start":{"line":3,"column":2,"position":24},"end":{"line":13,"column":2,"position":120},"range":[73,361],"fragment":"{\n    if (process.stdout.isTTY) {\n        const blank = '\\n'.repeat(process.stdout.rows);\n        console.log(blank);\n        readline.cursorTo(process.stdout, 0, 0);\n        readline.clearScreenDown(process.stdout);\n        if (title) {\n            console.log(title);\n        }\n    }\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-compiler/src/logger/index.js","start":{"line":82,"column":2,"position":614},"end":{"line":93,"column":2,"position":712},"range":[2075,2404],"fragment":"{\n        if (process.stdout.isTTY) {\n            const blank = '\\n'.repeat(process.stdout.rows);\n            console.log(blank);\n            readline.cursorTo(process.stdout, 0, 0);\n            readline.clearScreenDown(process.stdout);\n            if (title) {\n                console.log(title);\n            }\n        }\n    }\n}"}},{"format":"markdown","foundDate":1638413756723,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/reference/config/README.md","start":{"line":1,"column":1,"position":0},"end":{"line":362,"column":74,"position":1001},"range":[0,5469],"fragment":"---\nsidebar: auto\n---\n\n# 配置\n\n以下配置项通过字母排序。\n\n## alias\n\n- 类型： `object`\n- 默认值： `{}`\n- 详情：  \n\n    配置别名，对引用路径进行映射。\n\n- 示例：\n```js\nexport default {\n    alias: {\n       main: 'src/assets/styles/main'\n    }\n}\n```\n然后 `import('main')`，实际上是 `import('src/assets/styles/main')`。\n\n## base\n\n- 类型： `string`\n- 默认值： `''`\n- 详情：  \n\n    设置路由前缀，通常用于部署到非根目录。比如你有路由 `/pageA`、`/pageB`，然后设置了 `base` 为 `/manage/`，那么就可以通过 `/manage/pageA`、`/manage/pageB` 访问到它们。\n\n## chainWebpack\n\n- 类型：`function`\n- 默认值：`null`\n- 详情：\n\n    通过 [webpack-chain](https://github.com/neutrinojs/webpack-chain) 的 API 修改 webpack 配置。\n\n示例：\n\n```js\nexport default {\n    chainWebpack(memo, { env, webpack }) {\n        // 删除 fes 内置插件\n        memo.plugins.delete('copy');\n    },\n}\n```\n\n\n## cssLoader\n\n- 类型： `object`\n- 默认值： `''`\n- 详情：  \n\n    设置 [css-loader 配置项](https://github.com/webpack-contrib/css-loader#options)。\n\n## copy\n\n- 类型： `Array(string)  ||  Array(object)`\n- 默认值： `[]`\n- 详情：\n\n    设置要复制到输出目录的文件、文件夹。\n    \n    配置约定 `from-to` 规则， 其中 `from` 是相对于 `cwd` 的路径，`to` 是相对于输出路径的路径。\n- 示例：\n```js\nexport default {\n    copy: {\n        from: '/src/assets/images',\n        to: 'assets/images'\n    }\n}\n```\n上面示例中，实现了将 `cwd` 路径中的 `/src/assets/images` 文件夹，在编译完成后，`copy` 到输出路径下的 `assets/images` 文件夹。\n\n## define\n\n- 类型： `object`\n- 默认值： `{}`\n- 详情：\n    \n    用于提供给代码中可用的变量。\n- 示例：\n```js\nexport default {\n    define: {\n        __DEV__: 'development'\n    }\n}\n```\n然后你代码里写 `console.log(__DEV__)`，会被编译成 `console.log('development')`。\n\n## devServer\n\n- 类型： `object`\n- 默认值： `{}`\n- 详情：\n    \n    配置开发服务器。支持以下子配置项：\n\n    - port，端口号，默认 `8000`\n    - host，默认 `localhost`\n    - https，是否启用 https server，同时也会开启 HTTP/2\n\n    启用 port 和 host 也可以通过环境变量 `PORT` 和 `HOST` 临时指定。\n\n## devtool\n\n- 类型： `string`\n- 默认值： `cheap-module-source-map` in dev, `undefined` in build\n- 详情：\n\n    用户配置 sourcemap 类型。详见 [ webpack#devtool 配置](https://webpack.js.org/configuration/devtool/#devtool)。\n\n## dynamicImport\n\n- 类型： `boolean`\n- 默认值： false\n- 详情：\n\n    路由是否按需加载\n## externals\n\n- 类型：`object`\n- 默认值：`{}`\n- 详情：\n\n    设置哪些模块可以不被打包，通过 `<script>` 或其他方式引入。\n\n示例：\n\n```js\nexport default {\n    externals: {\n      vue: 'window.Vue',\n    },\n}\n```\n\n\n## extraBabelPlugins\n\n- 类型： `array`\n- 默认值： `[]`\n- 详情：  \n\n 配置额外的 babel 插件。\n\n- 示例：\n```js\nexport default {\n    extraBabelPlugins: [\n        ['import', { libraryName: 'ant-design-vue', libraryDirectory: 'es', style: 'css' }],\n    ],\n}\n```\n\n## extraPostCSSPlugins\n\n- 类型： `array`\n- 默认值： `[]`\n- 详情：  \n\n    设置额外的 [postcss 插件](https://github.com/postcss/postcss/blob/master/docs/plugins.md)。\n\n## inlineLimit\n\n- 类型： `number`\n- 默认值： `8192`(8k)\n- 详情：\n\n    配置图片文件是否走 base64 编译的阈值。默认是 `8192` 字节，小于它会被编译为 base64 编码，否则会生成单独的文件。\n    \n## lessLoader\n\n- 类型： `object`\n- 默认值： `{}`\n- 详情：\n\n    设置 [less-loader 配置项](https://github.com/webpack-contrib/less-loader)。\n\n## mock\n\n- 类型： `object || boolean`\n- 默认值： `{}`\n- 详情：\n\n    配置 mock 属性。\n\n    - 当 mock 为 `boolean` 类型时，`true` 表示打开 mock，`false` 表示关闭 mock。\n    - 当 mock 为 `object` 类型时，默认打开 mock。也可以通过子属性 `prefix` 添加过滤条件，满足条件的走 mock 文件。 \n\n- 示例：\n```js\nexport default {\n    mock: {\n        prefix: '/api/auth'\n    }\n}\n```\n然后所有以 `/api/users` 开始的请求，就能进入 mock.js 文件处理。\n\n## mountElementId\n\n- 类型： `string`\n- 默认值： `app`\n- 详情：\n\n    指定渲染到的 HTML 元素 id。\n\n## nodeModulesTransform\n\n- 类型： `object`\n- 默认值： `{ exclude: [] }`\n- 详情：\n\n    默认编译所有 `node_modules` 下的包，可以通过配置 `exclude` 来跳过某些包，以提高编译速度。\n\n## outputPath\n\n- 类型： `string`\n- 默认值： `dist`\n- 详情：\n\n    指定输出路径。\n\n::: tip\n不允许设定为 `src`、`public`、`pages` 等约定目录。\n:::\n\n## plugins\n\n- 类型： `Array(string)`\n- 默认值： `[]`\n- 详情：\n\n    配置额外的 `fes` 插件。\n    数组项为指向插件的路径，可以是 npm 依赖、相对路径或绝对路径。如果是相对路径，则会从项目根目录开始找。\n\n- 示例：\n```js\nexport default {\n  plugins: [\n    // npm 依赖\n    'fes-plugin-hello',\n    // 相对路径\n    './plugin',\n    // 绝对路径\n    `${__dirname}/plugin.js`,\n  ],\n};\n```\n\n\n## postcssLoader\n\n- 类型： `object`\n- 默认值： `{}`\n- 详情：\n\n    设置 [postcss-loader 配置项](https://github.com/postcss/postcss-loader#options)。\n\n## proxy\n\n- 类型： `object`\n- 默认值： `{}`\n- 详情：\n\n    配置代理能力。\n\n- 示例：\n```js\nexport default {\n    proxy: {\n        '/v2': {\n            'target': 'https://api.douban.com/',\n            'changeOrigin': true, \n        }\n    }\n}\n```\n然后访问 `/v2/movie/in_theaters_proxy` 就能访问到 [http://api.douban.com/v2/movie/in_theaters_proxy](http://api.douban.com/v2/movie/in_theaters_proxy) 的数据。\n\n## publicpath\n\n- 类型： `publicPath`\n- 默认值： `/`\n- 详情：\n\n    配置 webpack 的 publicPath。当打包的时候，webpack 会在静态文件路径前面添加 `publicPath` 的值，当你需要修改静态文件地址时，比如使用 CDN 部署，把 `publicPath` 的值设为 CDN 的值就可以。\n\n## router\n\n- 类型： `object`\n- 默认值： `{ mode: 'hash' }`\n- 详情： 配置路由，具体请查看指南中关于路由的介绍\n\n## singular\n- 类型： `boolean`\n- 默认值： `false`\n- 详情：\n\n    配置是否启用单数模式的目录。 比如 `src/pages` 的约定在开启后为 `src/page` 目录，@fesjs/fes-plugins 插件也遵照此配置的约定。\n\n## targets\n- 类型： `object`\n- 默认值： `{}`\n- 详情：\n\n    配置需要兼容的浏览器最低版本，会自动引入 polyfill 和做语法转换。\n\n## terserOptions\n\n- 类型： `object`\n- 默认值：\n```js\nconst defaultTerserOptions = {\n    compress: {\n        // turn off flags with small gains to speed up minification\n        arrows: false,\n        collapse_vars: false, // 0.3kb\n        comparisons: false,\n        computed_props: false,\n        hoist_funs: false,\n        hoist_props: false,\n        hoist_vars: false,\n        inline: false,\n        loops: false,\n        negate_iife: false,\n        properties: false,\n        reduce_funcs: false,\n        reduce_vars: false,\n        switches: false,\n        toplevel: false,\n        typeofs: false,\n\n        // a few flags with noticeable gains/speed ratio\n        // numbers based on out of the box vendor bundle\n        booleans: true, // 0.7kb\n        if_return: "},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/config/README.md","start":{"line":1,"column":1,"position":0},"end":{"line":362,"column":74,"position":1001},"range":[0,5469],"fragment":"---\nsidebar: auto\n---\n\n# 配置\n\n以下配置项通过字母排序。\n\n## alias\n\n- 类型： `object`\n- 默认值： `{}`\n- 详情：  \n\n    配置别名，对引用路径进行映射。\n\n- 示例：\n```js\nexport default {\n    alias: {\n       main: 'src/assets/styles/main'\n    }\n}\n```\n然后 `import('main')`，实际上是 `import('src/assets/styles/main')`。\n\n## base\n\n- 类型： `string`\n- 默认值： `''`\n- 详情：  \n\n    设置路由前缀，通常用于部署到非根目录。比如你有路由 `/pageA`、`/pageB`，然后设置了 `base` 为 `/manage/`，那么就可以通过 `/manage/pageA`、`/manage/pageB` 访问到它们。\n\n## chainWebpack\n\n- 类型：`function`\n- 默认值：`null`\n- 详情：\n\n    通过 [webpack-chain](https://github.com/neutrinojs/webpack-chain) 的 API 修改 webpack 配置。\n\n示例：\n\n```js\nexport default {\n    chainWebpack(memo, { env, webpack }) {\n        // 删除 fes 内置插件\n        memo.plugins.delete('copy');\n    },\n}\n```\n\n\n## cssLoader\n\n- 类型： `object`\n- 默认值： `''`\n- 详情：  \n\n    设置 [css-loader 配置项](https://github.com/webpack-contrib/css-loader#options)。\n\n## copy\n\n- 类型： `Array(string)  ||  Array(object)`\n- 默认值： `[]`\n- 详情：\n\n    设置要复制到输出目录的文件、文件夹。\n    \n    配置约定 `from-to` 规则， 其中 `from` 是相对于 `cwd` 的路径，`to` 是相对于输出路径的路径。\n- 示例：\n```js\nexport default {\n    copy: {\n        from: '/src/assets/images',\n        to: 'assets/images'\n    }\n}\n```\n上面示例中，实现了将 `cwd` 路径中的 `/src/assets/images` 文件夹，在编译完成后，`copy` 到输出路径下的 `assets/images` 文件夹。\n\n## define\n\n- 类型： `object`\n- 默认值： `{}`\n- 详情：\n    \n    用于提供给代码中可用的变量。\n- 示例：\n```js\nexport default {\n    define: {\n        __DEV__: 'development'\n    }\n}\n```\n然后你代码里写 `console.log(__DEV__)`，会被编译成 `console.log('development')`。\n\n## devServer\n\n- 类型： `object`\n- 默认值： `{}`\n- 详情：\n    \n    配置开发服务器。支持以下子配置项：\n\n    - port，端口号，默认 `8000`\n    - host，默认 `localhost`\n    - https，是否启用 https server，同时也会开启 HTTP/2\n\n    启用 port 和 host 也可以通过环境变量 `PORT` 和 `HOST` 临时指定。\n\n## devtool\n\n- 类型： `string`\n- 默认值： `cheap-module-source-map` in dev, `undefined` in build\n- 详情：\n\n    用户配置 sourcemap 类型。详见 [ webpack#devtool 配置](https://webpack.js.org/configuration/devtool/#devtool)。\n\n## dynamicImport\n\n- 类型： `boolean`\n- 默认值： false\n- 详情：\n\n    路由是否按需加载\n## externals\n\n- 类型：`object`\n- 默认值：`{}`\n- 详情：\n\n    设置哪些模块可以不被打包，通过 `<script>` 或其他方式引入。\n\n示例：\n\n```js\nexport default {\n    externals: {\n      vue: 'window.Vue',\n    },\n}\n```\n\n\n## extraBabelPlugins\n\n- 类型： `array`\n- 默认值： `[]`\n- 详情：  \n\n 配置额外的 babel 插件。\n\n- 示例：\n```js\nexport default {\n    extraBabelPlugins: [\n        ['import', { libraryName: 'ant-design-vue', libraryDirectory: 'es', style: 'css' }],\n    ],\n}\n```\n\n## extraPostCSSPlugins\n\n- 类型： `array`\n- 默认值： `[]`\n- 详情：  \n\n    设置额外的 [postcss 插件](https://github.com/postcss/postcss/blob/master/docs/plugins.md)。\n\n## inlineLimit\n\n- 类型： `number`\n- 默认值： `8192`(8k)\n- 详情：\n\n    配置图片文件是否走 base64 编译的阈值。默认是 `8192` 字节，小于它会被编译为 base64 编码，否则会生成单独的文件。\n    \n## lessLoader\n\n- 类型： `object`\n- 默认值： `{}`\n- 详情：\n\n    设置 [less-loader 配置项](https://github.com/webpack-contrib/less-loader)。\n\n## mock\n\n- 类型： `object || boolean`\n- 默认值： `{}`\n- 详情：\n\n    配置 mock 属性。\n\n    - 当 mock 为 `boolean` 类型时，`true` 表示打开 mock，`false` 表示关闭 mock。\n    - 当 mock 为 `object` 类型时，默认打开 mock。也可以通过子属性 `prefix` 添加过滤条件，满足条件的走 mock 文件。 \n\n- 示例：\n```js\nexport default {\n    mock: {\n        prefix: '/api/auth'\n    }\n}\n```\n然后所有以 `/api/users` 开始的请求，就能进入 mock.js 文件处理。\n\n## mountElementId\n\n- 类型： `string`\n- 默认值： `app`\n- 详情：\n\n    指定渲染到的 HTML 元素 id。\n\n## nodeModulesTransform\n\n- 类型： `object`\n- 默认值： `{ exclude: [] }`\n- 详情：\n\n    默认编译所有 `node_modules` 下的包，可以通过配置 `exclude` 来跳过某些包，以提高编译速度。\n\n## outputPath\n\n- 类型： `string`\n- 默认值： `dist`\n- 详情：\n\n    指定输出路径。\n\n::: tip\n不允许设定为 `src`、`public`、`pages` 等约定目录。\n:::\n\n## plugins\n\n- 类型： `Array(string)`\n- 默认值： `[]`\n- 详情：\n\n    配置额外的 `fes` 插件。\n    数组项为指向插件的路径，可以是 npm 依赖、相对路径或绝对路径。如果是相对路径，则会从项目根目录开始找。\n\n- 示例：\n```js\nexport default {\n  plugins: [\n    // npm 依赖\n    'fes-plugin-hello',\n    // 相对路径\n    './plugin',\n    // 绝对路径\n    `${__dirname}/plugin.js`,\n  ],\n};\n```\n\n\n## postcssLoader\n\n- 类型： `object`\n- 默认值： `{}`\n- 详情：\n\n    设置 [postcss-loader 配置项](https://github.com/postcss/postcss-loader#options)。\n\n## proxy\n\n- 类型： `object`\n- 默认值： `{}`\n- 详情：\n\n    配置代理能力。\n\n- 示例：\n```js\nexport default {\n    proxy: {\n        '/v2': {\n            'target': 'https://api.douban.com/',\n            'changeOrigin': true, \n        }\n    }\n}\n```\n然后访问 `/v2/movie/in_theaters_proxy` 就能访问到 [http://api.douban.com/v2/movie/in_theaters_proxy](http://api.douban.com/v2/movie/in_theaters_proxy) 的数据。\n\n## publicpath\n\n- 类型： `publicPath`\n- 默认值： `/`\n- 详情：\n\n    配置 webpack 的 publicPath。当打包的时候，webpack 会在静态文件路径前面添加 `publicPath` 的值，当你需要修改静态文件地址时，比如使用 CDN 部署，把 `publicPath` 的值设为 CDN 的值就可以。\n\n## router\n\n- 类型： `object`\n- 默认值： `{ mode: 'hash' }`\n- 详情： 配置路由，具体请查看指南中关于路由的介绍\n\n## singular\n- 类型： `boolean`\n- 默认值： `false`\n- 详情：\n\n    配置是否启用单数模式的目录。 比如 `src/pages` 的约定在开启后为 `src/page` 目录，@fesjs/fes-plugins 插件也遵照此配置的约定。\n\n## targets\n- 类型： `object`\n- 默认值： `{}`\n- 详情：\n\n    配置需要兼容的浏览器最低版本，会自动引入 polyfill 和做语法转换。\n\n## terserOptions\n\n- 类型： `object`\n- 默认值：\n```js\nconst defaultTerserOptions = {\n    compress: {\n        // turn off flags with small gains to speed up minification\n        arrows: false,\n        collapse_vars: false, // 0.3kb\n        comparisons: false,\n        computed_props: false,\n        hoist_funs: false,\n        hoist_props: false,\n        hoist_vars: false,\n        inline: false,\n        loops: false,\n        negate_iife: false,\n        properties: false,\n        reduce_funcs: false,\n        reduce_vars: false,\n        switches: false,\n        toplevel: false,\n        typeofs: false,\n\n        // a few flags with noticeable gains/speed ratio\n        // numbers based on out of the box vendor bundle\n        booleans: true, // 0.7kb\n        if_return: "}},{"format":"markdown","foundDate":1638413756729,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/reference/cli/README.md","start":{"line":1,"column":1,"position":0},"end":{"line":174,"column":4,"position":720},"range":[0,2646],"fragment":"---\nsidebar: auto\n---\n\n# 命令行工具\n\n## create-fes-app\n通过 `create-fes-app` 命令创建项目模板，输入`create-fes-app -h`则可以看到如下信息：\n```\nUsage: create-fes-app <name>\n\nOptions:\n    -v, --version            Output the current version\n    -h, --help               Display help for command   \n    -f, --force              Overwrite target directory if it exists\n    -m, --merge              Merge target directory if it exists\n```\n\n可以在本机安装后使用：\n<CodeGroup>\n  <CodeGroupItem title=\"YARN\" active>\n\n```bash\n# 全局安装\nyarn global add @fesjs/create-fes-app\n\n# 创建模板\ncreate-fes-app fes-app\n```\n\n  </CodeGroupItem>\n\n  <CodeGroupItem title=\"NPM\">\n\n```bash\n# 全局安装\nnpm i -g @fesjs/create-fes-app\n\n# 创建模板\ncreate-fes-app fes-app\n```\n\n  </CodeGroupItem>\n</CodeGroup>\n\n推荐使用 `yarn create` 和 `npx` 方式创建模板，一直使用最新的模板：\n\n<CodeGroup>\n  <CodeGroupItem title=\"YARN\" active>\n\n```bash\n# 创建模板\nyarn create @fesjs/fes-app myapp\n\n# 安装依赖\nyarn \n\n# 运行\nyarn dev\n```\n\n  </CodeGroupItem>\n\n  <CodeGroupItem title=\"NPM\">\n\n```bash\n# 创建模板\nnpx @fesjs/create-fes-app myapp\n\n# 安装依赖\nnpm install \n\n# 运行\nnpm run dev\n```\n\n  </CodeGroupItem>\n</CodeGroup>\n\n\n## fes\n需要在项目根目录执行 `fes` 命令，输入`fes -h`则可以看到如下信息：\n\n```\nUsage: fes <command> [options]\n\n一个好用的前端应用解决方案\n\nOptions:\n  -v, --vers         output the current version\n  -h, --help         display help for command\n\nCommands:\n  build              build application for production\n  dev [options]      start a local http service for development\n  help               show command helps\n  info               print debugging information about your environment\n  webpack [options]  inspect webpack configurations\n\n  Run fes <command> --help for detailed usage of given command.\n```\n\n### fes dev\n启动本地开发服务器进行项目的开发调试。\n```\nUsage: fes dev [options]\n\nstart a local http service for development\n\nOptions:\n  --port      http service port, like 8080\n  --https     whether to turn on the https service\n  -h, --help  display help for command\n```\n比如：\n```bash\nfes dev --port=8080\n```\n\n### fes build\n编译构建 web 产物。\n```\nUsage: fes build [options]\n\nbuild application for production\n\nOptions:\n  -h, --help  display help for command\n```\n比如：\n```\nfes build\n```\n### fes help\n打印帮助文档。\n比如：\n```bash\nfes help\n```\n\n### fes info\n打印当前项目的有用的环境信息，用来帮助定位问题。\n```\nUsage: fes info [options]\n\nprint debugging information about your environment\n\nOptions:\n  -h, --help  display help for command\n```\n比如：\n```bash\nfes info\n```\n\n### fes webpack\n查看项目使用的 webpack 配置。\n```\nUsage: fes webpack [options]\n\ninspect webpack configurations\n\nOptions:\n  --rule <ruleName>      inspect a specific module rule\n  --plugin <pluginName>  inspect a specific plugin\n  --rules                list all module rule names\n  --plugins              list"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/cli/README.md","start":{"line":1,"column":1,"position":0},"end":{"line":174,"column":4,"position":720},"range":[0,2646],"fragment":"---\nsidebar: auto\n---\n\n# 命令行工具\n\n## create-fes-app\n通过 `create-fes-app` 命令创建项目模板，输入`create-fes-app -h`则可以看到如下信息：\n```\nUsage: create-fes-app <name>\n\nOptions:\n    -v, --version            Output the current version\n    -h, --help               Display help for command   \n    -f, --force              Overwrite target directory if it exists\n    -m, --merge              Merge target directory if it exists\n```\n\n可以在本机安装后使用：\n<CodeGroup>\n  <CodeGroupItem title=\"YARN\" active>\n\n```bash\n# 全局安装\nyarn global add @fesjs/create-fes-app\n\n# 创建模板\ncreate-fes-app fes-app\n```\n\n  </CodeGroupItem>\n\n  <CodeGroupItem title=\"NPM\">\n\n```bash\n# 全局安装\nnpm i -g @fesjs/create-fes-app\n\n# 创建模板\ncreate-fes-app fes-app\n```\n\n  </CodeGroupItem>\n</CodeGroup>\n\n推荐使用 `yarn create` 和 `npx` 方式创建模板，一直使用最新的模板：\n\n<CodeGroup>\n  <CodeGroupItem title=\"YARN\" active>\n\n```bash\n# 创建模板\nyarn create @fesjs/fes-app myapp\n\n# 安装依赖\nyarn \n\n# 运行\nyarn dev\n```\n\n  </CodeGroupItem>\n\n  <CodeGroupItem title=\"NPM\">\n\n```bash\n# 创建模板\nnpx @fesjs/create-fes-app myapp\n\n# 安装依赖\nnpm install \n\n# 运行\nnpm run dev\n```\n\n  </CodeGroupItem>\n</CodeGroup>\n\n\n## fes\n需要在项目根目录执行 `fes` 命令，输入`fes -h`则可以看到如下信息：\n\n```\nUsage: fes <command> [options]\n\n一个好用的前端应用解决方案\n\nOptions:\n  -v, --vers         output the current version\n  -h, --help         display help for command\n\nCommands:\n  build              build application for production\n  dev [options]      start a local http service for development\n  help               show command helps\n  info               print debugging information about your environment\n  webpack [options]  inspect webpack configurations\n\n  Run fes <command> --help for detailed usage of given command.\n```\n\n### fes dev\n启动本地开发服务器进行项目的开发调试。\n```\nUsage: fes dev [options]\n\nstart a local http service for development\n\nOptions:\n  --port      http service port, like 8080\n  --https     whether to turn on the https service\n  -h, --help  display help for command\n```\n比如：\n```bash\nfes dev --port=8080\n```\n\n### fes build\n编译构建 web 产物。\n```\nUsage: fes build [options]\n\nbuild application for production\n\nOptions:\n  -h, --help  display help for command\n```\n比如：\n```\nfes build\n```\n### fes help\n打印帮助文档。\n比如：\n```bash\nfes help\n```\n\n### fes info\n打印当前项目的有用的环境信息，用来帮助定位问题。\n```\nUsage: fes info [options]\n\nprint debugging information about your environment\n\nOptions:\n  -h, --help  display help for command\n```\n比如：\n```bash\nfes info\n```\n\n### fes webpack\n查看项目使用的 webpack 配置。\n```\nUsage: fes webpack [options]\n\ninspect webpack configurations\n\nOptions:\n  --rule <ruleName>      inspect a specific module rule\n  --plugin <pluginName>  inspect a specific plugin\n  --rules                list all module rule names\n  --plugins              list"}},{"format":"markdown","foundDate":1638413756732,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/reference/api/README.md","start":{"line":1,"column":1,"position":0},"end":{"line":190,"column":5,"position":731},"range":[0,3655],"fragment":"---\nsidebar: auto\n---\n\n# API\nFes.js 统一了API的出口，所有运行时API（包含Fes.js内置API和插件提供的API）全部通过`@fesjs/fes`导出。\n```js\nimport { someApi  } from \"@fesjs/fes\"\n```\n\n## 基础API\n\n### plugin\n::: tip\n主要在插件里面使用，项目代码中一般用不到。\n:::\n\n运行时插件接口，是 Fes.js 内置的跑在浏览器里的一套插件体系。\n```js\nimport { plugin, ApplyPluginsType } from '@fesjs/fes';\n\n// 注册插件\nplugin.register({\n  apply: { dva: { foo: 1 } },\n  path: 'foo',\n});\nplugin.register({\n  apply: { dva: { bar: 1 } },\n  path: 'bar',\n});\n\n// 执行插件\n// 得到 { foo: 1, bar: 1 }\nplugin.applyPlugins({\n  key: 'dva',\n  type: ApplyPluginsType.modify,\n  initialValue: {},\n  args: {},\n  async: false,\n});\n\n```\n\n#### **plugin.register** 参数包含:     \n- apply   插件文件导出的内容\n- path    插件文件路径\n\n\n\n\n#### **plugin.applyPlugins** 参数包含:     \n- key，坑位的 key\n- type，执行方式类型，详见 [ApplyPluginsType](#applypluginstype)\n- initialValue，初始值\n- args，参数\n- async，是否异步执行且返回 Promise\n\n### ApplyPluginsType\n::: tip\n主要在插件里面使用，项目代码中一般用不到。\n:::\n\n运行时插件执行类型，enum 类型，包含三个属性：\n- compose，用于合并执行多个函数，函数可决定前序函数的执行时机\n- modify，用于修改值\n- event，用于执行事件，前面没有依赖关系\n\n\n## 路由API\n\nFes.js 路由基于 [Vue Router 4.0](https://next.router.vuejs.org/introduction.html)，想了解更多的同学可以看看官方文档。\n\n### getRouter\n返回当前 `router` 实例。\n```js\nimport { getRouter } from \"@fesjs/fes\";\n\nconst router = getRouter();\nrouter.push();\n```\n\n### useRoute\n返回当前 `route` 实例，相当于在模板内使用 `$route`。必须在 `setup` 函数内调用。\n```js\nimport { useRoute } from \"@fesjs/fes\";\nexport default {\n    setup(){\n        const route = useRoute()\n    }\n}\n```\n\n### useRouter\n返回 `router` 实例，相当于在模板语法中使用 `$router`。必须在 `setup` 函数内调用。\n```js\nimport { useRouter } from \"@fesjs/fes\";\nexport default {\n    setup(){\n        const router = useRouter()\n    }\n}\n```\n\n### onBeforeRouteUpdate\n添加导航守卫，在当前路由即将更新时触发。类似于之前的`beforeRouteUpdate`，但是可用于任何组件。卸载组件时，将移除守卫。\n```js\nimport { onBeforeRouteUpdate } from \"@fesjs/fes\";\nexport default {\n    setup(){\n        onBeforeRouteUpdate((to, from, next)=>{\n        })\n    }\n}\n```\n### onBeforeRouteLeave\n添加导航守卫，在当前路由即将离开时触发。类似于之前的`beforeRouteLeave`，但可用于任何组件。卸载组件时，将移除守卫。\n```js\nimport { onBeforeRouteLeave } from \"@fesjs/fes\";\nexport default {\n    setup(){\n        onBeforeRouteLeave((to, from, next)=>{\n        })\n    }\n}\n```\n\n### createWebHashHistory\n::: tip\n在开发插件时可能用上，平时一般用不上\n:::\n创建一个 hash 历史记录。对于没有主机的 web 应用程序 (例如 file://)，或当配置服务器不能处理任意URL时这非常有用。注意：如果 SEO 对你很重要，你应该使用 `createWebHistory`。\n\n### createWebHistory\n::: tip\n在开发插件时可能用上，平时一般用不上\n:::\n创建HTML5历史记录。单页应用程序最常见的历史记录。必须通过 http 服务打开页面地址 。\n\n### createMemoryHistory\n::: tip\n在开发插件时可能用上，平时一般用不上\n:::\n创建一个基于内存的历史记录。这个历史记录的主要目的是处理 SSR。它在一个特殊的位置开始，这个位置无处不在。如果用户不在浏览器上下文中，它们可以通过调用 router.push() 或 router.replace() 将该位置替换为启动位置。\n\n### createRouter\n创建一个路由器实例，该实例可用于 Vue 应用程序。查看[路由器选项](https://next.router.vuejs.org/api/#routeroptions)，了解可以传递的所有属性的列表。\n\n### RouterLink\n使用自定义组件路由器链接来创建链接，而不是使用常规标签。这使得 Vue 路由器无需重新加载页面即可更改 URL、处理 URL 生成及其编码。\n```html\n<router-link to=\"/about\">Go to About</router-link>\n```\n可以查看[官方文档](https://next.router.vuejs.org/api/#router-link-props)了解更多 RouterLink 的 Porps。查看[官方文档](https://next.router.vuejs.org/api/#router-link-s-v-slot)了解 RouterLink 的作用域插槽。\n\n### useLink\n返回的结果跟 RouterLink 的作用域插槽的属性一致，查看[官方API](https://next.router.vuejs.org/api/#router-link-s-v-slot)了解更多。\n```js\nimport { RouterLink, useLink } from '@fesjs/fes'\n\nexport default {\n  name: 'AppLink',\n\n  props: {\n    // add @ts-ignore if using TypeScript\n    ...RouterLink.props,\n    inactiveClass: String,\n  },\n\n  setup(props) {\n    // `props` contains `to` and any other prop that can be passed to <router-link>\n    const { navigate, href, route, isActive, isExactActive } = useLink(props)\n\n    // profit!\n\n    return { isExternalLink }\n  },\n}\n```\n\n### RouterView\nrouter-view 将显示当前 URL 的对应的路由组件。你可以把它放在任何地方，以适应你的布局。\n```html\n<router-view></r"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/api/README.md","start":{"line":1,"column":1,"position":0},"end":{"line":190,"column":5,"position":731},"range":[0,3655],"fragment":"---\nsidebar: auto\n---\n\n# API\nFes.js 统一了API的出口，所有运行时API（包含Fes.js内置API和插件提供的API）全部通过`@fesjs/fes`导出。\n```js\nimport { someApi  } from \"@fesjs/fes\"\n```\n\n## 基础API\n\n### plugin\n::: tip\n主要在插件里面使用，项目代码中一般用不到。\n:::\n\n运行时插件接口，是 Fes.js 内置的跑在浏览器里的一套插件体系。\n```js\nimport { plugin, ApplyPluginsType } from '@fesjs/fes';\n\n// 注册插件\nplugin.register({\n  apply: { dva: { foo: 1 } },\n  path: 'foo',\n});\nplugin.register({\n  apply: { dva: { bar: 1 } },\n  path: 'bar',\n});\n\n// 执行插件\n// 得到 { foo: 1, bar: 1 }\nplugin.applyPlugins({\n  key: 'dva',\n  type: ApplyPluginsType.modify,\n  initialValue: {},\n  args: {},\n  async: false,\n});\n\n```\n\n#### **plugin.register** 参数包含:     \n- apply   插件文件导出的内容\n- path    插件文件路径\n\n\n\n\n#### **plugin.applyPlugins** 参数包含:     \n- key，坑位的 key\n- type，执行方式类型，详见 [ApplyPluginsType](#applypluginstype)\n- initialValue，初始值\n- args，参数\n- async，是否异步执行且返回 Promise\n\n### ApplyPluginsType\n::: tip\n主要在插件里面使用，项目代码中一般用不到。\n:::\n\n运行时插件执行类型，enum 类型，包含三个属性：\n- compose，用于合并执行多个函数，函数可决定前序函数的执行时机\n- modify，用于修改值\n- event，用于执行事件，前面没有依赖关系\n\n\n## 路由API\n\nFes.js 路由基于 [Vue Router 4.0](https://next.router.vuejs.org/introduction.html)，想了解更多的同学可以看看官方文档。\n\n### getRouter\n返回当前 `router` 实例。\n```js\nimport { getRouter } from \"@fesjs/fes\";\n\nconst router = getRouter();\nrouter.push();\n```\n\n### useRoute\n返回当前 `route` 实例，相当于在模板内使用 `$route`。必须在 `setup` 函数内调用。\n```js\nimport { useRoute } from \"@fesjs/fes\";\nexport default {\n    setup(){\n        const route = useRoute()\n    }\n}\n```\n\n### useRouter\n返回 `router` 实例，相当于在模板语法中使用 `$router`。必须在 `setup` 函数内调用。\n```js\nimport { useRouter } from \"@fesjs/fes\";\nexport default {\n    setup(){\n        const router = useRouter()\n    }\n}\n```\n\n### onBeforeRouteUpdate\n添加导航守卫，在当前路由即将更新时触发。类似于之前的`beforeRouteUpdate`，但是可用于任何组件。卸载组件时，将移除守卫。\n```js\nimport { onBeforeRouteUpdate } from \"@fesjs/fes\";\nexport default {\n    setup(){\n        onBeforeRouteUpdate((to, from, next)=>{\n        })\n    }\n}\n```\n### onBeforeRouteLeave\n添加导航守卫，在当前路由即将离开时触发。类似于之前的`beforeRouteLeave`，但可用于任何组件。卸载组件时，将移除守卫。\n```js\nimport { onBeforeRouteLeave } from \"@fesjs/fes\";\nexport default {\n    setup(){\n        onBeforeRouteLeave((to, from, next)=>{\n        })\n    }\n}\n```\n\n### createWebHashHistory\n::: tip\n在开发插件时可能用上，平时一般用不上\n:::\n创建一个 hash 历史记录。对于没有主机的 web 应用程序 (例如 file://)，或当配置服务器不能处理任意URL时这非常有用。注意：如果 SEO 对你很重要，你应该使用 `createWebHistory`。\n\n### createWebHistory\n::: tip\n在开发插件时可能用上，平时一般用不上\n:::\n创建HTML5历史记录。单页应用程序最常见的历史记录。必须通过 http 服务打开页面地址 。\n\n### createMemoryHistory\n::: tip\n在开发插件时可能用上，平时一般用不上\n:::\n创建一个基于内存的历史记录。这个历史记录的主要目的是处理 SSR。它在一个特殊的位置开始，这个位置无处不在。如果用户不在浏览器上下文中，它们可以通过调用 router.push() 或 router.replace() 将该位置替换为启动位置。\n\n### createRouter\n创建一个路由器实例，该实例可用于 Vue 应用程序。查看[路由器选项](https://next.router.vuejs.org/api/#routeroptions)，了解可以传递的所有属性的列表。\n\n### RouterLink\n使用自定义组件路由器链接来创建链接，而不是使用常规标签。这使得 Vue 路由器无需重新加载页面即可更改 URL、处理 URL 生成及其编码。\n```html\n<router-link to=\"/about\">Go to About</router-link>\n```\n可以查看[官方文档](https://next.router.vuejs.org/api/#router-link-props)了解更多 RouterLink 的 Porps。查看[官方文档](https://next.router.vuejs.org/api/#router-link-s-v-slot)了解 RouterLink 的作用域插槽。\n\n### useLink\n返回的结果跟 RouterLink 的作用域插槽的属性一致，查看[官方API](https://next.router.vuejs.org/api/#router-link-s-v-slot)了解更多。\n```js\nimport { RouterLink, useLink } from '@fesjs/fes'\n\nexport default {\n  name: 'AppLink',\n\n  props: {\n    // add @ts-ignore if using TypeScript\n    ...RouterLink.props,\n    inactiveClass: String,\n  },\n\n  setup(props) {\n    // `props` contains `to` and any other prop that can be passed to <router-link>\n    const { navigate, href, route, isActive, isExactActive } = useLink(props)\n\n    // profit!\n\n    return { isExternalLink }\n  },\n}\n```\n\n### RouterView\nrouter-view 将显示当前 URL 的对应的路由组件。你可以把它放在任何地方，以适应你的布局。\n```html\n<router-view></r"}},{"format":"json","foundDate":1638413756736,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/tsconfig.json","start":{"line":1,"column":1,"position":0},"end":{"line":37,"column":2,"position":233},"range":[0,893],"fragment":"{\n  \"compilerOptions\": {\n    \"outDir\": \"build/dist\",\n    \"module\": \"esnext\",\n    \"target\": \"esnext\",\n    \"lib\": [\"esnext\", \"dom\"],\n    \"sourceMap\": true,\n    \"baseUrl\": \".\",\n    \"jsx\": \"preserve\",\n    \"allowSyntheticDefaultImports\": true,\n    \"moduleResolution\": \"node\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"noImplicitReturns\": true,\n    \"suppressImplicitAnyIndexErrors\": true,\n    \"noUnusedLocals\": true,\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"experimentalDecorators\": true,\n    \"strict\": true,\n    \"paths\": {\n      \"@/*\": [\"./src/*\"],\n      \"@@/*\": [\"./src/.fes/*\"]\n    }\n  },\n  \"include\": [\n    \"src/**/*\",\n    \"tests/**/*\",\n    \"test/**/*\",\n    \"__test__/**/*\",\n    \"typings/**/*\",\n    \"config/**/*\",\n    \".eslintrc.js\",\n    \".stylelintrc.js\",\n    \".prettierrc.js\"\n  ],\n  \"exclude\": [\"node_modules\", \"build\", \"dist\", \"scripts\", \"src/.fes/*\", \"webpack\", \"jest\"]\n}"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/create-fes-app/templates/app/pc/tsconfig.json","start":{"line":1,"column":1,"position":0},"end":{"line":37,"column":2,"position":233},"range":[0,893],"fragment":"{\n  \"compilerOptions\": {\n    \"outDir\": \"build/dist\",\n    \"module\": \"esnext\",\n    \"target\": \"esnext\",\n    \"lib\": [\"esnext\", \"dom\"],\n    \"sourceMap\": true,\n    \"baseUrl\": \".\",\n    \"jsx\": \"preserve\",\n    \"allowSyntheticDefaultImports\": true,\n    \"moduleResolution\": \"node\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"noImplicitReturns\": true,\n    \"suppressImplicitAnyIndexErrors\": true,\n    \"noUnusedLocals\": true,\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"experimentalDecorators\": true,\n    \"strict\": true,\n    \"paths\": {\n      \"@/*\": [\"./src/*\"],\n      \"@@/*\": [\"./src/.fes/*\"]\n    }\n  },\n  \"include\": [\n    \"src/**/*\",\n    \"tests/**/*\",\n    \"test/**/*\",\n    \"__test__/**/*\",\n    \"typings/**/*\",\n    \"config/**/*\",\n    \".eslintrc.js\",\n    \".stylelintrc.js\",\n    \".prettierrc.js\"\n  ],\n  \"exclude\": [\"node_modules\", \"build\", \"dist\", \"scripts\", \"src/.fes/*\", \"webpack\", \"jest\"]\n}"}},{"format":"json","foundDate":1638413756737,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/package.json","start":{"line":6,"column":25,"position":34},"end":{"line":43,"column":31,"position":214},"range":[139,872],"fragment":",\n    \"dev\": \"fes dev\"\n  },\n  \"keywords\": [\n    \"管理端\",\n    \"fes\",\n    \"fast\",\n    \"easy\",\n    \"strong\"\n  ],\n  \"files\": [\n    \".eslintrc.js\",\n    \".gitignore\",\n    \".fes.js\",\n    \".fes.prod.js\",\n    \"mock.js\",\n    \"package.json\",\n    \"README.md\",\n    \"tsconfig.json\",\n    \"/src\",\n    \"/config\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/WeBankFinTech/fes.js.git\",\n    \"directory\": \"packages/fes-template-h5\"\n  },\n  \"author\": \"qlin\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/WeBankFinTech/fes.js/issues\"\n  },\n  \"homepage\": \"https://github.com/WeBankFinTech/fes.js#readme\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"devDependencies\": {\n    \"@webank/eslint-config-webank\""},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/create-fes-app/templates/app/h5/package.json","start":{"line":6,"column":12,"position":34},"end":{"line":43,"column":20,"position":214},"range":[127,849],"fragment":",\n    \"dev\": \"fes dev\"\n  },\n  \"keywords\": [\n    \"管理端\",\n    \"fes\",\n    \"fast\",\n    \"easy\",\n    \"strong\"\n  ],\n  \"files\": [\n    \".eslintrc.js\",\n    \".gitignore\",\n    \".fes.js\",\n    \".fes.prod.js\",\n    \"mock.js\",\n    \"package.json\",\n    \"README.md\",\n    \"tsconfig.json\",\n    \"/src\",\n    \"/config\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/WeBankFinTech/fes.js.git\",\n    \"directory\": \"packages/fes-template-h5\"\n  },\n  \"author\": \"qlin\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/WeBankFinTech/fes.js/issues\"\n  },\n  \"homepage\": \"https://github.com/WeBankFinTech/fes.js#readme\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"devDependencies\": {\n    \"@vue/compiler-sfc\""}},{"format":"javascript","foundDate":1638413756739,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template-h5/.fes.js","start":{"line":14,"column":5,"position":62},"end":{"line":38,"column":2,"position":210},"range":[302,860],"fragment":"},\n    html: {\n        title: '拉夫德鲁'\n    },\n    extraPostCSSPlugins: [\n        pxtoviewport({\n            unitToConvert: 'px',\n            viewportWidth: 375,\n            unitPrecision: 5,\n            propList: ['*'],\n            viewportUnit: 'vw',\n            fontViewportUnit: 'vw',\n            selectorBlackList: [],\n            minPixelValue: 1,\n            mediaQuery: false,\n            replace: true,\n            exclude: [],\n            landscape: false,\n            landscapeUnit: 'vw'\n        })\n    ],\n    devServer: {\n        port: 8000\n    }\n};"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/create-fes-app/templates/app/h5/.fes.js","start":{"line":12,"column":5,"position":48},"end":{"line":36,"column":2,"position":196},"range":[249,807],"fragment":"},\n    html: {\n        title: '拉夫德鲁'\n    },\n    extraPostCSSPlugins: [\n        pxtoviewport({\n            unitToConvert: 'px',\n            viewportWidth: 375,\n            unitPrecision: 5,\n            propList: ['*'],\n            viewportUnit: 'vw',\n            fontViewportUnit: 'vw',\n            selectorBlackList: [],\n            minPixelValue: 1,\n            mediaQuery: false,\n            replace: true,\n            exclude: [],\n            landscape: false,\n            landscapeUnit: 'vw'\n        })\n    ],\n    devServer: {\n        port: 8000\n    }\n};"}},{"format":"json","foundDate":1638413756740,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/tsconfig.json","start":{"line":1,"column":1,"position":0},"end":{"line":37,"column":2,"position":233},"range":[0,893],"fragment":"{\n  \"compilerOptions\": {\n    \"outDir\": \"build/dist\",\n    \"module\": \"esnext\",\n    \"target\": \"esnext\",\n    \"lib\": [\"esnext\", \"dom\"],\n    \"sourceMap\": true,\n    \"baseUrl\": \".\",\n    \"jsx\": \"preserve\",\n    \"allowSyntheticDefaultImports\": true,\n    \"moduleResolution\": \"node\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"noImplicitReturns\": true,\n    \"suppressImplicitAnyIndexErrors\": true,\n    \"noUnusedLocals\": true,\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"experimentalDecorators\": true,\n    \"strict\": true,\n    \"paths\": {\n      \"@/*\": [\"./src/*\"],\n      \"@@/*\": [\"./src/.fes/*\"]\n    }\n  },\n  \"include\": [\n    \"src/**/*\",\n    \"tests/**/*\",\n    \"test/**/*\",\n    \"__test__/**/*\",\n    \"typings/**/*\",\n    \"config/**/*\",\n    \".eslintrc.js\",\n    \".stylelintrc.js\",\n    \".prettierrc.js\"\n  ],\n  \"exclude\": [\"node_modules\", \"build\", \"dist\", \"scripts\", \"src/.fes/*\", \"webpack\", \"jest\"]\n}"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/create-fes-app/templates/app/pc/tsconfig.json","start":{"line":1,"column":1,"position":0},"end":{"line":37,"column":2,"position":233},"range":[0,893],"fragment":"{\n  \"compilerOptions\": {\n    \"outDir\": \"build/dist\",\n    \"module\": \"esnext\",\n    \"target\": \"esnext\",\n    \"lib\": [\"esnext\", \"dom\"],\n    \"sourceMap\": true,\n    \"baseUrl\": \".\",\n    \"jsx\": \"preserve\",\n    \"allowSyntheticDefaultImports\": true,\n    \"moduleResolution\": \"node\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"noImplicitReturns\": true,\n    \"suppressImplicitAnyIndexErrors\": true,\n    \"noUnusedLocals\": true,\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"experimentalDecorators\": true,\n    \"strict\": true,\n    \"paths\": {\n      \"@/*\": [\"./src/*\"],\n      \"@@/*\": [\"./src/.fes/*\"]\n    }\n  },\n  \"include\": [\n    \"src/**/*\",\n    \"tests/**/*\",\n    \"test/**/*\",\n    \"__test__/**/*\",\n    \"typings/**/*\",\n    \"config/**/*\",\n    \".eslintrc.js\",\n    \".stylelintrc.js\",\n    \".prettierrc.js\"\n  ],\n  \"exclude\": [\"node_modules\", \"build\", \"dist\", \"scripts\", \"src/.fes/*\", \"webpack\", \"jest\"]\n}"}},{"format":"json","foundDate":1638413756741,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/packages/fes-template/package.json","start":{"line":11,"column":3,"position":64},"end":{"line":46,"column":31,"position":235},"range":[245,954],"fragment":"},\n  \"keywords\": [\n    \"管理端\",\n    \"fes\",\n    \"fast\",\n    \"easy\",\n    \"strong\"\n  ],\n  \"files\": [\n    \".eslintrc.js\",\n    \".gitignore\",\n    \".fes.js\",\n    \".fes.prod.js\",\n    \"mock.js\",\n    \"package.json\",\n    \"README.md\",\n    \"tsconfig.json\",\n    \"/src\",\n    \"/config\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/WeBankFinTech/fes.js.git\",\n    \"directory\": \"packages/fes-template\"\n  },\n  \"author\": \"harrywan\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/WeBankFinTech/fes.js/issues\"\n  },\n  \"homepage\": \"https://github.com/WeBankFinTech/fes.js#readme\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"devDependencies\": {\n    \"@webank/eslint-config-webank\""},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/packages/create-fes-app/templates/app/pc/package.json","start":{"line":11,"column":3,"position":64},"end":{"line":46,"column":20,"position":235},"range":[255,953],"fragment":"},\n  \"keywords\": [\n    \"管理端\",\n    \"fes\",\n    \"fast\",\n    \"easy\",\n    \"strong\"\n  ],\n  \"files\": [\n    \".eslintrc.js\",\n    \".gitignore\",\n    \".fes.js\",\n    \".fes.prod.js\",\n    \"mock.js\",\n    \"package.json\",\n    \"README.md\",\n    \"tsconfig.json\",\n    \"/src\",\n    \"/config\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/WeBankFinTech/fes.js.git\",\n    \"directory\": \"packages/fes-template\"\n  },\n  \"author\": \"harrywan\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/WeBankFinTech/fes.js/issues\"\n  },\n  \"homepage\": \"https://github.com/WeBankFinTech/fes.js#readme\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"devDependencies\": {\n    \"@vue/compiler-sfc\""}},{"format":"markdown","foundDate":1638413756794,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/README.md","start":{"line":29,"column":1,"position":98},"end":{"line":63,"column":2,"position":198},"range":[844,1123],"fragment":"er: MIT Licensed | Copyright © 2020-present Webank\n---\n\n## 像数 1, 2, 3 一样容易\n\n<CodeGroup>\n  <CodeGroupItem title=\"YARN\" active>\n\n```bash\n# 创建模板\nyarn create @fesjs/fes-app myapp\n\n# 安装依赖\nyarn \n\n# 运行\nyarn dev\n```\n\n  </CodeGroupItem>\n\n  <CodeGroupItem title=\"NPM\">\n\n```bash\n# 创建模板\nnpx "},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/cli/README.md","start":{"line":47,"column":1,"position":138},"end":{"line":81,"column":11,"position":238},"range":[705,993],"fragment":"tem>\n</CodeGroup>\n\n推荐使用 `yarn create` 和 `npx` 方式创建模板，一直使用最新的模板：\n\n<CodeGroup>\n  <CodeGroupItem title=\"YARN\" active>\n\n```bash\n# 创建模板\nyarn create @fesjs/fes-app myapp\n\n# 安装依赖\nyarn \n\n# 运行\nyarn dev\n```\n\n  </CodeGroupItem>\n\n  <CodeGroupItem title=\"NPM\">\n\n```bash\n# 创建模板\nnpx @fesjs/create-fes-ap"}},{"format":"markdown","foundDate":1638413756799,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/reference/cli.md","start":{"line":3,"column":1,"position":2},"end":{"line":81,"column":12,"position":591},"range":[2,2196],"fragment":"命令行接口\n\nVuePress 命令行接口是由 [@vuepress/cli](https://www.npmjs.com/package/@vuepress/cli) 包提供的。它是 [vuepress](https://www.npmjs.com/package/vuepress) 包的依赖之一，当然你也可以单独安装它。\n\n执行 `vuepress --help` 来获取下列帮助信息：\n\n```bash\nUsage:\n  $ vuepress <command> [options]\n\nCommands:\n  dev [sourceDir]    Start development server\n  build [sourceDir]  Build to static site\n  info               Display environment information\n\nFor more info, run any command with the `--help` flag:\n  $ vuepress dev --help\n  $ vuepress build --help\n  $ vuepress info --help\n\nOptions:\n  -v, --version  Display version number \n  -h, --help     Display this message \n```\n\n## dev\n\n启动一个开发服务器，在本地开发你的 VuePress 站点。\n\n```bash\nUsage:\n  $ vuepress dev [sourceDir]\n\nOptions:\n  -c, --config <config>  Set path to config file \n  -p, --port <port>      Use specified port (default: 8080) \n  -t, --temp <temp>      Set the directory of the temporary files \n  --host <host>          Use specified host (default: 0.0.0.0) \n  --cache <cache>        Set the directory of the cache files \n  --clean-temp           Clean the temporary files before dev \n  --clean-cache          Clean the cache files before dev \n  --open                 Open browser when ready \n  --debug                Enable debug mode \n  --no-watch             Disable watching page and config files (default: true)\n  -v, --version          Display version number \n  -h, --help             Display this message\n```\n\n::: tip\n通过命令行设置的配置项，会覆盖你配置文件中的同名配置项。\n:::\n\n## build\n\n将你的 VuePress 站点构建成静态文件，以便你进行后续[部署](../guide/deployment.md)。\n\n```bash\nUsage:\n  $ vuepress build [sourceDir]\n\nOptions:\n  -c, --config <config>  Set path to config file \n  -d, --dest <dest>      Set the directory build output (default: .vuepress/dist) \n  -t, --temp <temp>      Set the directory of the temporary files \n  --cache <cache>        Set the directory of the cache files \n  --clean-temp           Clean the temporary files before build \n  --clean-cache          Clean the cache files before build \n  --debug                Enable debug mode \n  -v, --version          Display version number \n  -h, --help             Display this message\n```\n\n::: tip\n通过命令行设置的配置项，会覆盖你配置文件中的同名配置项。\n:::\n\n## info\n\n输出当前系统和依赖相关的信息。\n\n在你想要检"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/reference/cli.md","start":{"line":3,"column":1,"position":2},"end":{"line":81,"column":12,"position":591},"range":[2,2196],"fragment":"命令行接口\n\nVuePress 命令行接口是由 [@vuepress/cli](https://www.npmjs.com/package/@vuepress/cli) 包提供的。它是 [vuepress](https://www.npmjs.com/package/vuepress) 包的依赖之一，当然你也可以单独安装它。\n\n执行 `vuepress --help` 来获取下列帮助信息：\n\n```bash\nUsage:\n  $ vuepress <command> [options]\n\nCommands:\n  dev [sourceDir]    Start development server\n  build [sourceDir]  Build to static site\n  info               Display environment information\n\nFor more info, run any command with the `--help` flag:\n  $ vuepress dev --help\n  $ vuepress build --help\n  $ vuepress info --help\n\nOptions:\n  -v, --version  Display version number \n  -h, --help     Display this message \n```\n\n## dev\n\n启动一个开发服务器，在本地开发你的 VuePress 站点。\n\n```bash\nUsage:\n  $ vuepress dev [sourceDir]\n\nOptions:\n  -c, --config <config>  Set path to config file \n  -p, --port <port>      Use specified port (default: 8080) \n  -t, --temp <temp>      Set the directory of the temporary files \n  --host <host>          Use specified host (default: 0.0.0.0) \n  --cache <cache>        Set the directory of the cache files \n  --clean-temp           Clean the temporary files before dev \n  --clean-cache          Clean the cache files before dev \n  --open                 Open browser when ready \n  --debug                Enable debug mode \n  --no-watch             Disable watching page and config files (default: true)\n  -v, --version          Display version number \n  -h, --help             Display this message\n```\n\n::: tip\n通过命令行设置的配置项，会覆盖你配置文件中的同名配置项。\n:::\n\n## build\n\n将你的 VuePress 站点构建成静态文件，以便你进行后续[部署](../guide/deployment.md)。\n\n```bash\nUsage:\n  $ vuepress build [sourceDir]\n\nOptions:\n  -c, --config <config>  Set path to config file \n  -d, --dest <dest>      Set the directory build output (default: .vuepress/dist) \n  -t, --temp <temp>      Set the directory of the temporary files \n  --cache <cache>        Set the directory of the cache files \n  --clean-temp           Clean the temporary files before build \n  --clean-cache          Clean the cache files before build \n  --debug                Enable debug mode \n  -v, --version          Display version number \n  -h, --help             Display this message\n```\n\n::: tip\n通过命令行设置的配置项，会覆盖你配置文件中的同名配置项。\n:::\n\n## info\n\n输出当前系统和依赖相关的信息。\n\n在你想要检"}},{"format":"markdown","foundDate":1638413756801,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/guide/template.md","start":{"line":3,"column":1,"position":2},"end":{"line":83,"column":4,"position":331},"range":[2,1675],"fragment":"HTML和静态资源\n\nFes.js 基于 [html-webpack-plugin](https://github.com/jantimon/html-webpack-plugin) 实现的模板功能，默认 HTML模板 是：\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <title><%= htmlWebpackPlugin.options.title %></title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n  </body>\n</html>\n```\n\n\n## 替换模板\n在 `src/public` 文件夹中创建`index.html`，Fes.js 约定如果这个文件存在，则会替换默认模板。\n\n## 配置模板\n\n### 配置\n在配置文件（`.fes.js`）中配置 `html`，把配置的对象作为参数传入 `html-webpack-plugin` 实例。\n\n举个 :chestnut: ：\n```js\nexport default {\n    html: {\n        title: '海贼王'\n    }\n}\n```\n页面的 title 会设置成'海贼王'。\n\n### 手动\n当然我们也可以手动编写模板，在模板中添加`link`、`link`、`meta`等标签。在我们手动配置模板时，有时候需要用到一些环境变量，模板里可以获取到的变量如下：\n\n- **htmlWebpackPlugin**，特定于此插件的数据\n- **webpackConfig**，用于此编译的webpack配置。例如，它可用于获取publicPath（webpackConfig.output.publicPath）。\n- **compilation**，webpack编译对象。例如，可以使用它来获取已处理资产的内容，并将其直接内联到页面中compilation.assets[...].source()\n\n举个 🌰 ：\n```html\n<link rel=\"icon\" type=\"image/x-icon\" href=\"<%= webpackConfig.output.publicPath %>favicon.png\" />\n```\n\n除上述 `html-webpack-plugin` 三点之外，Fes.js 还把 `process.env` 中的环境变量添加到模板作用域内：\n- `NODE_ENV`\n- `FES_ENV`\n- `.env` 文件中以 `FES_APP_` 开头的变量\n\n## 处理静态资源\n\n放置在 public 目录下或通过绝对路径被引用。这类资源将会直接被拷贝，而不会经过 webpack 的处理。\n\n### `public` 文件夹\n\n任何放置在 public 文件夹的静态资源都会被简单的复制，而不经过 webpack。你需要通过绝对路径来引用它们。\n\n* 在 public/index.html 或其它通过 html-webpack-plugin 用作模板的 HTML 文件中，你需要通过 <%= BASE_URL %> 设置链接前缀：\n\n```html\n<link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\n```\n\n* 在模板中，你首先需要向你的组件传入基础 URL：\n\n```html\nsetup() {\n  return {\n    publicPath: process.env.BASE_URL\n  }\n}\n```\n\n然后：\n\n``"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/guide/template.md","start":{"line":3,"column":1,"position":2},"end":{"line":83,"column":4,"position":331},"range":[2,1675],"fragment":"HTML和静态资源\n\nFes.js 基于 [html-webpack-plugin](https://github.com/jantimon/html-webpack-plugin) 实现的模板功能，默认 HTML模板 是：\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <title><%= htmlWebpackPlugin.options.title %></title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n  </body>\n</html>\n```\n\n\n## 替换模板\n在 `src/public` 文件夹中创建`index.html`，Fes.js 约定如果这个文件存在，则会替换默认模板。\n\n## 配置模板\n\n### 配置\n在配置文件（`.fes.js`）中配置 `html`，把配置的对象作为参数传入 `html-webpack-plugin` 实例。\n\n举个 :chestnut: ：\n```js\nexport default {\n    html: {\n        title: '海贼王'\n    }\n}\n```\n页面的 title 会设置成'海贼王'。\n\n### 手动\n当然我们也可以手动编写模板，在模板中添加`link`、`link`、`meta`等标签。在我们手动配置模板时，有时候需要用到一些环境变量，模板里可以获取到的变量如下：\n\n- **htmlWebpackPlugin**，特定于此插件的数据\n- **webpackConfig**，用于此编译的webpack配置。例如，它可用于获取publicPath（webpackConfig.output.publicPath）。\n- **compilation**，webpack编译对象。例如，可以使用它来获取已处理资产的内容，并将其直接内联到页面中compilation.assets[...].source()\n\n举个 🌰 ：\n```html\n<link rel=\"icon\" type=\"image/x-icon\" href=\"<%= webpackConfig.output.publicPath %>favicon.png\" />\n```\n\n除上述 `html-webpack-plugin` 三点之外，Fes.js 还把 `process.env` 中的环境变量添加到模板作用域内：\n- `NODE_ENV`\n- `FES_ENV`\n- `.env` 文件中以 `FES_APP_` 开头的变量\n\n## 处理静态资源\n\n放置在 public 目录下或通过绝对路径被引用。这类资源将会直接被拷贝，而不会经过 webpack 的处理。\n\n### `public` 文件夹\n\n任何放置在 public 文件夹的静态资源都会被简单的复制，而不经过 webpack。你需要通过绝对路径来引用它们。\n\n* 在 public/index.html 或其它通过 html-webpack-plugin 用作模板的 HTML 文件中，你需要通过 <%= BASE_URL %> 设置链接前缀：\n\n```html\n<link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\n```\n\n* 在模板中，你首先需要向你的组件传入基础 URL：\n\n```html\nsetup() {\n  return {\n    publicPath: process.env.BASE_URL\n  }\n}\n```\n\n然后：\n\n``"}},{"format":"markdown","foundDate":1638413756803,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/guide/runtime-config.md","start":{"line":3,"column":1,"position":2},"end":{"line":149,"column":40,"position":429},"range":[2,2411],"fragment":"运行时配置\n\n运行时配置和配置的区别是他跑在浏览器端，基于此，我们可以在这里写函数、`import` 浏览器端依赖等等，注意不要引入 `node` 依赖。\n\n## 配置方式\n约定 `src/app.js` 为运行时配置。运行时配置的类型有三种，具体查看[applypluginstype](../reference/api/#applypluginstype)。\n\n## 配置项\n\n### beforeRender\n\nbeforeRender(lastOpts)\n\n在渲染之前执行，执行`action`过程中显示 `loading` 配置的组件，执行结果作为参数 `initialState` 传给 `modifyClientRenderOpts`。\n\n示例：\n```js\n// app.js\nimport { access } from '@fesjs/fes';\nimport PageLoading from '@/components/PageLoading';\nimport UserCenter from '@/components/UserCenter';\n\nexport function beforeRender(lastOpts) {\n    return {\n        ...lastOpts,\n        loading: <PageLoading />,\n        action() {\n            const { setRole } = access;\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    setRole('admin');\n                    resolve({\n                        userName: 'harrywan'\n                    });\n                }, 1000);\n            });\n        }\n    }\n};\n```\n\n### patchRoutes\n\npatchRoutes({routes })\n\n\n修改路由。\n\n比如在最前面添加一个 /foo 路由：\n```\nexport function patchRoutes({ routes }) {\n  routes.unshift({\n    path: '/foo',\n    component: require('@/extraRoutes/foo').default,\n  });\n}\n```\n:::tip\n直接修改 `routes`, 不需要返回\n:::\n\n### modifyClientRenderOpts\n\nmodifyClientRenderOpts(lastOpts)\n\n修改 `clientRender` 参数。参数是一个对象：\n- routes，路由配置信息\n- rootElement， 渲染的根节点，默认是 `#app`，可通过配置 `mountElementId` 修改。\n- initialState， 初始化数据，`beforeRender` 运行得到的数据。\n\n比如在微前端里动态修改渲染根节点：\n```js\nlet isSubApp = false;\nexport function modifyClientRenderOpts(lastOpts) {\n  return {\n    ...lastOpts,\n    rootElement: isSubApp ? 'sub-root' : lastOpts.rootElement,    \n  };\n}\n```\n\n### rootContainer\n\nrootContainer(LastRootContainer, args)\n\n修改交给 Vue 渲染时的根组件，默认是 `<RouterView></RouterView>`。\n\n- LastRootContainer，上一个插件修改后的结果。\n- args，包含：\n    - routes，全量路由配置\n    - plugin，运行时插件机制\n\n比如在可以包一层DIV：\n```js\nexport function rootContainer(container) {\n    return () => {\n        return (\n            <div>\n                <RouterView></RouterView>\n            </div>\n        )\n  }\n}\n```\n\n### onAppCreated\n\nonAppCreated({app})\n\n创建 app 实例后触发。\n\n比如用于安装 Vue 插件：\n```js\nimport { createRouter } from \"vue-router\";\n\nexport function onAppCreated({ app }) {\n    const router = createRouter();\n    app.use(router);\n}\n\n```\n\n### render\n\nrender(oldRender: Function)\n\n覆写 render。\n\n比如用于渲染之前做权限校验。\n\n\n\n### onRouterCreated\n\nonRouterCreated({router})\n\n生成router时触发。\n\n比如用于收集切换路由的记录：\n```js\nexport function onRouterCreate"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/guide/runtime-config.md","start":{"line":3,"column":1,"position":2},"end":{"line":149,"column":40,"position":429},"range":[2,2411],"fragment":"运行时配置\n\n运行时配置和配置的区别是他跑在浏览器端，基于此，我们可以在这里写函数、`import` 浏览器端依赖等等，注意不要引入 `node` 依赖。\n\n## 配置方式\n约定 `src/app.js` 为运行时配置。运行时配置的类型有三种，具体查看[applypluginstype](../reference/api/#applypluginstype)。\n\n## 配置项\n\n### beforeRender\n\nbeforeRender(lastOpts)\n\n在渲染之前执行，执行`action`过程中显示 `loading` 配置的组件，执行结果作为参数 `initialState` 传给 `modifyClientRenderOpts`。\n\n示例：\n```js\n// app.js\nimport { access } from '@fesjs/fes';\nimport PageLoading from '@/components/PageLoading';\nimport UserCenter from '@/components/UserCenter';\n\nexport function beforeRender(lastOpts) {\n    return {\n        ...lastOpts,\n        loading: <PageLoading />,\n        action() {\n            const { setRole } = access;\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    setRole('admin');\n                    resolve({\n                        userName: 'harrywan'\n                    });\n                }, 1000);\n            });\n        }\n    }\n};\n```\n\n### patchRoutes\n\npatchRoutes({routes })\n\n\n修改路由。\n\n比如在最前面添加一个 /foo 路由：\n```\nexport function patchRoutes({ routes }) {\n  routes.unshift({\n    path: '/foo',\n    component: require('@/extraRoutes/foo').default,\n  });\n}\n```\n:::tip\n直接修改 `routes`, 不需要返回\n:::\n\n### modifyClientRenderOpts\n\nmodifyClientRenderOpts(lastOpts)\n\n修改 `clientRender` 参数。参数是一个对象：\n- routes，路由配置信息\n- rootElement， 渲染的根节点，默认是 `#app`，可通过配置 `mountElementId` 修改。\n- initialState， 初始化数据，`beforeRender` 运行得到的数据。\n\n比如在微前端里动态修改渲染根节点：\n```js\nlet isSubApp = false;\nexport function modifyClientRenderOpts(lastOpts) {\n  return {\n    ...lastOpts,\n    rootElement: isSubApp ? 'sub-root' : lastOpts.rootElement,    \n  };\n}\n```\n\n### rootContainer\n\nrootContainer(LastRootContainer, args)\n\n修改交给 Vue 渲染时的根组件，默认是 `<RouterView></RouterView>`。\n\n- LastRootContainer，上一个插件修改后的结果。\n- args，包含：\n    - routes，全量路由配置\n    - plugin，运行时插件机制\n\n比如在可以包一层DIV：\n```js\nexport function rootContainer(container) {\n    return () => {\n        return (\n            <div>\n                <RouterView></RouterView>\n            </div>\n        )\n  }\n}\n```\n\n### onAppCreated\n\nonAppCreated({app})\n\n创建 app 实例后触发。\n\n比如用于安装 Vue 插件：\n```js\nimport { createRouter } from \"vue-router\";\n\nexport function onAppCreated({ app }) {\n    const router = createRouter();\n    app.use(router);\n}\n\n```\n\n### render\n\nrender(oldRender: Function)\n\n覆写 render。\n\n比如用于渲染之前做权限校验。\n\n\n\n### onRouterCreated\n\nonRouterCreated({router})\n\n生成router时触发。\n\n比如用于收集切换路由的记录：\n```js\nexport function onRouterCreate"}},{"format":"markdown","foundDate":1638413756806,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/guide/route.md","start":{"line":3,"column":1,"position":2},"end":{"line":261,"column":4,"position":791},"range":[2,6104],"fragment":"路由\n\n像 Vue 、React 这类框架是用组件化搭建页面，路由解决的是路径到组件的匹配问题。Fes.js 基于 `Vue Router` 实现的路由，想了解更多的同学可以看看[官方文档](https://next.router.vuejs.org/)。\n\n## 路由配置\n\n在配置文件 `.fes.js`中通过 `router` 进行配置。\n```js\nexport default {\n    router: {\n        routes: [],\n        mode: 'hash'\n    }\n}\n```\n\n### routes\n`routes` 是配置添加到路由的初始路由列表，格式为路由信息的数组。具体使用参考 [Vue Router 文档](https://next.router.vuejs.org/zh/guide/) 中关于路由配置、路由匹配相关内容。\n\n\n### mode \n创建历史记录的类型：\n- **history**，对应 [createWebHistory](https://next.router.vuejs.org/zh/api/#createwebhistory)\n- **hash**，对应 [createWebHashHistory](https://next.router.vuejs.org/zh/api/#createWebHashHistory)\n- **memory**，对应 [createMemoryHistory](https://next.router.vuejs.org/zh/api/#createWebHashHistory)\n\n默认是`hash`模式。\n\n## 约定式路由\n约定式路由也叫文件路由，就是不需要手写配置，文件系统即路由，通过目录和文件及其命名分析出路由配置。      \n\n### 约定规范\n比如以下文件结构：\n```\npages\n├── index.vue         # 根路由页面 路径为 /\n├── *.vue             # 模糊匹配 路径为 *\n├── a.vue             # 路径 /a\n├── b                 # 文件夹b\n│   ├── index.vue     # 路径 /b\n│   ├── @id.vue       # 动态路由 /b/:id\n│   ├── c.vue         # 路径 /b/c\n│   └── layout.vue    # /b 路径下所有页面公共的布局组件\n└── layout.vue        # 根路由下所有页面共用的布局组件\n```\n编译后会得到以下路由配置：\n```js\n[\n    {\n        \"path\": \"/\",\n        \"component\": require('@/pages/layout').default,\n        \"count\": 5,\n        \"children\": [\n            {\n                \"path\": \"/a\",\n                \"component\": require('@/pages/a').default,\n                \"name\": \"a\",\n                \"meta\": {},\n                \"count\": 7\n            },\n            {\n                \"path\": \"/b\",\n                \"component\": require('@/pages/b/layout').default,\n                \"count\": 7,\n                \"children\": [\n                    {\n                        \"path\": \"/b/c\",\n                        \"component\": require('@/pages/b/c').default,\n                        \"name\": \"b_c\",\n                        \"meta\": {},\n                        \"count\": 14\n                    },\n                    {\n                        \"path\": \"/b/:id\",\n                        \"component\": require('@/pages/b/@id').default,\n                        \"name\": \"b__id\",\n                        \"meta\": {},\n                        \"count\": 13\n                    },\n                    {\n                        \"path\": \"/b\",\n                        \"component\": require('@/pages/b/index').default,\n                        \"name\": \"b_index\",\n                        \"meta\": {},\n                        \"count\": 7\n                    }\n                ]\n            },\n            {\n                \"path\": \"/\",\n                \"component\": require('@/pages/index').default,\n                \"name\": \"index\",\n                \"meta\": {},\n                \"count\": 5\n            },\n            {\n                \"path\": \"/:pathMatch(.*)\",\n                \"component\": require('@/pages/*').default,\n                \"name\": \"FUZZYMATCH\",\n                \"meta\": {},\n                \"count\": 3\n            }\n        ]\n    }\n]\n```\n\n**需要注意的是，满足以下任意规则的文件不会被注册为路由**：\n- 不是 `.vue` 文件\n- `components` 目录中的文件\n\n\n### 动态路由\nFes.js 里约定以 `@` 开头的文件或文件夹映射为动态路由。\n比如：\n\n- `src/pages/users/@id.vue` 会成为 `/users/:id`\n- `src/pages/users/@id/settings.vue` 会成为 `/users/:id/settings`\n\n### 嵌套路由\nFes.js 里约定目录下有 `layout.vue` 时会生成嵌套路由，以 `layout.vue` 为该目录的公共父组件，`layout.vue` 中必须实现 `RouterView`\n\n比如以下目录结构：\n```\npages\n└── users\n    ├── layout.vue\n    ├── index.vue\n    └── list.vue\n```\n会生成路由：\n```js\n[\n    { \n        path: '/users', component: require('@/pages/users/layout').default,\n        children: [\n            { path: '/users', component: require('@/pages/users/index').default },\n            { path: '/users/list', component: require('@/pages/users/list').default },\n        ]\n    }\n]\n```\n\n### 模糊匹配\nFes.js 下约定文件名为 `*` 的路由是模糊匹配路由，可以用此特性实现 [404 路由](https://next.router.vuejs.org/zh/guide/essentials/dynamic-matching.html#%E6%8D%95%E8%8E%B7%E6%89%80%E6%9C%89%E8%B7%AF%E7%94%B1%E6%88%96-404-not-found-%E8%B7%AF%E7%94%B1)。     \n\n比如以下目录结构：\n\n```\npages\n├── index.vue         # 根路由页面 路径为 /\n└── *.vue             # 模糊匹配 路径为 *\n```\n会生成路由：\n```js\n[\n    { \n        path: '/', component: require('@/pages/index').default, count: 5\n    },\n    {\n        path: '/:pathMatch(.*)', component: require('@/pages/**').default, count: 3\n    }\n]\n```\n这样，如果访问 `/foo`，`/` 不能匹配，会 fallback 到 `*` 路由，通过 `src/pages/*.vue` 进行渲染。\n\n### 扩展路由元信息\n我们在定义路由时可以配置`meta`字段，用来记录一些跟路由相关的信息：\n```js\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/foo',\n      component: Foo,\n      children: [\n        {\n          path: 'bar',\n          component: Bar,\n          // a meta field\n          meta: { requiresAuth: true }\n        }\n      ]\n    }\n  ]\n})\n```\n在 Fes.js 里约定在 `.vue`单文件组件中的 `config`区块 为 `meta` 配置。如果 `pages/a.vue` 中有如下配置：\n```vue\n<config>\n{\n    \"name\": \"store\",\n    \"title\": \"vuex测试\"\n}\n</config>\n```\n则编译后的路由配置为：\n```js{5-8}\n[\n    { \n        path: '/a', \n        component: require('@/pages/a').default, \n        meta: {\n            \"name\": \"store\",\n            \"title\": \"vuex测试\"\n        }\n    },\n]\n```\n\n### 智能路由\n可以看到，编译后路由都会有 `count` 属性，这是我们根据精准匹配优先算法原则设计出路由排名算法，对匹配到的路由打分：\n- 路由的路径每个子项得到4分\n- 子项为静态细分(`/list`)再加3分\n- 子项为动态细分（`/:orderId`）再加2分\n- 根段(`/`)再1分\n- 通配符(`*`)匹配到的减去1分\n\n当我们跳转路由时，如果 URL 匹配到多个路由，则选择分数最高的路由。\n\n## 路由跳转\n想学习更多，可以查看 [Vue Router 官方文档](https://next.router.vuejs.org/zh/guide/essentials/navigation.html#%E6%9B%BF%E6%8D%A2%E5%BD%93%E5%89%8D%E4%BD%8D%E7%BD%AE)。\n\n### 声明式\n```vue\n<template>\n    <router-link to=\"/home\">Home</router-link>\n</template>\n```\n\n### 命令式\n页面跳转 API 由 `router` 实例提供，查看 [Vue Rouer 文档](https://next.router.vuejs.org/zh/api/#router-%E6%96%B9%E6%B3%95)了解更多。\n\n```js\nimport { useRouter } from '@fesjs/fes';\n\nexport default {\n    setup(){\n        const router = useRouter();\n        // 这三种形式是等价的\n        router.push('/users/posva#bio')\n        router.push({ path: '/users/posva', hash: '#bio' })\n        router.push({ name: 'users', params: { username: 'posva' }, hash: '#bio' })\n        // 只改变 hash\n        router.push({ hash: '#bio' })\n        // 只改变 query\n        router.push({ query: { page: '2' } })\n        // 只改变 param\n        router.push({ params: { username: 'jolyne' } })\n\n        // 跳转到上一个路由\n        router.goBack();\n\n  "},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/guide/route.md","start":{"line":3,"column":1,"position":2},"end":{"line":261,"column":4,"position":791},"range":[2,6104],"fragment":"路由\n\n像 Vue 、React 这类框架是用组件化搭建页面，路由解决的是路径到组件的匹配问题。Fes.js 基于 `Vue Router` 实现的路由，想了解更多的同学可以看看[官方文档](https://next.router.vuejs.org/)。\n\n## 路由配置\n\n在配置文件 `.fes.js`中通过 `router` 进行配置。\n```js\nexport default {\n    router: {\n        routes: [],\n        mode: 'hash'\n    }\n}\n```\n\n### routes\n`routes` 是配置添加到路由的初始路由列表，格式为路由信息的数组。具体使用参考 [Vue Router 文档](https://next.router.vuejs.org/zh/guide/) 中关于路由配置、路由匹配相关内容。\n\n\n### mode \n创建历史记录的类型：\n- **history**，对应 [createWebHistory](https://next.router.vuejs.org/zh/api/#createwebhistory)\n- **hash**，对应 [createWebHashHistory](https://next.router.vuejs.org/zh/api/#createWebHashHistory)\n- **memory**，对应 [createMemoryHistory](https://next.router.vuejs.org/zh/api/#createWebHashHistory)\n\n默认是`hash`模式。\n\n## 约定式路由\n约定式路由也叫文件路由，就是不需要手写配置，文件系统即路由，通过目录和文件及其命名分析出路由配置。      \n\n### 约定规范\n比如以下文件结构：\n```\npages\n├── index.vue         # 根路由页面 路径为 /\n├── *.vue             # 模糊匹配 路径为 *\n├── a.vue             # 路径 /a\n├── b                 # 文件夹b\n│   ├── index.vue     # 路径 /b\n│   ├── @id.vue       # 动态路由 /b/:id\n│   ├── c.vue         # 路径 /b/c\n│   └── layout.vue    # /b 路径下所有页面公共的布局组件\n└── layout.vue        # 根路由下所有页面共用的布局组件\n```\n编译后会得到以下路由配置：\n```js\n[\n    {\n        \"path\": \"/\",\n        \"component\": require('@/pages/layout').default,\n        \"count\": 5,\n        \"children\": [\n            {\n                \"path\": \"/a\",\n                \"component\": require('@/pages/a').default,\n                \"name\": \"a\",\n                \"meta\": {},\n                \"count\": 7\n            },\n            {\n                \"path\": \"/b\",\n                \"component\": require('@/pages/b/layout').default,\n                \"count\": 7,\n                \"children\": [\n                    {\n                        \"path\": \"/b/c\",\n                        \"component\": require('@/pages/b/c').default,\n                        \"name\": \"b_c\",\n                        \"meta\": {},\n                        \"count\": 14\n                    },\n                    {\n                        \"path\": \"/b/:id\",\n                        \"component\": require('@/pages/b/@id').default,\n                        \"name\": \"b__id\",\n                        \"meta\": {},\n                        \"count\": 13\n                    },\n                    {\n                        \"path\": \"/b\",\n                        \"component\": require('@/pages/b/index').default,\n                        \"name\": \"b_index\",\n                        \"meta\": {},\n                        \"count\": 7\n                    }\n                ]\n            },\n            {\n                \"path\": \"/\",\n                \"component\": require('@/pages/index').default,\n                \"name\": \"index\",\n                \"meta\": {},\n                \"count\": 5\n            },\n            {\n                \"path\": \"/:pathMatch(.*)\",\n                \"component\": require('@/pages/*').default,\n                \"name\": \"FUZZYMATCH\",\n                \"meta\": {},\n                \"count\": 3\n            }\n        ]\n    }\n]\n```\n\n**需要注意的是，满足以下任意规则的文件不会被注册为路由**：\n- 不是 `.vue` 文件\n- `components` 目录中的文件\n\n\n### 动态路由\nFes.js 里约定以 `@` 开头的文件或文件夹映射为动态路由。\n比如：\n\n- `src/pages/users/@id.vue` 会成为 `/users/:id`\n- `src/pages/users/@id/settings.vue` 会成为 `/users/:id/settings`\n\n### 嵌套路由\nFes.js 里约定目录下有 `layout.vue` 时会生成嵌套路由，以 `layout.vue` 为该目录的公共父组件，`layout.vue` 中必须实现 `RouterView`\n\n比如以下目录结构：\n```\npages\n└── users\n    ├── layout.vue\n    ├── index.vue\n    └── list.vue\n```\n会生成路由：\n```js\n[\n    { \n        path: '/users', component: require('@/pages/users/layout').default,\n        children: [\n            { path: '/users', component: require('@/pages/users/index').default },\n            { path: '/users/list', component: require('@/pages/users/list').default },\n        ]\n    }\n]\n```\n\n### 模糊匹配\nFes.js 下约定文件名为 `*` 的路由是模糊匹配路由，可以用此特性实现 [404 路由](https://next.router.vuejs.org/zh/guide/essentials/dynamic-matching.html#%E6%8D%95%E8%8E%B7%E6%89%80%E6%9C%89%E8%B7%AF%E7%94%B1%E6%88%96-404-not-found-%E8%B7%AF%E7%94%B1)。     \n\n比如以下目录结构：\n\n```\npages\n├── index.vue         # 根路由页面 路径为 /\n└── *.vue             # 模糊匹配 路径为 *\n```\n会生成路由：\n```js\n[\n    { \n        path: '/', component: require('@/pages/index').default, count: 5\n    },\n    {\n        path: '/:pathMatch(.*)', component: require('@/pages/**').default, count: 3\n    }\n]\n```\n这样，如果访问 `/foo`，`/` 不能匹配，会 fallback 到 `*` 路由，通过 `src/pages/*.vue` 进行渲染。\n\n### 扩展路由元信息\n我们在定义路由时可以配置`meta`字段，用来记录一些跟路由相关的信息：\n```js\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/foo',\n      component: Foo,\n      children: [\n        {\n          path: 'bar',\n          component: Bar,\n          // a meta field\n          meta: { requiresAuth: true }\n        }\n      ]\n    }\n  ]\n})\n```\n在 Fes.js 里约定在 `.vue`单文件组件中的 `config`区块 为 `meta` 配置。如果 `pages/a.vue` 中有如下配置：\n```vue\n<config>\n{\n    \"name\": \"store\",\n    \"title\": \"vuex测试\"\n}\n</config>\n```\n则编译后的路由配置为：\n```js{5-8}\n[\n    { \n        path: '/a', \n        component: require('@/pages/a').default, \n        meta: {\n            \"name\": \"store\",\n            \"title\": \"vuex测试\"\n        }\n    },\n]\n```\n\n### 智能路由\n可以看到，编译后路由都会有 `count` 属性，这是我们根据精准匹配优先算法原则设计出路由排名算法，对匹配到的路由打分：\n- 路由的路径每个子项得到4分\n- 子项为静态细分(`/list`)再加3分\n- 子项为动态细分（`/:orderId`）再加2分\n- 根段(`/`)再1分\n- 通配符(`*`)匹配到的减去1分\n\n当我们跳转路由时，如果 URL 匹配到多个路由，则选择分数最高的路由。\n\n## 路由跳转\n想学习更多，可以查看 [Vue Router 官方文档](https://next.router.vuejs.org/zh/guide/essentials/navigation.html#%E6%9B%BF%E6%8D%A2%E5%BD%93%E5%89%8D%E4%BD%8D%E7%BD%AE)。\n\n### 声明式\n```vue\n<template>\n    <router-link to=\"/home\">Home</router-link>\n</template>\n```\n\n### 命令式\n页面跳转 API 由 `router` 实例提供，查看 [Vue Rouer 文档](https://next.router.vuejs.org/zh/api/#router-%E6%96%B9%E6%B3%95)了解更多。\n\n```js\nimport { useRouter } from '@fesjs/fes';\n\nexport default {\n    setup(){\n        const router = useRouter();\n        // 这三种形式是等价的\n        router.push('/users/posva#bio')\n        router.push({ path: '/users/posva', hash: '#bio' })\n        router.push({ name: 'users', params: { username: 'posva' }, hash: '#bio' })\n        // 只改变 hash\n        router.push({ hash: '#bio' })\n        // 只改变 query\n        router.push({ query: { page: '2' } })\n        // 只改变 param\n        router.push({ params: { username: 'jolyne' } })\n\n        // 跳转到上一个路由\n        router.goBack();\n\n  "}},{"format":"markdown","foundDate":1638413756808,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/guide/plugin.md","start":{"line":4,"column":1,"position":3},"end":{"line":71,"column":5,"position":269},"range":[3,1029],"fragment":"件\n\n## 插件的 id 和 key\n每个插件都会对应一个 `id` 和一个 `key`，**`id` 是路径的简写，`key` 是进一步简化后用于配置的唯一值**。\n\n比如插件 `/node_modules/@fesjs/plugin-foo/index.js`，通常来说，其 `id` 为 `@fesjs/plugin-foo`，`key` 为 `foo`。\n\n::: tip\nid 一般用不上，对于普通开发者 key 用来配置插件，而插件开发者可以使用 key 判断是否安装某个插件。 \n:::\n\n## 启动插件\n有多种方式引入插件\n\n### package.json 依赖\nFes.js 会自动检测 `dependencies` 和 `devDependencies` 里的 fes 插件，比如：\n```json\n{\n  \"dependencies\": {\n    \"@fesjs/plugin-request\": \"^2.0.0\"\n  }\n}\n```\n那么 `@fesjs/plugin-request` 会自动被注册，无需在配置里重复声明。\n\n### 配置\n在配置里可通过 `presets` 和 `plugins` 配置插件，比如：\n```js\nexport default {\n    presets: ['./preset', 'foo/presets'],\n    plugins: ['./plugin'],\n}\n```\n通常用于几种情况：\n\n1. 项目相对路径的插件\n2. 非 npm 包入口文件的插件\n\n::: warning\n请不要配置 npm 包的插件，否则会报重复注册的错误\n:::\n\n### 环境变量\n还可通过环境变量 `FES_PRESETS` 和 `FES_PLUGINS` 注册额外插件。\n\n比如：\n```bash\nFES_PRESETS=/a/b/preset.js fes dev\n```\n\n## 禁用插件\n\n通过配置插件的 `key` 为 `false`，比如：\n```js\nexport default {\n    mock: false,\n}\n```\nMock 插件的 `key` 是 `mock`，我们在配置文件中配置 `mock` 为 `false`，则会禁用 Mock 插件及其功能。\n\n## 配置插件\n\n通过插件的 `key` 来配置插件，比如：\n```js\nexport default {\n"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/guide/plugin.md","start":{"line":4,"column":1,"position":3},"end":{"line":71,"column":5,"position":269},"range":[3,1029],"fragment":"件\n\n## 插件的 id 和 key\n每个插件都会对应一个 `id` 和一个 `key`，**`id` 是路径的简写，`key` 是进一步简化后用于配置的唯一值**。\n\n比如插件 `/node_modules/@fesjs/plugin-foo/index.js`，通常来说，其 `id` 为 `@fesjs/plugin-foo`，`key` 为 `foo`。\n\n::: tip\nid 一般用不上，对于普通开发者 key 用来配置插件，而插件开发者可以使用 key 判断是否安装某个插件。 \n:::\n\n## 启动插件\n有多种方式引入插件\n\n### package.json 依赖\nFes.js 会自动检测 `dependencies` 和 `devDependencies` 里的 fes 插件，比如：\n```json\n{\n  \"dependencies\": {\n    \"@fesjs/plugin-request\": \"^2.0.0\"\n  }\n}\n```\n那么 `@fesjs/plugin-request` 会自动被注册，无需在配置里重复声明。\n\n### 配置\n在配置里可通过 `presets` 和 `plugins` 配置插件，比如：\n```js\nexport default {\n    presets: ['./preset', 'foo/presets'],\n    plugins: ['./plugin'],\n}\n```\n通常用于几种情况：\n\n1. 项目相对路径的插件\n2. 非 npm 包入口文件的插件\n\n::: warning\n请不要配置 npm 包的插件，否则会报重复注册的错误\n:::\n\n### 环境变量\n还可通过环境变量 `FES_PRESETS` 和 `FES_PLUGINS` 注册额外插件。\n\n比如：\n```bash\nFES_PRESETS=/a/b/preset.js fes dev\n```\n\n## 禁用插件\n\n通过配置插件的 `key` 为 `false`，比如：\n```js\nexport default {\n    mock: false,\n}\n```\nMock 插件的 `key` 是 `mock`，我们在配置文件中配置 `mock` 为 `false`，则会禁用 Mock 插件及其功能。\n\n## 配置插件\n\n通过插件的 `key` 来配置插件，比如：\n```js\nexport default {\n"}},{"format":"markdown","foundDate":1638413756809,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/guide/mock.md","start":{"line":3,"column":1,"position":2},"end":{"line":183,"column":4,"position":406},"range":[2,4183],"fragment":"Mock 数据\n\nMock 数据是前端开发过程中必不可少的一环，是分离前后端开发的关键链路。通过预先跟服务器端约定好的接口，模拟请求数据甚至逻辑，能够让前端开发独立自主，不会被服务端的开发所阻塞。\n\n## 约定式 Mock 文件\n\nFes.js 约定 `./mock.js` 为 mock 文件。\n\n比如：\n```\n.\n├── mock.js\n└── src\n    └── pages\n        └── index.vue\n```\n\n## 编写 Mock 文件\n\n可以参考如下 🌰：\n``` js\nexport default function ({ cgiMock, mockjs, utils }) {\n    const { Random } = mockjs;\n\n    // 测试 proxy 与 mock 用例集合\n    cgiMock('/movie/in_theaters_mock', (req, res) => {\n        res.send(JSON.stringify({\n            code: '0',\n            msg: '',\n            result: {\n                text: 'movie:  movie/in_theaters_mock ~~~~~'\n            }\n        }));\n    });\n    cgiMock('/movie/test_mock', (req, res) => {\n        res.send(JSON.stringify({\n            code: '0',\n            msg: '',\n            result: {\n                text: 'mock:  movie/test_mock'\n            }\n        }));\n    });\n\n    // 测试用例: mock.js change，重现请求，需要能拉最新的数据\n    cgiMock('/watchtest', (req, res) => {\n        res.send(JSON.stringify({\n            code: '0',\n            msg: '',\n            result: {\n                text: '通过 register 测试 mock watch: 初始状态'\n            }\n        }));\n    });\n\n    // 返回一个数字\n    // cgiMock('/number', 666);\n    cgiMock('/number', 999);\n\n    // 返回一个json\n    cgiMock({\n        url: '/json',\n        result: {\n            code: '400101', msg: \"不合法的请求:Missing cookie 'wb_app_id' for method parameter of type String\", transactionTime: '20170309171146', success: false\n        }\n    });\n\n    // 利用 mock.js 产生随机文本\n    cgiMock('/text', Random.cparagraph());\n\n    // 返回一个字符串 利用 mock.js 产生随机字符\n    cgiMock('/random', mockjs.mock({\n        'string|1-10': '★'\n    }));\n\n    // 正则匹配url, 返回一个字符串\n    cgiMock(/\\/abc|\\/xyz/, 'regexp test!');\n\n    // option.result 参数如果是一个函数, 可以实现自定义返回内容, 接收的参数是是经过 express 封装的 req 和 res 对象.\n    cgiMock(/\\/function$/, (req, res) => {\n        res.send('function test');\n    });\n\n    // 返回文本 readFileSync\n    cgiMock('/file', utils.file('./package.json'));\n\n    // 更复杂的规则配置\n    cgiMock({\n        url: /\\/who/,\n        method: 'GET',\n        result(req, res) {\n            if (req.query.name === 'kwan') {\n                res.json({ kwan: '孤独患者' });\n            } else {\n                res.send('Nooooooooooo');\n            }\n        },\n        headers: {\n            'Content-Type': 'text/plain',\n            'Content-Length': '123',\n            ETag: '12345'\n        },\n        cookies: [\n            {\n                name: 'myname', value: 'kwan', maxAge: 900000, httpOnly: true\n            }\n        ]\n    });\n\n    // 携带参数的请求\n    cgiMock('/v2/audit/list', (req, res) => {\n        const {\n            currentPage, pageSize, isAudited\n        } = req.body;\n        res.send({\n            code: '0',\n            msg: '',\n            data: {\n                currentPage,\n                pageSize,\n                totalPage: 2,\n                totalCount: 12,\n                pageData: Array.from({ length: pageSize }, () => ({\n                    title: Random.title(),\n                    authorName: Random.cname(),\n                    authorId: Random.name(),\n                    createTime: Date.now(),\n                    updateTime: Date.now(),\n                    readCount: Random.integer(60, 1000),\n                    favoriteCount: Random.integer(1, 50),\n                    postId: '12323',\n                    serviceTag: '业务类型',\n                    productTag: '产品类型',\n                    requestTag: '需求类型',\n                    handleTag: '已采纳',\n                    postType: 'voice',\n                    postStatus: isAudited ? 'pass' : 'auditing',\n                    auditStatus: 'audit1'\n                }))\n            }\n        });\n    });\n\n    // multipart/form-data 类型\n    cgiMock('/v2/upload', (req, res) => {\n        res.send({\n            code: '0',\n            msg: '文件上传成功'\n        });\n    });\n};\n```\n\n### cgiMock \b参数\n创建一个 mock 接口，参数非常灵活，参考上面的 demo 即可。\n\n\n### mockjs 参数\n[Mock.js](http://mockjs.com/) 是常用的辅助生成模拟数据的三方库，借助他可以提升我们的 mock 数据能力。\n\n比如：\n```js\nexport default function ({ cgiMock, mockjs, utils }) {\n    cgiMock('/random', mockjs.mock({\n        'string|1-10': '★'\n    }));\n}\n```\n\n### utils 参数\n工具函数：\n- utils.file(path)，从项目根目录根据path寻找文件，返回文件流。\n\n## 配置 Mock\n详见配置 [mock]("},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/guide/mock.md","start":{"line":3,"column":1,"position":2},"end":{"line":183,"column":4,"position":406},"range":[2,4183],"fragment":"Mock 数据\n\nMock 数据是前端开发过程中必不可少的一环，是分离前后端开发的关键链路。通过预先跟服务器端约定好的接口，模拟请求数据甚至逻辑，能够让前端开发独立自主，不会被服务端的开发所阻塞。\n\n## 约定式 Mock 文件\n\nFes.js 约定 `./mock.js` 为 mock 文件。\n\n比如：\n```\n.\n├── mock.js\n└── src\n    └── pages\n        └── index.vue\n```\n\n## 编写 Mock 文件\n\n可以参考如下 🌰：\n``` js\nexport default function ({ cgiMock, mockjs, utils }) {\n    const { Random } = mockjs;\n\n    // 测试 proxy 与 mock 用例集合\n    cgiMock('/movie/in_theaters_mock', (req, res) => {\n        res.send(JSON.stringify({\n            code: '0',\n            msg: '',\n            result: {\n                text: 'movie:  movie/in_theaters_mock ~~~~~'\n            }\n        }));\n    });\n    cgiMock('/movie/test_mock', (req, res) => {\n        res.send(JSON.stringify({\n            code: '0',\n            msg: '',\n            result: {\n                text: 'mock:  movie/test_mock'\n            }\n        }));\n    });\n\n    // 测试用例: mock.js change，重现请求，需要能拉最新的数据\n    cgiMock('/watchtest', (req, res) => {\n        res.send(JSON.stringify({\n            code: '0',\n            msg: '',\n            result: {\n                text: '通过 register 测试 mock watch: 初始状态'\n            }\n        }));\n    });\n\n    // 返回一个数字\n    // cgiMock('/number', 666);\n    cgiMock('/number', 999);\n\n    // 返回一个json\n    cgiMock({\n        url: '/json',\n        result: {\n            code: '400101', msg: \"不合法的请求:Missing cookie 'wb_app_id' for method parameter of type String\", transactionTime: '20170309171146', success: false\n        }\n    });\n\n    // 利用 mock.js 产生随机文本\n    cgiMock('/text', Random.cparagraph());\n\n    // 返回一个字符串 利用 mock.js 产生随机字符\n    cgiMock('/random', mockjs.mock({\n        'string|1-10': '★'\n    }));\n\n    // 正则匹配url, 返回一个字符串\n    cgiMock(/\\/abc|\\/xyz/, 'regexp test!');\n\n    // option.result 参数如果是一个函数, 可以实现自定义返回内容, 接收的参数是是经过 express 封装的 req 和 res 对象.\n    cgiMock(/\\/function$/, (req, res) => {\n        res.send('function test');\n    });\n\n    // 返回文本 readFileSync\n    cgiMock('/file', utils.file('./package.json'));\n\n    // 更复杂的规则配置\n    cgiMock({\n        url: /\\/who/,\n        method: 'GET',\n        result(req, res) {\n            if (req.query.name === 'kwan') {\n                res.json({ kwan: '孤独患者' });\n            } else {\n                res.send('Nooooooooooo');\n            }\n        },\n        headers: {\n            'Content-Type': 'text/plain',\n            'Content-Length': '123',\n            ETag: '12345'\n        },\n        cookies: [\n            {\n                name: 'myname', value: 'kwan', maxAge: 900000, httpOnly: true\n            }\n        ]\n    });\n\n    // 携带参数的请求\n    cgiMock('/v2/audit/list', (req, res) => {\n        const {\n            currentPage, pageSize, isAudited\n        } = req.body;\n        res.send({\n            code: '0',\n            msg: '',\n            data: {\n                currentPage,\n                pageSize,\n                totalPage: 2,\n                totalCount: 12,\n                pageData: Array.from({ length: pageSize }, () => ({\n                    title: Random.title(),\n                    authorName: Random.cname(),\n                    authorId: Random.name(),\n                    createTime: Date.now(),\n                    updateTime: Date.now(),\n                    readCount: Random.integer(60, 1000),\n                    favoriteCount: Random.integer(1, 50),\n                    postId: '12323',\n                    serviceTag: '业务类型',\n                    productTag: '产品类型',\n                    requestTag: '需求类型',\n                    handleTag: '已采纳',\n                    postType: 'voice',\n                    postStatus: isAudited ? 'pass' : 'auditing',\n                    auditStatus: 'audit1'\n                }))\n            }\n        });\n    });\n\n    // multipart/form-data 类型\n    cgiMock('/v2/upload', (req, res) => {\n        res.send({\n            code: '0',\n            msg: '文件上传成功'\n        });\n    });\n};\n```\n\n### cgiMock \b参数\n创建一个 mock 接口，参数非常灵活，参考上面的 demo 即可。\n\n\n### mockjs 参数\n[Mock.js](http://mockjs.com/) 是常用的辅助生成模拟数据的三方库，借助他可以提升我们的 mock 数据能力。\n\n比如：\n```js\nexport default function ({ cgiMock, mockjs, utils }) {\n    cgiMock('/random', mockjs.mock({\n        'string|1-10': '★'\n    }));\n}\n```\n\n### utils 参数\n工具函数：\n- utils.file(path)，从项目根目录根据path寻找文件，返回文件流。\n\n## 配置 Mock\n详见配置 [mock]("}},{"format":"markdown","foundDate":1638413756814,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/guide/getting-started.md","start":{"line":4,"column":1,"position":3},"end":{"line":195,"column":11,"position":742},"range":[3,2530],"fragment":"速上手\n\n## 依赖环境\n首先得有 [Node.js](https://nodejs.org/)，并确保 node 版本是 10.13 或以上。\n```bash\n# 打印 node 版本\nnode -v\nv10.13.0\n```\n推荐使用 yarn 管理 npm 依赖\n```bash\n# 全局安装 yarn\nnpm i yarn -g\n```\n\n## 创建项目\n\n这一章节会帮助你从头搭建一个简单的 Fes.js 前端应用。\n\n##### 步骤1 创建工作空间     \n如果工作空间不存在，则先创建：\n```bash\n# 创建目录 workspace\nmkdir workspace\n# 进入目录 workspace\ncd workspace\n```\n如果工作空间已存在，则直接进入\n```bash\n# 进入目录 workspace\ncd workspace\n```\n\n##### 步骤2 在工作空间创建项目\n<CodeGroup>\n  <CodeGroupItem title=\"YARN\" active>\n\n```bash\n# 创建模板\nyarn create @fesjs/fes-app myapp\n```\n\n  </CodeGroupItem>\n\n  <CodeGroupItem title=\"NPM\">\n\n```bash\n# 创建模板\nnpx @fesjs/create-fes-app myapp\n```\n\n  </CodeGroupItem>\n</CodeGroup>\n\n\n如果项目文件夹 `workspace/myapp` 已经存在，会提示目录已存在：\n\n<img :src=\"$withBase('pickTemplateTip.png')\" alt=\"目录已存在提示\">\n\n你可以选择：\n- `Overwrite` 删除项目文件夹，重新创建项目。\n- `Merge` 保留原项目文件夹，存在相同文件则用模板文件覆盖当前目录文件。      \n\n当选择 `Overwrite` 或者 `Merge` 或者项目目录 `workspace/myapp` 不存在，会提示选取一个 `template`：\n<img :src=\"$withBase('pickTemplate.png')\" alt=\"选择模板类型\">\n\n你可以选默认适用于中后台前端应用的 `PC` 类型，也可以选适用于移动端的 `H5` 类型。      \n\n\n##### 步骤3 安装依赖\n<CodeGroup>\n  <CodeGroupItem title=\"YARN\" active>\n\n```bash\n# 进入项目目录\ncd myapp\n# 安装依赖\nyarn \n```\n\n  </CodeGroupItem>\n\n  <CodeGroupItem title=\"NPM\">\n\n```bash\n# 进入项目目录\ncd myapp\n# 安装依赖\nnpm i \n```\n\n  </CodeGroupItem>\n</CodeGroup>\n\n##  启动项目\n<CodeGroup>\n  <CodeGroupItem title=\"YARN\" active>\n\n```bash\n# 开发调试\nyarn dev\n\nyarn run v1.22.4\n$ fes dev\nStarting the development server http://localhost:8080 ...\n\n✔ Webpack\n  Compiled successfully in 15.91s\n\n DONE  Compiled successfully in 15917ms                               11:17:08 AM\n```\n\n  </CodeGroupItem>\n\n  <CodeGroupItem title=\"NPM\">\n\n```bash\n# 开发调试\nnpm run dev\n\n> fes dev\nStarting the development server http://localhost:8080 ...\n\n✔ Webpack\n  Compiled successfully in 3.66s\n\n DONE  Compiled successfully in 3662ms                                11:17:46 AM\n```\n\n  </CodeGroupItem>\n</CodeGroup>\n\n\nFes.js 会在 [http://localhost:8080](http://localhost:8080) 启动一个热重载的开发服务器。当你修改你的 .vue 文件时，浏览器中的内容也会自动更新。\n\n\n<img :src=\"$withBase('home.png')\" alt=\"home\">\n\n## 部署发布\n\n### 构建\n<CodeGroup>\n  <CodeGroupItem title=\"YARN\" active>\n\n```bash\n# 构建\nyarn build\n\nyarn run v1.22.4\n$ fes build\n\n✔ Webpack\n  Compiled successfully in 45.37s\n\n✨  Done in 48.87s.\n```\n\n  </CodeGroupItem>\n\n  <CodeGroupItem title=\"NPM\">\n\n```bash\n# 构建\nnpm run build\n\n> fes build\n\n✔ Webpack\n  Compiled successfully in 45.37s\n```\n\n  </CodeGroupItem>\n</CodeGroup>\n\n构建产物默认生成到 ./dist 下，然后通过 tree 命令查看。\n```base\ntree ./dist\n\ndist\n├── chunk-vendors.27cd4686.js\n├── chunk-vendors.a5f5de67.css\n├── index."},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/guide/getting-started.md","start":{"line":4,"column":1,"position":3},"end":{"line":195,"column":11,"position":742},"range":[3,2530],"fragment":"速上手\n\n## 依赖环境\n首先得有 [Node.js](https://nodejs.org/)，并确保 node 版本是 10.13 或以上。\n```bash\n# 打印 node 版本\nnode -v\nv10.13.0\n```\n推荐使用 yarn 管理 npm 依赖\n```bash\n# 全局安装 yarn\nnpm i yarn -g\n```\n\n## 创建项目\n\n这一章节会帮助你从头搭建一个简单的 Fes.js 前端应用。\n\n##### 步骤1 创建工作空间     \n如果工作空间不存在，则先创建：\n```bash\n# 创建目录 workspace\nmkdir workspace\n# 进入目录 workspace\ncd workspace\n```\n如果工作空间已存在，则直接进入\n```bash\n# 进入目录 workspace\ncd workspace\n```\n\n##### 步骤2 在工作空间创建项目\n<CodeGroup>\n  <CodeGroupItem title=\"YARN\" active>\n\n```bash\n# 创建模板\nyarn create @fesjs/fes-app myapp\n```\n\n  </CodeGroupItem>\n\n  <CodeGroupItem title=\"NPM\">\n\n```bash\n# 创建模板\nnpx @fesjs/create-fes-app myapp\n```\n\n  </CodeGroupItem>\n</CodeGroup>\n\n\n如果项目文件夹 `workspace/myapp` 已经存在，会提示目录已存在：\n\n<img :src=\"$withBase('pickTemplateTip.png')\" alt=\"目录已存在提示\">\n\n你可以选择：\n- `Overwrite` 删除项目文件夹，重新创建项目。\n- `Merge` 保留原项目文件夹，存在相同文件则用模板文件覆盖当前目录文件。      \n\n当选择 `Overwrite` 或者 `Merge` 或者项目目录 `workspace/myapp` 不存在，会提示选取一个 `template`：\n<img :src=\"$withBase('pickTemplate.png')\" alt=\"选择模板类型\">\n\n你可以选默认适用于中后台前端应用的 `PC` 类型，也可以选适用于移动端的 `H5` 类型。      \n\n\n##### 步骤3 安装依赖\n<CodeGroup>\n  <CodeGroupItem title=\"YARN\" active>\n\n```bash\n# 进入项目目录\ncd myapp\n# 安装依赖\nyarn \n```\n\n  </CodeGroupItem>\n\n  <CodeGroupItem title=\"NPM\">\n\n```bash\n# 进入项目目录\ncd myapp\n# 安装依赖\nnpm i \n```\n\n  </CodeGroupItem>\n</CodeGroup>\n\n##  启动项目\n<CodeGroup>\n  <CodeGroupItem title=\"YARN\" active>\n\n```bash\n# 开发调试\nyarn dev\n\nyarn run v1.22.4\n$ fes dev\nStarting the development server http://localhost:8080 ...\n\n✔ Webpack\n  Compiled successfully in 15.91s\n\n DONE  Compiled successfully in 15917ms                               11:17:08 AM\n```\n\n  </CodeGroupItem>\n\n  <CodeGroupItem title=\"NPM\">\n\n```bash\n# 开发调试\nnpm run dev\n\n> fes dev\nStarting the development server http://localhost:8080 ...\n\n✔ Webpack\n  Compiled successfully in 3.66s\n\n DONE  Compiled successfully in 3662ms                                11:17:46 AM\n```\n\n  </CodeGroupItem>\n</CodeGroup>\n\n\nFes.js 会在 [http://localhost:8080](http://localhost:8080) 启动一个热重载的开发服务器。当你修改你的 .vue 文件时，浏览器中的内容也会自动更新。\n\n\n<img :src=\"$withBase('home.png')\" alt=\"home\">\n\n## 部署发布\n\n### 构建\n<CodeGroup>\n  <CodeGroupItem title=\"YARN\" active>\n\n```bash\n# 构建\nyarn build\n\nyarn run v1.22.4\n$ fes build\n\n✔ Webpack\n  Compiled successfully in 45.37s\n\n✨  Done in 48.87s.\n```\n\n  </CodeGroupItem>\n\n  <CodeGroupItem title=\"NPM\">\n\n```bash\n# 构建\nnpm run build\n\n> fes build\n\n✔ Webpack\n  Compiled successfully in 45.37s\n```\n\n  </CodeGroupItem>\n</CodeGroup>\n\n构建产物默认生成到 ./dist 下，然后通过 tree 命令查看。\n```base\ntree ./dist\n\ndist\n├── chunk-vendors.27cd4686.js\n├── chunk-vendors.a5f5de67.css\n├── index."}},{"format":"markdown","foundDate":1638413756817,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/guide/env.md","start":{"line":2,"column":1,"position":1},"end":{"line":121,"column":7,"position":394},"range":[1,1327],"fragment":" 环境变量\n在构建或者代码在端上运行中需要一些跟区分于环境的变量，用于配置构建流程或者运行时过程，这时候我们可以配置环境变量。\n\n\n## 设置环境变量\n\n### 执行命令时添加\n比如：\n```bash\n# OS X, Linux\nPORT=3000 fes dev\n\n# Windows (cmd.exe)\nset PORT=3000 && fes dev\n```\n如果要同时考虑 OS X 和 Windows，可借助三方工具 [cross-env](https://github.com/kentcdodds/cross-env)\n<CodeGroup>\n  <CodeGroupItem title=\"YARN\" active>\n\n```bash\nyarn add cross-env --dev\ncross-env PORT=3000 fes dev\n```\n\n  </CodeGroupItem>\n  <CodeGroupItem title=\"NPM\">\n\n```bash\nnpm i cross-env --save-dev\ncross-env PORT=3000 fes dev\n```\n\n  </CodeGroupItem>\n</CodeGroup>\n\n### 在 .env 文件中定义\nFes.js 中约定根目录下以 `.env` 开头的文件为环境变量配置文件。\n\n比如：\n```bash\nPORT=3000\n```\n然后执行\n```bash\nfes dev\n```\n会以 3000 端口启动 dev server。\n\n#### 本地临时配置\n可以新建 `.env.local`，这份配置会和 `.env` 做 `merge` 后形成最终配置。\n\n#### 多环境多份配置\n可以通过环境变量 `FES_ENV` 区分不同环境来指定配置，这时候必须在执行命令前添加 `FES_ENV` 保证执行加载环境变量配置文件逻辑前 `FES_ENV` 已设置。\n\n举个 🌰 ：\n```bash\nFES_ENV=sit fes dev\n```\n如果存在 `.env.sit` 文件，则会将 `.env.sit` 的配置和 `.env` 做 `merge` 后形成最终配置。\n\n#### 配置优先级\n\n临时配置 > 环境配置 > .env\n\n::: tip\n如果两份配置中存在相同的项，则优先级高的会覆盖优先级低的。\n::: \n\n## 运行时环境变量\n运行时环境变量需要以 `FES_APP_` 开头，比如在 `.env` 中配置：\n```\nFES_APP_KEY=11111\n```\n在代码中使用：\n```js\nconsole.log(process.env.FES_APP_KEY)\n// 输出 11111\n```\n\n## 编译时环境变量列表\n\n### FES_ENV\n指定当前的环境，不同环境各自的配置文件。\n\n### FES_PRESETS\n添加额外的插件集入口\n\n### FES_PLUGINS\n添加额外的插件入口\n\n### PORT\n`fes dev` 时服务指定的端口号，默认是 `8080`\n\n### HOST\n默认是 `local"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/guide/env.md","start":{"line":2,"column":1,"position":1},"end":{"line":121,"column":7,"position":394},"range":[1,1327],"fragment":" 环境变量\n在构建或者代码在端上运行中需要一些跟区分于环境的变量，用于配置构建流程或者运行时过程，这时候我们可以配置环境变量。\n\n\n## 设置环境变量\n\n### 执行命令时添加\n比如：\n```bash\n# OS X, Linux\nPORT=3000 fes dev\n\n# Windows (cmd.exe)\nset PORT=3000 && fes dev\n```\n如果要同时考虑 OS X 和 Windows，可借助三方工具 [cross-env](https://github.com/kentcdodds/cross-env)\n<CodeGroup>\n  <CodeGroupItem title=\"YARN\" active>\n\n```bash\nyarn add cross-env --dev\ncross-env PORT=3000 fes dev\n```\n\n  </CodeGroupItem>\n  <CodeGroupItem title=\"NPM\">\n\n```bash\nnpm i cross-env --save-dev\ncross-env PORT=3000 fes dev\n```\n\n  </CodeGroupItem>\n</CodeGroup>\n\n### 在 .env 文件中定义\nFes.js 中约定根目录下以 `.env` 开头的文件为环境变量配置文件。\n\n比如：\n```bash\nPORT=3000\n```\n然后执行\n```bash\nfes dev\n```\n会以 3000 端口启动 dev server。\n\n#### 本地临时配置\n可以新建 `.env.local`，这份配置会和 `.env` 做 `merge` 后形成最终配置。\n\n#### 多环境多份配置\n可以通过环境变量 `FES_ENV` 区分不同环境来指定配置，这时候必须在执行命令前添加 `FES_ENV` 保证执行加载环境变量配置文件逻辑前 `FES_ENV` 已设置。\n\n举个 🌰 ：\n```bash\nFES_ENV=sit fes dev\n```\n如果存在 `.env.sit` 文件，则会将 `.env.sit` 的配置和 `.env` 做 `merge` 后形成最终配置。\n\n#### 配置优先级\n\n临时配置 > 环境配置 > .env\n\n::: tip\n如果两份配置中存在相同的项，则优先级高的会覆盖优先级低的。\n::: \n\n## 运行时环境变量\n运行时环境变量需要以 `FES_APP_` 开头，比如在 `.env` 中配置：\n```\nFES_APP_KEY=11111\n```\n在代码中使用：\n```js\nconsole.log(process.env.FES_APP_KEY)\n// 输出 11111\n```\n\n## 编译时环境变量列表\n\n### FES_ENV\n指定当前的环境，不同环境各自的配置文件。\n\n### FES_PRESETS\n添加额外的插件集入口\n\n### FES_PLUGINS\n添加额外的插件入口\n\n### PORT\n`fes dev` 时服务指定的端口号，默认是 `8080`\n\n### HOST\n默认是 `local"}},{"format":"markdown","foundDate":1638413756818,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/guide/directory-structure.md","start":{"line":3,"column":1,"position":2},"end":{"line":70,"column":31,"position":213},"range":[2,951],"fragment":"目录结构\n\n在[快速上手](./getting-started.html)中，大家对框架应该有初步的印象，接下来我们了解下目录结构。Fes.js 遵循 `约定优于配置` 的原则，一个基础的 Fes.js 项目大致是这样的：\n```\nfes-template\n├── package.json\n├── tsconfig.json\n├── mock.js\n├── .fes.js\n├── .env\n├── dist\n├── public\n│   └── index.html\n└── src\n    ├── .fes\n    └── pages\n    │    └── index.vue\n    └── app.js\n```\n\n### 根目录\n\n#### package.json\n包含插件和插件集，以 `@fesjs/preset-`、`@fesjs/plugin-`、`@webank/fes-preset-`、`@webank/fes-plugin-`、`fes-preset-` 和 `fes-plugin-` 开头的依赖会被自动注册为插件或插件集。\n\n#### tsconfig.json\n解决 `@fesjs/fes` 和使用 `@` 的 API 提示\n\n#### .fes.js\n配置文件，包含 Fes.js 内置功能和插件的配置。\n\n#### .env\n定义环境变量。\n\n比如 `.env` 文件内容如下：\n```\nPORT=8888\nFES_ENV=prod\n```\n等同于 node 端运行时，设置如下：\n```\nprocess.env.PORT = '8888';\nprocess.env.FES_ENV = 'prod';\n```\n\n#### mock.js\nmock 数据的配置文件。\n\n### dist 目录\n执行 `fes build` 后，产物默认会存放在这里。\n\n### public 目录\n此目录下所有文件会被 `copy` 到输出路径。\n\n#### index.html\n默认的 `html` 模板文件，\b如果删除此 `html` 则会使用内置的 `html` 模板文件。\n\n### src 目录\n\n#### .fes 目录\n临时文件目录，比如入口文件、路由等"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/guide/directory-structure.md","start":{"line":3,"column":1,"position":2},"end":{"line":70,"column":31,"position":213},"range":[2,951],"fragment":"目录结构\n\n在[快速上手](./getting-started.html)中，大家对框架应该有初步的印象，接下来我们了解下目录结构。Fes.js 遵循 `约定优于配置` 的原则，一个基础的 Fes.js 项目大致是这样的：\n```\nfes-template\n├── package.json\n├── tsconfig.json\n├── mock.js\n├── .fes.js\n├── .env\n├── dist\n├── public\n│   └── index.html\n└── src\n    ├── .fes\n    └── pages\n    │    └── index.vue\n    └── app.js\n```\n\n### 根目录\n\n#### package.json\n包含插件和插件集，以 `@fesjs/preset-`、`@fesjs/plugin-`、`@webank/fes-preset-`、`@webank/fes-plugin-`、`fes-preset-` 和 `fes-plugin-` 开头的依赖会被自动注册为插件或插件集。\n\n#### tsconfig.json\n解决 `@fesjs/fes` 和使用 `@` 的 API 提示\n\n#### .fes.js\n配置文件，包含 Fes.js 内置功能和插件的配置。\n\n#### .env\n定义环境变量。\n\n比如 `.env` 文件内容如下：\n```\nPORT=8888\nFES_ENV=prod\n```\n等同于 node 端运行时，设置如下：\n```\nprocess.env.PORT = '8888';\nprocess.env.FES_ENV = 'prod';\n```\n\n#### mock.js\nmock 数据的配置文件。\n\n### dist 目录\n执行 `fes build` 后，产物默认会存放在这里。\n\n### public 目录\n此目录下所有文件会被 `copy` 到输出路径。\n\n#### index.html\n默认的 `html` 模板文件，\b如果删除此 `html` 则会使用内置的 `html` 模板文件。\n\n### src 目录\n\n#### .fes 目录\n临时文件目录，比如入口文件、路由等"}},{"format":"markdown","foundDate":1638413756819,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/guide/css.md","start":{"line":3,"column":1,"position":2},"end":{"line":41,"column":9,"position":142},"range":[2,631],"fragment":"样式\n\n:::tip\n本文档以 css 为示例，把后缀换成 `.less` 同样适用。\n:::\n\n## 全局样式\nFes.js 中约定 `src/global.css` 为全局样式，如果存在此文件，会被自动引入到入口文件最前面。\n\n比如用于覆盖样式，\n```css\n.layout-content {\n  max-width: 1000px;\n}\n```\n\n## Vue单文件\n```vue\n<style>\n.layout-content {\n  max-width: 1000px;\n}\n</style>\n```\n\n## CSS Modules\n支持 `Vue` 的 [CSS Modules](https://vue-loader.vuejs.org/zh/guide/css-modules.html#%E7%94%A8%E6%B3%95) 用法，可以直接使用：\n```vue\n<style module>\n.layout-content {\n  max-width: 1000px;\n}\n```\n如果想直接引入CSS文件的话，则CSS文件名需要包含`.module`，比如：\n```js\nimport style from '@/styles/index.module.css'\nconsole.log(style)\n```\n\n## CSS 预处理器\nFes.js 内置支持 `less`，不支持 `sass` 和 `stylus`，但如果有需求，可"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/guide/css.md","start":{"line":3,"column":1,"position":2},"end":{"line":41,"column":9,"position":142},"range":[2,631],"fragment":"样式\n\n:::tip\n本文档以 css 为示例，把后缀换成 `.less` 同样适用。\n:::\n\n## 全局样式\nFes.js 中约定 `src/global.css` 为全局样式，如果存在此文件，会被自动引入到入口文件最前面。\n\n比如用于覆盖样式，\n```css\n.layout-content {\n  max-width: 1000px;\n}\n```\n\n## Vue单文件\n```vue\n<style>\n.layout-content {\n  max-width: 1000px;\n}\n</style>\n```\n\n## CSS Modules\n支持 `Vue` 的 [CSS Modules](https://vue-loader.vuejs.org/zh/guide/css-modules.html#%E7%94%A8%E6%B3%95) 用法，可以直接使用：\n```vue\n<style module>\n.layout-content {\n  max-width: 1000px;\n}\n```\n如果想直接引入CSS文件的话，则CSS文件名需要包含`.module`，比如：\n```js\nimport style from '@/styles/index.module.css'\nconsole.log(style)\n```\n\n## CSS 预处理器\nFes.js 内置支持 `less`，不支持 `sass` 和 `stylus`，但如果有需求，可"}},{"format":"markdown","foundDate":1638413756820,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/guide/contributing.md","start":{"line":5,"column":1,"position":4},"end":{"line":70,"column":11,"position":263},"range":[4,1541],"fragment":"指南\n\n## 概览\n\n项目仓库借助于 [Yarn Classic 工作区](https://classic.yarnpkg.com/zh-Hans/docs/workspaces) 来实现 [Monorepo](https://en.wikipedia.org/wiki/Monorepo) ，在 `packages` 目录下存放了多个互相关联的独立 Package 。\n\n- `@fesjs/create-fes-app`: 创建项目模板模块。提供`create-fes-app`命令，提供创建多种类型项目模板的能力。\n  \n- `@fesjs/fes`: 入口模块。提供`fes`命令和 API 入口。 \n\n- `@fesjs/compiler`: 编译时插件管理模块。定义插件的生命周期、插件配置、插件通讯机制等。\n\n- `@fesjs/runtime`: 运行时插件模块。集成了vue-router，定义运行时插件生命周期、插件通讯机制。\n\n- `@fesjs/preset-build-in`: 内置插件集。包含`dev`、`build`等命令，集成webpack5+babel，提供方便编写插件的API，入口文件处理，路由处理等能力。\n\n- `@fesjs/fes-template`: 适用于PC类型的模板项目。\n\n- `@fesjs/fes-template-h5`: 适用于H5类型的模板项目。\n\n- `@fesjs/plugin-${name}`: 官方插件。\n\n- `@fesjs/fes`: 是 `@fesjs/compiler` + `@fesjs/runtime` + `@fesjs/preset-build-in` 的封装。用户只需要安装此依赖和额外的插件或者插件集。\n\n## 开发配置\n\n开发要求：\n\n- [Node.js](http://nodejs.org) **version 12+**\n- [Yarn v1 classic](https://classic.yarnpkg.com/zh-Hans/docs/install)\n\n克隆代码仓库，并安装依赖：\n\n```bash\nyarn\n```\n\n监听源文件修改：\n\n```bash\nyarn build\n```\n\n打开另一个终端，开始开发项目文档网站：\n\n```bash\nyarn docs:dev\n```\n\n本项目开发使用的一些主要工具：\n\n- [Jest](https://jestjs.io/) 用于单元测试\n- [ESLint](https://eslint.org/) + [Prettier](https://prettier.io/) 用于代码检查和格式化\n- [@umi/father](https://github.com/umijs/father) 用于将ES6语法编译成ES5或者CommonJS\n\n## 开发脚本\n\n### `yarn build`\n\n`build` 命令会使用 `father-build` 将 ES6 编译为 CommonJS。\n\n本项目在编写Node端的代码时也用ES6，所以你在克隆代码仓库后，可能需要先执行该命令来确保项目代码可以顺利运行，因为编译后的 JS 文件被 `.gitignore` 排除在仓库以外了。\n### `yarn docs:dev`\n`docs:` 前缀表明，这些命令是针对文档 (documentation) 进行操作的，即 `docs` 目录。      \n使用 Vue Press在本地启动文档网站服务器，用于实时查看文档效果。\n\n### 调试功能\n在开发完插件代码后，需要在template项目中验证功能"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/guide/contributing.md","start":{"line":5,"column":1,"position":4},"end":{"line":70,"column":11,"position":263},"range":[4,1541],"fragment":"指南\n\n## 概览\n\n项目仓库借助于 [Yarn Classic 工作区](https://classic.yarnpkg.com/zh-Hans/docs/workspaces) 来实现 [Monorepo](https://en.wikipedia.org/wiki/Monorepo) ，在 `packages` 目录下存放了多个互相关联的独立 Package 。\n\n- `@fesjs/create-fes-app`: 创建项目模板模块。提供`create-fes-app`命令，提供创建多种类型项目模板的能力。\n  \n- `@fesjs/fes`: 入口模块。提供`fes`命令和 API 入口。 \n\n- `@fesjs/compiler`: 编译时插件管理模块。定义插件的生命周期、插件配置、插件通讯机制等。\n\n- `@fesjs/runtime`: 运行时插件模块。集成了vue-router，定义运行时插件生命周期、插件通讯机制。\n\n- `@fesjs/preset-build-in`: 内置插件集。包含`dev`、`build`等命令，集成webpack5+babel，提供方便编写插件的API，入口文件处理，路由处理等能力。\n\n- `@fesjs/fes-template`: 适用于PC类型的模板项目。\n\n- `@fesjs/fes-template-h5`: 适用于H5类型的模板项目。\n\n- `@fesjs/plugin-${name}`: 官方插件。\n\n- `@fesjs/fes`: 是 `@fesjs/compiler` + `@fesjs/runtime` + `@fesjs/preset-build-in` 的封装。用户只需要安装此依赖和额外的插件或者插件集。\n\n## 开发配置\n\n开发要求：\n\n- [Node.js](http://nodejs.org) **version 12+**\n- [Yarn v1 classic](https://classic.yarnpkg.com/zh-Hans/docs/install)\n\n克隆代码仓库，并安装依赖：\n\n```bash\nyarn\n```\n\n监听源文件修改：\n\n```bash\nyarn build\n```\n\n打开另一个终端，开始开发项目文档网站：\n\n```bash\nyarn docs:dev\n```\n\n本项目开发使用的一些主要工具：\n\n- [Jest](https://jestjs.io/) 用于单元测试\n- [ESLint](https://eslint.org/) + [Prettier](https://prettier.io/) 用于代码检查和格式化\n- [@umi/father](https://github.com/umijs/father) 用于将ES6语法编译成ES5或者CommonJS\n\n## 开发脚本\n\n### `yarn build`\n\n`build` 命令会使用 `father-build` 将 ES6 编译为 CommonJS。\n\n本项目在编写Node端的代码时也用ES6，所以你在克隆代码仓库后，可能需要先执行该命令来确保项目代码可以顺利运行，因为编译后的 JS 文件被 `.gitignore` 排除在仓库以外了。\n### `yarn docs:dev`\n`docs:` 前缀表明，这些命令是针对文档 (documentation) 进行操作的，即 `docs` 目录。      \n使用 Vue Press在本地启动文档网站服务器，用于实时查看文档效果。\n\n### 调试功能\n在开发完插件代码后，需要在template项目中验证功能"}},{"format":"markdown","foundDate":1638413756821,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/guide/config.md","start":{"line":3,"column":1,"position":2},"end":{"line":93,"column":4,"position":281},"range":[2,1442],"fragment":"配置\n\nFes.js 约定 `.fes.js` 文件为项目基础配置文件，一份常见的配置示例如下：\n\n```js\nexport default {\n    base: '/foo/',\n    publicPath: '/',\n    devServer: {\n        port: 8080\n    }\n    mock: {\n        prefix: '/v2'\n    },\n    proxy: {\n        '/v2': {\n            'target': 'https://api.douban.com/',\n            'changeOrigin': true, \n        },\n    },\n    layout: {\n        title: \"Fes.js\",\n        footer: 'Created by MumbelFe',\n        multiTabs: false,\n        menus: [{\n            name: 'index'\n        }, {\n            name: 'onepiece'\n        }, {\n            name: 'store'\n        }, {\n            name: 'simpleList'\n        }]\n    }\n}\n```\n\n## 本地临时配置文件\n可以新建 `.fes.local.js` 作为本地临时配置文件。这份配置会和 `.fes.js` 做 `deep merge` 后形成最终配置。\n```js\n// .fes.js\nexport default { mock: false };\n\n// .fes.local.js\nexport default { \n    mock: true,\n    dvServer: { port: 8080 }\n};\n```\n最终的配置是：\n```js\n{ \n    mock: true,\n    devServer: { port: 8080 }\n};\n```\n::: warning\n`.fes.local.js` 是本地验证使用的临时配置，仅在 `fes dev` 时有效，请将其添加到 `.gitignore`，务必不要提交到 `git` 仓库中。\n:::\n\n## 多环境多份配置\n可以通过环境变量 `FES_ENV` 区分不同环境，来指定当前环境的配置文件，这份配置会和 `.fes.js` 做 `deep merge` 后形成最终配。\n\n比如配置如下：\n```js\n// .fes.js\nexport default { mock: false };\n\n// .fes.uat.js\nexport default { \n    mock: true,\n    dvServer: { port: 8080 }\n};\n```\n当我们运行：\n```bash\nFES_ENV=uat fes dev\n```\n这时候会命中 `.fes.uat.js` 这份环境配置，最终配置是：\n```js\n{ \n    mock: true,\n    devServer: { port: 8080 }\n};\n```\n\n## 优先级\n\n本地临时配置  >  环境配置  >  基础配置\n\n::: tip\n如果多份配置中存"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/guide/config.md","start":{"line":3,"column":1,"position":2},"end":{"line":93,"column":4,"position":281},"range":[2,1442],"fragment":"配置\n\nFes.js 约定 `.fes.js` 文件为项目基础配置文件，一份常见的配置示例如下：\n\n```js\nexport default {\n    base: '/foo/',\n    publicPath: '/',\n    devServer: {\n        port: 8080\n    }\n    mock: {\n        prefix: '/v2'\n    },\n    proxy: {\n        '/v2': {\n            'target': 'https://api.douban.com/',\n            'changeOrigin': true, \n        },\n    },\n    layout: {\n        title: \"Fes.js\",\n        footer: 'Created by MumbelFe',\n        multiTabs: false,\n        menus: [{\n            name: 'index'\n        }, {\n            name: 'onepiece'\n        }, {\n            name: 'store'\n        }, {\n            name: 'simpleList'\n        }]\n    }\n}\n```\n\n## 本地临时配置文件\n可以新建 `.fes.local.js` 作为本地临时配置文件。这份配置会和 `.fes.js` 做 `deep merge` 后形成最终配置。\n```js\n// .fes.js\nexport default { mock: false };\n\n// .fes.local.js\nexport default { \n    mock: true,\n    dvServer: { port: 8080 }\n};\n```\n最终的配置是：\n```js\n{ \n    mock: true,\n    devServer: { port: 8080 }\n};\n```\n::: warning\n`.fes.local.js` 是本地验证使用的临时配置，仅在 `fes dev` 时有效，请将其添加到 `.gitignore`，务必不要提交到 `git` 仓库中。\n:::\n\n## 多环境多份配置\n可以通过环境变量 `FES_ENV` 区分不同环境，来指定当前环境的配置文件，这份配置会和 `.fes.js` 做 `deep merge` 后形成最终配。\n\n比如配置如下：\n```js\n// .fes.js\nexport default { mock: false };\n\n// .fes.uat.js\nexport default { \n    mock: true,\n    dvServer: { port: 8080 }\n};\n```\n当我们运行：\n```bash\nFES_ENV=uat fes dev\n```\n这时候会命中 `.fes.uat.js` 这份环境配置，最终配置是：\n```js\n{ \n    mock: true,\n    devServer: { port: 8080 }\n};\n```\n\n## 优先级\n\n本地临时配置  >  环境配置  >  基础配置\n\n::: tip\n如果多份配置中存"}},{"format":"markdown","foundDate":1638413756822,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/guide/README.md","start":{"line":8,"column":1,"position":7},"end":{"line":76,"column":5,"position":331},"range":[7,1828],"fragment":"\n\n## 痛点\n\n在开发一个前端项目之前，我们可能需要做如下准备工作：\n- 搭建开发环境\n- 约定代码规范\n- 封装API请求\n- 配置路由\n- 实现布局、菜单、导航\n- 实现登录\n- 权限管理\n- ...\n\n除了准备工作之外，还会遇到很多相似的业务类型，比如中后台应用大多都是工作台、增删改查、权限、图表等。如果每次项目都完全手动处理一遍，不仅耗费时间，久而久之可能会存在多种技术栈、开发规范，导致开发流程不统一，历史项目越来越难维护。所以我们需要一套完整的解决方案，管理开发到部署整个流程。\n\n## Fes.js 是什么？\n\nFes.js 是一个好用的前端应用解决方案。Fes.js 以 Vue 3.0 和路由为基础，同时支持配置式路由和约定式路由，并以此进行功能扩展。配以覆盖编译时和运行时生命周期完善的插件体系，支持各种功能扩展和业务需求。     \n\n它主要具备以下特点：\n- 🚀  __快速__ ，内置了路由、开发、构建等，并且提供测试、布局、权限、国际化、状态管理、API请求、数据字典、SvgIcon等插件，可以满足大部分日常开发需求。  \n  \n- 🧨  __简单__ ，基于Vue.js 3.0，上手简单。贯彻“约定优于配置”思想，设计插件上尽可能用约定替代配置，同时提供统一的插件配置入口，简单简洁又不失灵活。提供一致性的API入口，一致化的体验，学习起来更轻松。\n\n- 💪  __健壮__ ，只需要关心页面内容，减少写BUG的机会！提供单元测试、覆盖测试能力保障项目质量。\n\n- 📦  __可扩展__ ，借鉴Umi实现了完整的生命周期和插件化机制，插件可以管理项目的编译时和运行时，能力均可以通过插件封装进来，在 Fes.js 中协调有序的运行。\n\n- 📡  __面向未来__ ，在满足需求的同时，我们也不会停止对新技术的探索。已使用Vue3.0来提升应用性能，已使用webpack5提升构建性能和实现微服务，未来会探索vite等新技术。\n\n\n## Fes.js 如何工作？\n\n### 架构\n<!-- ![架构](/framework.png \"架构\") -->\n<img :src=\"$withBase('framework.png')\" alt=\"架构\">\n\nFes.js 把大家常用的技术栈封装成一个个插件进行整理，收敛到一起，让大家只用 Fes.js 就可以完成 80% 的日常工作。\n\n### 插件和插件集\n<p>\n    <img :src=\"$withBase('plugins.png')\" alt=\"插件\" title=\"插件\" style=\"width: 500px\" class=\"medium-zoom-image\">\n</p>\nFes.js 支持插件和插件集，通过这张图应该很好理解到他们的关系，通过插件集我们把插件收敛依赖然后支持不同的业务类型。\n\n### .fes 临时文件\n.fes 临时目录是整个 Fes.js 项目的发动机，你的入口文件、路由等等都在这里，这些是由 fes 内部插件及三方插件生成的。\n\n你通常会在 .fes 下看到以下目录\n```\n+ .fes\n  + core     # 内部插件生成\n  + pluginA  # 外部插件生成\n  + presetB  # 外部插件生成\n  + fes.js   # 入口文件\n```\n\n临时文件是 Fes.js 中非常重要的一部分，框架或插件会根据你的代码生成临时文件，这些原来需要放在项目里的脏乱差的部分都被藏在了这里。\n\n你可以在这里调试代码，但不要在 .git 仓库里提交他，因为他的临时性，每次启动 fes 时都会被删除并重新生成。\n\n\n\n## 为什么不是 ...?\n\n### Vue CLI\n\nVue CLI 是基于 Vue.js 进行快速开发的完整系统，提供交互式脚手架、丰富的官方插件，并且可通过插件进行扩展，他在打包层把体验做到了极致，但是不包含路由，不是框架。所以，如果大家想基于他修改部分配置，或者希望在打包层之外也做技术收敛时，就会遇到困难。\n\n### UMI\n\nUMI 是个很好的选择，Fes.js 很多功能是借鉴 UMI 做的。UMI 是基于 React 封装的应用级框架，贯彻着函数式编程的思维。而 Vue 有所不同，虽然 Vue 3.0 向函数式迈了一大步，但大家可能依然喜欢编写 "},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/guide/README.md","start":{"line":8,"column":1,"position":7},"end":{"line":76,"column":5,"position":331},"range":[7,1828],"fragment":"\n\n## 痛点\n\n在开发一个前端项目之前，我们可能需要做如下准备工作：\n- 搭建开发环境\n- 约定代码规范\n- 封装API请求\n- 配置路由\n- 实现布局、菜单、导航\n- 实现登录\n- 权限管理\n- ...\n\n除了准备工作之外，还会遇到很多相似的业务类型，比如中后台应用大多都是工作台、增删改查、权限、图表等。如果每次项目都完全手动处理一遍，不仅耗费时间，久而久之可能会存在多种技术栈、开发规范，导致开发流程不统一，历史项目越来越难维护。所以我们需要一套完整的解决方案，管理开发到部署整个流程。\n\n## Fes.js 是什么？\n\nFes.js 是一个好用的前端应用解决方案。Fes.js 以 Vue 3.0 和路由为基础，同时支持配置式路由和约定式路由，并以此进行功能扩展。配以覆盖编译时和运行时生命周期完善的插件体系，支持各种功能扩展和业务需求。     \n\n它主要具备以下特点：\n- 🚀  __快速__ ，内置了路由、开发、构建等，并且提供测试、布局、权限、国际化、状态管理、API请求、数据字典、SvgIcon等插件，可以满足大部分日常开发需求。  \n  \n- 🧨  __简单__ ，基于Vue.js 3.0，上手简单。贯彻“约定优于配置”思想，设计插件上尽可能用约定替代配置，同时提供统一的插件配置入口，简单简洁又不失灵活。提供一致性的API入口，一致化的体验，学习起来更轻松。\n\n- 💪  __健壮__ ，只需要关心页面内容，减少写BUG的机会！提供单元测试、覆盖测试能力保障项目质量。\n\n- 📦  __可扩展__ ，借鉴Umi实现了完整的生命周期和插件化机制，插件可以管理项目的编译时和运行时，能力均可以通过插件封装进来，在 Fes.js 中协调有序的运行。\n\n- 📡  __面向未来__ ，在满足需求的同时，我们也不会停止对新技术的探索。已使用Vue3.0来提升应用性能，已使用webpack5提升构建性能和实现微服务，未来会探索vite等新技术。\n\n\n## Fes.js 如何工作？\n\n### 架构\n<!-- ![架构](/framework.png \"架构\") -->\n<img :src=\"$withBase('framework.png')\" alt=\"架构\">\n\nFes.js 把大家常用的技术栈封装成一个个插件进行整理，收敛到一起，让大家只用 Fes.js 就可以完成 80% 的日常工作。\n\n### 插件和插件集\n<p>\n    <img :src=\"$withBase('plugins.png')\" alt=\"插件\" title=\"插件\" style=\"width: 500px\" class=\"medium-zoom-image\">\n</p>\nFes.js 支持插件和插件集，通过这张图应该很好理解到他们的关系，通过插件集我们把插件收敛依赖然后支持不同的业务类型。\n\n### .fes 临时文件\n.fes 临时目录是整个 Fes.js 项目的发动机，你的入口文件、路由等等都在这里，这些是由 fes 内部插件及三方插件生成的。\n\n你通常会在 .fes 下看到以下目录\n```\n+ .fes\n  + core     # 内部插件生成\n  + pluginA  # 外部插件生成\n  + presetB  # 外部插件生成\n  + fes.js   # 入口文件\n```\n\n临时文件是 Fes.js 中非常重要的一部分，框架或插件会根据你的代码生成临时文件，这些原来需要放在项目里的脏乱差的部分都被藏在了这里。\n\n你可以在这里调试代码，但不要在 .git 仓库里提交他，因为他的临时性，每次启动 fes 时都会被删除并重新生成。\n\n\n\n## 为什么不是 ...?\n\n### Vue CLI\n\nVue CLI 是基于 Vue.js 进行快速开发的完整系统，提供交互式脚手架、丰富的官方插件，并且可通过插件进行扩展，他在打包层把体验做到了极致，但是不包含路由，不是框架。所以，如果大家想基于他修改部分配置，或者希望在打包层之外也做技术收敛时，就会遇到困难。\n\n### UMI\n\nUMI 是个很好的选择，Fes.js 很多功能是借鉴 UMI 做的。UMI 是基于 React 封装的应用级框架，贯彻着函数式编程的思维。而 Vue 有所不同，虽然 Vue 3.0 向函数式迈了一大步，但大家可能依然喜欢编写 "}},{"format":"markdown","foundDate":1638413756859,"duplicationA":{"sourceId":"/Users/qlin/code/fes.js/docs/README.md","start":{"line":1,"column":1,"position":0},"end":{"line":65,"column":2,"position":269},"range":[0,1412],"fragment":"---\nhome: true\ntitle: 首页\nheroImage: /logo.png\nactions:\n  - text: 快速上手\n    link: /zh/guide/getting-started.html\n    type: primary\n  - text: 项目简介\n    link: /zh/guide/\n    type: secondary\nfeatures:\n  - title: Fast\n    details: Fes.js 内置路由、构建、插件管理，提供测试、布局、权限、国际化、状态管理、请求、数据字典、Svg等插件，可以满足大部分日常开发需求。\n  - title: Easy\n    details: 基于Vue.js 3.0，上手简单。贯彻 “约定优于配置” 思想，在设计插件上尽可能用约定替代配置，依然提供统一的插件配置入口，简单简洁又不失灵活。提供一致性的API入口，一致化的体验，学习起来更轻松。\n  - title: Strong\n    details: 仅仅需要关心页面内容，减少犯错的机会！提供单元测试、覆盖测试的能力保障项目质量。\n  - title: 可扩展\n    details: 借鉴 UMI 实现完整的生命周期和插件化机制，插件可以管理项目的编译时和运行时，能力均可以通过插件封装进来，在 Fes.js 中协调有序的运行。\n  - title: 面向未来\n    details: 在满足需求的同时，我们也不会停止对新技术的探索。已使用Vue3.0来提升应用性能，已使用webpack5提升构建性能和实现微服务，未来会探索vite等新技术。\n  - title: 令人愉悦\n    details: 我们的主要重点是开发人员体验。我们喜欢 Fes.js，并且会不断改进框架，所以您也喜欢它！期待有吸引力的解决方案，描述性的错误消息，强大的默认值和详细的文档。如果有问题或疑问，我们有用的社区将为您提供帮助。\nfooter: MIT Licensed | Copyright © 2020-present Webank\n---\n\n## 像数 1, 2, 3 一样容易\n\n<CodeGroup>\n  <CodeGroupItem title=\"YARN\" active>\n\n```bash\n# 创建模板\nyarn create @fesjs/fes-app myapp\n\n# 安装依赖\nyarn \n\n# 运行\nyarn dev\n```\n\n  </CodeGroupItem>\n\n  <CodeGroupItem title=\"NPM\">\n\n```bash\n# 创建模板\nnpx @fesjs/create-fes-app myapp\n\n# 安装依赖\nnpm install \n\n# 运行  \nnpm run dev\n```\n\n  </CodeGroupItem>\n</CodeGroup>\n\n## 反馈\n\n| Github Issue  | 微信群 | Fes.js开源运营小助手 |\n| --- | --- | --- |\n| [@fesjs/fes.js/issues](https://github.com/WeBankFinTech/fes.js/issues) | <img src=\"https://i.loli.net/2020/09/11/"},"duplicationB":{"sourceId":"/Users/qlin/code/fes.js/docs/zh/README.md","start":{"line":1,"column":1,"position":0},"end":{"line":65,"column":2,"position":269},"range":[0,1412],"fragment":"---\nhome: true\ntitle: 首页\nheroImage: /logo.png\nactions:\n  - text: 快速上手\n    link: /zh/guide/getting-started.html\n    type: primary\n  - text: 项目简介\n    link: /zh/guide/\n    type: secondary\nfeatures:\n  - title: Fast\n    details: Fes.js 内置路由、构建、插件管理，提供测试、布局、权限、国际化、状态管理、请求、数据字典、Svg等插件，可以满足大部分日常开发需求。\n  - title: Easy\n    details: 基于Vue.js 3.0，上手简单。贯彻 “约定优于配置” 思想，在设计插件上尽可能用约定替代配置，依然提供统一的插件配置入口，简单简洁又不失灵活。提供一致性的API入口，一致化的体验，学习起来更轻松。\n  - title: Strong\n    details: 仅仅需要关心页面内容，减少犯错的机会！提供单元测试、覆盖测试的能力保障项目质量。\n  - title: 可扩展\n    details: 借鉴 UMI 实现完整的生命周期和插件化机制，插件可以管理项目的编译时和运行时，能力均可以通过插件封装进来，在 Fes.js 中协调有序的运行。\n  - title: 面向未来\n    details: 在满足需求的同时，我们也不会停止对新技术的探索。已使用Vue3.0来提升应用性能，已使用webpack5提升构建性能和实现微服务，未来会探索vite等新技术。\n  - title: 令人愉悦\n    details: 我们的主要重点是开发人员体验。我们喜欢 Fes.js，并且会不断改进框架，所以您也喜欢它！期待有吸引力的解决方案，描述性的错误消息，强大的默认值和详细的文档。如果有问题或疑问，我们有用的社区将为您提供帮助。\nfooter: MIT Licensed | Copyright © 2020-present Webank\n---\n\n## 像数 1, 2, 3 一样容易\n\n<CodeGroup>\n  <CodeGroupItem title=\"YARN\" active>\n\n```bash\n# 创建模板\nyarn create @fesjs/fes-app myapp\n\n# 安装依赖\nyarn \n\n# 运行\nyarn dev\n```\n\n  </CodeGroupItem>\n\n  <CodeGroupItem title=\"NPM\">\n\n```bash\n# 创建模板\nnpx @fesjs/create-fes-app myapp\n\n# 安装依赖\nnpm install \n\n# 运行\nnpm run dev\n```\n\n  </CodeGroupItem>\n</CodeGroup>\n\n## 反馈\n\n| Github Issue  | 微信群 | Fes.js开源运营小助手 |\n| --- | --- | --- |\n| [@fesjs/fes.js/issues](https://github.com/WeBankFinTech/fes.js/issues) | <img src=\"https://i.loli.net/2020/09/11/2X"}}]}